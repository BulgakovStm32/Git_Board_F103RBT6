
f103rbt6_ADS1x15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c8  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08005ee0  08005ee0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ee0  08005ee0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  20000008  08005ef0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  20000744  08005ef0  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d11  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002569  00000000  00000000  00027d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000811  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001546e  00000000  00000000  0002b631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001151b  00000000  00000000  00040a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005bba1  00000000  00000000  00051fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cdc  00000000  00000000  000adb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b0838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080053e0 	.word	0x080053e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080053e0 	.word	0x080053e0

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__gedf2>:
 8000650:	f04f 3cff 	mov.w	ip, #4294967295
 8000654:	e006      	b.n	8000664 <__cmpdf2+0x4>
 8000656:	bf00      	nop

08000658 <__ledf2>:
 8000658:	f04f 0c01 	mov.w	ip, #1
 800065c:	e002      	b.n	8000664 <__cmpdf2+0x4>
 800065e:	bf00      	nop

08000660 <__cmpdf2>:
 8000660:	f04f 0c01 	mov.w	ip, #1
 8000664:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000668:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800066c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000674:	bf18      	it	ne
 8000676:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800067a:	d01b      	beq.n	80006b4 <__cmpdf2+0x54>
 800067c:	b001      	add	sp, #4
 800067e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000682:	bf0c      	ite	eq
 8000684:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000688:	ea91 0f03 	teqne	r1, r3
 800068c:	bf02      	ittt	eq
 800068e:	ea90 0f02 	teqeq	r0, r2
 8000692:	2000      	moveq	r0, #0
 8000694:	4770      	bxeq	lr
 8000696:	f110 0f00 	cmn.w	r0, #0
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf58      	it	pl
 80006a0:	4299      	cmppl	r1, r3
 80006a2:	bf08      	it	eq
 80006a4:	4290      	cmpeq	r0, r2
 80006a6:	bf2c      	ite	cs
 80006a8:	17d8      	asrcs	r0, r3, #31
 80006aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006ae:	f040 0001 	orr.w	r0, r0, #1
 80006b2:	4770      	bx	lr
 80006b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006bc:	d102      	bne.n	80006c4 <__cmpdf2+0x64>
 80006be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006c2:	d107      	bne.n	80006d4 <__cmpdf2+0x74>
 80006c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006cc:	d1d6      	bne.n	800067c <__cmpdf2+0x1c>
 80006ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006d2:	d0d3      	beq.n	800067c <__cmpdf2+0x1c>
 80006d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <__aeabi_cdrcmple>:
 80006dc:	4684      	mov	ip, r0
 80006de:	4610      	mov	r0, r2
 80006e0:	4662      	mov	r2, ip
 80006e2:	468c      	mov	ip, r1
 80006e4:	4619      	mov	r1, r3
 80006e6:	4663      	mov	r3, ip
 80006e8:	e000      	b.n	80006ec <__aeabi_cdcmpeq>
 80006ea:	bf00      	nop

080006ec <__aeabi_cdcmpeq>:
 80006ec:	b501      	push	{r0, lr}
 80006ee:	f7ff ffb7 	bl	8000660 <__cmpdf2>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	bf48      	it	mi
 80006f6:	f110 0f00 	cmnmi.w	r0, #0
 80006fa:	bd01      	pop	{r0, pc}

080006fc <__aeabi_dcmpeq>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff fff4 	bl	80006ec <__aeabi_cdcmpeq>
 8000704:	bf0c      	ite	eq
 8000706:	2001      	moveq	r0, #1
 8000708:	2000      	movne	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmplt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffea 	bl	80006ec <__aeabi_cdcmpeq>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmple>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffe0 	bl	80006ec <__aeabi_cdcmpeq>
 800072c:	bf94      	ite	ls
 800072e:	2001      	movls	r0, #1
 8000730:	2000      	movhi	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmpge>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffce 	bl	80006dc <__aeabi_cdrcmple>
 8000740:	bf94      	ite	ls
 8000742:	2001      	movls	r0, #1
 8000744:	2000      	movhi	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmpgt>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffc4 	bl	80006dc <__aeabi_cdrcmple>
 8000754:	bf34      	ite	cc
 8000756:	2001      	movcc	r0, #1
 8000758:	2000      	movcs	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_d2f>:
 8000760:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000764:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000768:	bf24      	itt	cs
 800076a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800076e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000772:	d90d      	bls.n	8000790 <__aeabi_d2f+0x30>
 8000774:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000778:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800077c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000780:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000784:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000788:	bf08      	it	eq
 800078a:	f020 0001 	biceq.w	r0, r0, #1
 800078e:	4770      	bx	lr
 8000790:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000794:	d121      	bne.n	80007da <__aeabi_d2f+0x7a>
 8000796:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800079a:	bfbc      	itt	lt
 800079c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007a0:	4770      	bxlt	lr
 80007a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007aa:	f1c2 0218 	rsb	r2, r2, #24
 80007ae:	f1c2 0c20 	rsb	ip, r2, #32
 80007b2:	fa10 f30c 	lsls.w	r3, r0, ip
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	bf18      	it	ne
 80007bc:	f040 0001 	orrne.w	r0, r0, #1
 80007c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007c8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007cc:	ea40 000c 	orr.w	r0, r0, ip
 80007d0:	fa23 f302 	lsr.w	r3, r3, r2
 80007d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007d8:	e7cc      	b.n	8000774 <__aeabi_d2f+0x14>
 80007da:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007de:	d107      	bne.n	80007f0 <__aeabi_d2f+0x90>
 80007e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007e4:	bf1e      	ittt	ne
 80007e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ee:	4770      	bxne	lr
 80007f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <__aeabi_frsub>:
 8000800:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000804:	e002      	b.n	800080c <__addsf3>
 8000806:	bf00      	nop

08000808 <__aeabi_fsub>:
 8000808:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800080c <__addsf3>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	bf1f      	itttt	ne
 8000810:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000814:	ea92 0f03 	teqne	r2, r3
 8000818:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800081c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000820:	d06a      	beq.n	80008f8 <__addsf3+0xec>
 8000822:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000826:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800082a:	bfc1      	itttt	gt
 800082c:	18d2      	addgt	r2, r2, r3
 800082e:	4041      	eorgt	r1, r0
 8000830:	4048      	eorgt	r0, r1
 8000832:	4041      	eorgt	r1, r0
 8000834:	bfb8      	it	lt
 8000836:	425b      	neglt	r3, r3
 8000838:	2b19      	cmp	r3, #25
 800083a:	bf88      	it	hi
 800083c:	4770      	bxhi	lr
 800083e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000842:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000846:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800084a:	bf18      	it	ne
 800084c:	4240      	negne	r0, r0
 800084e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000852:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000856:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800085a:	bf18      	it	ne
 800085c:	4249      	negne	r1, r1
 800085e:	ea92 0f03 	teq	r2, r3
 8000862:	d03f      	beq.n	80008e4 <__addsf3+0xd8>
 8000864:	f1a2 0201 	sub.w	r2, r2, #1
 8000868:	fa41 fc03 	asr.w	ip, r1, r3
 800086c:	eb10 000c 	adds.w	r0, r0, ip
 8000870:	f1c3 0320 	rsb	r3, r3, #32
 8000874:	fa01 f103 	lsl.w	r1, r1, r3
 8000878:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800087c:	d502      	bpl.n	8000884 <__addsf3+0x78>
 800087e:	4249      	negs	r1, r1
 8000880:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000884:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000888:	d313      	bcc.n	80008b2 <__addsf3+0xa6>
 800088a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088e:	d306      	bcc.n	800089e <__addsf3+0x92>
 8000890:	0840      	lsrs	r0, r0, #1
 8000892:	ea4f 0131 	mov.w	r1, r1, rrx
 8000896:	f102 0201 	add.w	r2, r2, #1
 800089a:	2afe      	cmp	r2, #254	; 0xfe
 800089c:	d251      	bcs.n	8000942 <__addsf3+0x136>
 800089e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a6:	bf08      	it	eq
 80008a8:	f020 0001 	biceq.w	r0, r0, #1
 80008ac:	ea40 0003 	orr.w	r0, r0, r3
 80008b0:	4770      	bx	lr
 80008b2:	0049      	lsls	r1, r1, #1
 80008b4:	eb40 0000 	adc.w	r0, r0, r0
 80008b8:	3a01      	subs	r2, #1
 80008ba:	bf28      	it	cs
 80008bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008c0:	d2ed      	bcs.n	800089e <__addsf3+0x92>
 80008c2:	fab0 fc80 	clz	ip, r0
 80008c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80008ca:	ebb2 020c 	subs.w	r2, r2, ip
 80008ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80008d2:	bfaa      	itet	ge
 80008d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008d8:	4252      	neglt	r2, r2
 80008da:	4318      	orrge	r0, r3
 80008dc:	bfbc      	itt	lt
 80008de:	40d0      	lsrlt	r0, r2
 80008e0:	4318      	orrlt	r0, r3
 80008e2:	4770      	bx	lr
 80008e4:	f092 0f00 	teq	r2, #0
 80008e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008ec:	bf06      	itte	eq
 80008ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008f2:	3201      	addeq	r2, #1
 80008f4:	3b01      	subne	r3, #1
 80008f6:	e7b5      	b.n	8000864 <__addsf3+0x58>
 80008f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000900:	bf18      	it	ne
 8000902:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000906:	d021      	beq.n	800094c <__addsf3+0x140>
 8000908:	ea92 0f03 	teq	r2, r3
 800090c:	d004      	beq.n	8000918 <__addsf3+0x10c>
 800090e:	f092 0f00 	teq	r2, #0
 8000912:	bf08      	it	eq
 8000914:	4608      	moveq	r0, r1
 8000916:	4770      	bx	lr
 8000918:	ea90 0f01 	teq	r0, r1
 800091c:	bf1c      	itt	ne
 800091e:	2000      	movne	r0, #0
 8000920:	4770      	bxne	lr
 8000922:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000926:	d104      	bne.n	8000932 <__addsf3+0x126>
 8000928:	0040      	lsls	r0, r0, #1
 800092a:	bf28      	it	cs
 800092c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000930:	4770      	bx	lr
 8000932:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000936:	bf3c      	itt	cc
 8000938:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800093c:	4770      	bxcc	lr
 800093e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000942:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000946:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800094a:	4770      	bx	lr
 800094c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000950:	bf16      	itet	ne
 8000952:	4608      	movne	r0, r1
 8000954:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000958:	4601      	movne	r1, r0
 800095a:	0242      	lsls	r2, r0, #9
 800095c:	bf06      	itte	eq
 800095e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000962:	ea90 0f01 	teqeq	r0, r1
 8000966:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800096a:	4770      	bx	lr

0800096c <__aeabi_ui2f>:
 800096c:	f04f 0300 	mov.w	r3, #0
 8000970:	e004      	b.n	800097c <__aeabi_i2f+0x8>
 8000972:	bf00      	nop

08000974 <__aeabi_i2f>:
 8000974:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000978:	bf48      	it	mi
 800097a:	4240      	negmi	r0, r0
 800097c:	ea5f 0c00 	movs.w	ip, r0
 8000980:	bf08      	it	eq
 8000982:	4770      	bxeq	lr
 8000984:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000988:	4601      	mov	r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	e01c      	b.n	80009ca <__aeabi_l2f+0x2a>

08000990 <__aeabi_ul2f>:
 8000990:	ea50 0201 	orrs.w	r2, r0, r1
 8000994:	bf08      	it	eq
 8000996:	4770      	bxeq	lr
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e00a      	b.n	80009b4 <__aeabi_l2f+0x14>
 800099e:	bf00      	nop

080009a0 <__aeabi_l2f>:
 80009a0:	ea50 0201 	orrs.w	r2, r0, r1
 80009a4:	bf08      	it	eq
 80009a6:	4770      	bxeq	lr
 80009a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009ac:	d502      	bpl.n	80009b4 <__aeabi_l2f+0x14>
 80009ae:	4240      	negs	r0, r0
 80009b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b4:	ea5f 0c01 	movs.w	ip, r1
 80009b8:	bf02      	ittt	eq
 80009ba:	4684      	moveq	ip, r0
 80009bc:	4601      	moveq	r1, r0
 80009be:	2000      	moveq	r0, #0
 80009c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009c4:	bf08      	it	eq
 80009c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ce:	fabc f28c 	clz	r2, ip
 80009d2:	3a08      	subs	r2, #8
 80009d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009d8:	db10      	blt.n	80009fc <__aeabi_l2f+0x5c>
 80009da:	fa01 fc02 	lsl.w	ip, r1, r2
 80009de:	4463      	add	r3, ip
 80009e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80009e4:	f1c2 0220 	rsb	r2, r2, #32
 80009e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009ec:	fa20 f202 	lsr.w	r2, r0, r2
 80009f0:	eb43 0002 	adc.w	r0, r3, r2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f102 0220 	add.w	r2, r2, #32
 8000a00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a04:	f1c2 0220 	rsb	r2, r2, #32
 8000a08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000a10:	eb43 0002 	adc.w	r0, r3, r2
 8000a14:	bf08      	it	eq
 8000a16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a1a:	4770      	bx	lr

08000a1c <__gesf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpsf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__lesf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpsf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpsf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d011      	beq.n	8000a6c <__cmpsf2+0x40>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a4e:	bf18      	it	ne
 8000a50:	ea90 0f01 	teqne	r0, r1
 8000a54:	bf58      	it	pl
 8000a56:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a5a:	bf88      	it	hi
 8000a5c:	17c8      	asrhi	r0, r1, #31
 8000a5e:	bf38      	it	cc
 8000a60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a64:	bf18      	it	ne
 8000a66:	f040 0001 	orrne.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a70:	d102      	bne.n	8000a78 <__cmpsf2+0x4c>
 8000a72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a76:	d105      	bne.n	8000a84 <__cmpsf2+0x58>
 8000a78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a7c:	d1e4      	bne.n	8000a48 <__cmpsf2+0x1c>
 8000a7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a82:	d0e1      	beq.n	8000a48 <__cmpsf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cfrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4661      	mov	r1, ip
 8000a92:	e7ff      	b.n	8000a94 <__aeabi_cfcmpeq>

08000a94 <__aeabi_cfcmpeq>:
 8000a94:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a96:	f7ff ffc9 	bl	8000a2c <__cmpsf2>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	bf48      	it	mi
 8000a9e:	f110 0f00 	cmnmi.w	r0, #0
 8000aa2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aa4 <__aeabi_fcmpeq>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff fff4 	bl	8000a94 <__aeabi_cfcmpeq>
 8000aac:	bf0c      	ite	eq
 8000aae:	2001      	moveq	r0, #1
 8000ab0:	2000      	movne	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_fcmplt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffea 	bl	8000a94 <__aeabi_cfcmpeq>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_fcmple>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffe0 	bl	8000a94 <__aeabi_cfcmpeq>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fcmpge>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffd2 	bl	8000a8c <__aeabi_cfrcmple>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_fcmpgt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffc8 	bl	8000a8c <__aeabi_cfrcmple>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_f2iz>:
 8000b08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b10:	d30f      	bcc.n	8000b32 <__aeabi_f2iz+0x2a>
 8000b12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_f2iz+0x30>
 8000b1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b28:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2c:	bf18      	it	ne
 8000b2e:	4240      	negne	r0, r0
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr
 8000b38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b3c:	d101      	bne.n	8000b42 <__aeabi_f2iz+0x3a>
 8000b3e:	0242      	lsls	r2, r0, #9
 8000b40:	d105      	bne.n	8000b4e <__aeabi_f2iz+0x46>
 8000b42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b46:	bf08      	it	eq
 8000b48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <GPIO_MCU_Init>:

//**********************************************************

//*******************************************************************************************
//*******************************************************************************************
void GPIO_MCU_Init(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

	//PC13 - Led.
	STM32_GPIO_InitForOutputPushPull(LED_PC13_GPIO, LED_PC13_PIN);
 8000b58:	210d      	movs	r1, #13
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <GPIO_MCU_Init+0x18>)
 8000b5c:	f002 f9b8 	bl	8002ed0 <STM32_GPIO_InitForOutputPushPull>

	//Имитация гапряжения питания БигБорда - PB14
	STM32_GPIO_InitForOutputPushPull(BIG_BOARD_PWR_GPIO, BIG_BOARD_PWR_PIN);
 8000b60:	2100      	movs	r1, #0
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <GPIO_MCU_Init+0x1c>)
 8000b64:	f002 f9b4 	bl	8002ed0 <STM32_GPIO_InitForOutputPushPull>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40010c00 	.word	0x40010c00

08000b74 <I2cRxParsing>:
static uint32_t responseSize           = 0;
static uint32_t protocol_i2c_activFlag = 0;

//*******************************************************************************************
//*******************************************************************************************
static void I2cRxParsing(void){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

	MCU_Response_t *response = (MCU_Response_t *)I2cProtocol.pRxBuf;
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <I2cRxParsing+0x1ec>)
 8000b7c:	607b      	str	r3, [r7, #4]
	//-----------------------------
	//Проверка CRC.
	uint8_t crcCalc = CRC_Calculate((uint8_t*)response, response->Count+1);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	4619      	mov	r1, r3
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fb64 	bl	8001254 <CRC_Calculate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	70fb      	strb	r3, [r7, #3]
	uint8_t crcReq  = response->Payload[response->Count-1];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	789b      	ldrb	r3, [r3, #2]
 8000b9c:	70bb      	strb	r3, [r7, #2]
	if(crcCalc != crcReq) return;//если CRC не совпадает то выходим.
 8000b9e:	78fa      	ldrb	r2, [r7, #3]
 8000ba0:	78bb      	ldrb	r3, [r7, #2]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f040 80d4 	bne.w	8000d50 <I2cRxParsing+0x1dc>
	//-----------------------------
	I2cProtocol.timeOut    = 0; //Сброс таймаута.
 8000ba8:	4b6e      	ldr	r3, [pc, #440]	; (8000d64 <I2cRxParsing+0x1f0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
	protocol_i2c_activFlag = 1; //Индикация приема пакета.
 8000bae:	4b6e      	ldr	r3, [pc, #440]	; (8000d68 <I2cRxParsing+0x1f4>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
	//Разбор пришедшего пакета
	switch(response->CmdCode){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	3b0c      	subs	r3, #12
 8000bba:	2b36      	cmp	r3, #54	; 0x36
 8000bbc:	f200 80ca 	bhi.w	8000d54 <I2cRxParsing+0x1e0>
 8000bc0:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <I2cRxParsing+0x54>)
 8000bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc6:	bf00      	nop
 8000bc8:	08000cb1 	.word	0x08000cb1
 8000bcc:	08000cbd 	.word	0x08000cbd
 8000bd0:	08000d55 	.word	0x08000d55
 8000bd4:	08000d55 	.word	0x08000d55
 8000bd8:	08000cc9 	.word	0x08000cc9
 8000bdc:	08000ca5 	.word	0x08000ca5
 8000be0:	08000d55 	.word	0x08000d55
 8000be4:	08000d55 	.word	0x08000d55
 8000be8:	08000d21 	.word	0x08000d21
 8000bec:	08000d55 	.word	0x08000d55
 8000bf0:	08000d55 	.word	0x08000d55
 8000bf4:	08000d55 	.word	0x08000d55
 8000bf8:	08000d55 	.word	0x08000d55
 8000bfc:	08000d55 	.word	0x08000d55
 8000c00:	08000d55 	.word	0x08000d55
 8000c04:	08000d55 	.word	0x08000d55
 8000c08:	08000d55 	.word	0x08000d55
 8000c0c:	08000d55 	.word	0x08000d55
 8000c10:	08000d55 	.word	0x08000d55
 8000c14:	08000d55 	.word	0x08000d55
 8000c18:	08000d55 	.word	0x08000d55
 8000c1c:	08000d55 	.word	0x08000d55
 8000c20:	08000d55 	.word	0x08000d55
 8000c24:	08000d55 	.word	0x08000d55
 8000c28:	08000d55 	.word	0x08000d55
 8000c2c:	08000d55 	.word	0x08000d55
 8000c30:	08000d55 	.word	0x08000d55
 8000c34:	08000d55 	.word	0x08000d55
 8000c38:	08000d55 	.word	0x08000d55
 8000c3c:	08000d55 	.word	0x08000d55
 8000c40:	08000d55 	.word	0x08000d55
 8000c44:	08000d55 	.word	0x08000d55
 8000c48:	08000d55 	.word	0x08000d55
 8000c4c:	08000d55 	.word	0x08000d55
 8000c50:	08000d55 	.word	0x08000d55
 8000c54:	08000d55 	.word	0x08000d55
 8000c58:	08000d55 	.word	0x08000d55
 8000c5c:	08000d55 	.word	0x08000d55
 8000c60:	08000d55 	.word	0x08000d55
 8000c64:	08000d55 	.word	0x08000d55
 8000c68:	08000d55 	.word	0x08000d55
 8000c6c:	08000d55 	.word	0x08000d55
 8000c70:	08000d55 	.word	0x08000d55
 8000c74:	08000d55 	.word	0x08000d55
 8000c78:	08000d55 	.word	0x08000d55
 8000c7c:	08000d55 	.word	0x08000d55
 8000c80:	08000d55 	.word	0x08000d55
 8000c84:	08000d55 	.word	0x08000d55
 8000c88:	08000d55 	.word	0x08000d55
 8000c8c:	08000d55 	.word	0x08000d55
 8000c90:	08000d55 	.word	0x08000d55
 8000c94:	08000d55 	.word	0x08000d55
 8000c98:	08000d2d 	.word	0x08000d2d
 8000c9c:	08000d39 	.word	0x08000d39
 8000ca0:	08000d45 	.word	0x08000d45
		//------------------
		case(cmdGetMillisCount):
			MCUc7Data.msCount = *(uint32_t*)&response->Payload[0];
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000cac:	60d3      	str	r3, [r2, #12]
		break;
 8000cae:	e054      	b.n	8000d5a <I2cRxParsing+0x1e6>
		//------------------
		case(cmdGetEncoderCode):
			MCUc7Data.EncoderCode = *(uint32_t *)&response->Payload[2];
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000cb8:	6013      	str	r3, [r2, #0]
		break;
 8000cba:	e04e      	b.n	8000d5a <I2cRxParsing+0x1e6>
		//------------------
		case(cmdGetEncoderAngle):
			MCUc7Data.EncoderAngle = *(uint32_t *)&response->Payload[2];
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a2a      	ldr	r2, [pc, #168]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000cc4:	6053      	str	r3, [r2, #4]
		break;
 8000cc6:	e048      	b.n	8000d5a <I2cRxParsing+0x1e6>
		//------------------
		case(cmdGetTemperature):
			if(response->Payload[3] == 1)	  // Датчик 1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d111      	bne.n	8000cf4 <I2cRxParsing+0x180>
			{
				MCUc7Data.TemperatureSense1  = (uint32_t)( response->Payload[0] << 24); //знак
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	789b      	ldrb	r3, [r3, #2]
 8000cd4:	061b      	lsls	r3, r3, #24
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000cda:	619a      	str	r2, [r3, #24]
				MCUc7Data.TemperatureSense1 |= (uint32_t)((response->Payload[1] << 8) | //темперетура
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	78d2      	ldrb	r2, [r2, #3]
 8000ce4:	0212      	lsls	r2, r2, #8
														   response->Payload[2]);		//
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	7909      	ldrb	r1, [r1, #4]
				MCUc7Data.TemperatureSense1 |= (uint32_t)((response->Payload[1] << 8) | //темперетура
 8000cea:	430a      	orrs	r2, r1
 8000cec:	4313      	orrs	r3, r2
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000cf0:	6193      	str	r3, [r2, #24]
			{
				MCUc7Data.TemperatureSense2  = (uint32_t)( response->Payload[0] << 24); //знак
				MCUc7Data.TemperatureSense2 |= (uint32_t)((response->Payload[1] << 8) | //темперетура
														   response->Payload[2]);		//
			}
		break;
 8000cf2:	e031      	b.n	8000d58 <I2cRxParsing+0x1e4>
			else if(response->Payload[3] == 2)// Датчик 2
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	795b      	ldrb	r3, [r3, #5]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d12d      	bne.n	8000d58 <I2cRxParsing+0x1e4>
				MCUc7Data.TemperatureSense2  = (uint32_t)( response->Payload[0] << 24); //знак
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	789b      	ldrb	r3, [r3, #2]
 8000d00:	061b      	lsls	r3, r3, #24
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000d06:	61da      	str	r2, [r3, #28]
				MCUc7Data.TemperatureSense2 |= (uint32_t)((response->Payload[1] << 8) | //темперетура
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	78d2      	ldrb	r2, [r2, #3]
 8000d10:	0212      	lsls	r2, r2, #8
														   response->Payload[2]);		//
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	7909      	ldrb	r1, [r1, #4]
				MCUc7Data.TemperatureSense2 |= (uint32_t)((response->Payload[1] << 8) | //темперетура
 8000d16:	430a      	orrs	r2, r1
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000d1c:	61d3      	str	r3, [r2, #28]
		break;
 8000d1e:	e01b      	b.n	8000d58 <I2cRxParsing+0x1e4>
		//------------------
		case(cmdGetSystemCtrlReg):
			*(uint32_t*)&MCUc7Data.SysCtrlReg = *(uint32_t *)&response->Payload[0];
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3302      	adds	r3, #2
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <I2cRxParsing+0x1fc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6013      	str	r3, [r2, #0]
		break;
 8000d2a:	e016      	b.n	8000d5a <I2cRxParsing+0x1e6>
		//------------------
		case(cmdGetSupplyVoltage):
			MCUc7Data.SupplyVoltageVal = *(uint32_t *)&response->Payload[0];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3302      	adds	r3, #2
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000d34:	6093      	str	r3, [r2, #8]
		break;
 8000d36:	e010      	b.n	8000d5a <I2cRxParsing+0x1e6>
		//------------------
		case(cmdGetSenseState):
			MCUc7Data.Sense = *(uint32_t *)&response->Payload[0];
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000d40:	6113      	str	r3, [r2, #16]
		break;
 8000d42:	e00a      	b.n	8000d5a <I2cRxParsing+0x1e6>
		//------------------
		case(cmdGetResetCount):
			MCUc7Data.I2cResetCount = *(uint32_t *)&response->Payload[0];
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3302      	adds	r3, #2
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <I2cRxParsing+0x1f8>)
 8000d4c:	6153      	str	r3, [r2, #20]
		break;
 8000d4e:	e004      	b.n	8000d5a <I2cRxParsing+0x1e6>
	if(crcCalc != crcReq) return;//если CRC не совпадает то выходим.
 8000d50:	bf00      	nop
 8000d52:	e002      	b.n	8000d5a <I2cRxParsing+0x1e6>
		//------------------
		default:
		break;
 8000d54:	bf00      	nop
 8000d56:	e000      	b.n	8000d5a <I2cRxParsing+0x1e6>
		break;
 8000d58:	bf00      	nop
		//------------------
	}
}
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000008c 	.word	0x2000008c
 8000d64:	20000024 	.word	0x20000024
 8000d68:	20000104 	.word	0x20000104
 8000d6c:	200000dc 	.word	0x200000dc
 8000d70:	200000fc 	.word	0x200000fc

08000d74 <I2cTxParsing>:
//************************************************************
static void I2cTxParsing(void){
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <PROTOCOL_MASTER_I2C_Init>:

	LED_PC13_Toggle();
}
//*******************************************************************************************
//*******************************************************************************************
void PROTOCOL_MASTER_I2C_Init(void){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	//Отладка I2C+DMA.
	//I2C_DMA_Init(I2C1, I2C_GPIO_NOREMAP);

	//Вопрос - Нужно ли делать работу с ДМА через контекст(т.е. через структуру)??
	//Не везде этот способу удобен. Нужно подумать.
	I2cProtocol.i2c 	  = I2C1;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <PROTOCOL_MASTER_I2C_Init+0x30>)
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <PROTOCOL_MASTER_I2C_Init+0x34>)
 8000d88:	601a      	str	r2, [r3, #0]
	I2cProtocol.gpioRemap = I2C_GPIO_NOREMAP;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <PROTOCOL_MASTER_I2C_Init+0x30>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
	I2cProtocol.slaveAddr = MCUv7_I2C_ADDR;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <PROTOCOL_MASTER_I2C_Init+0x30>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	619a      	str	r2, [r3, #24]
	I2cProtocol.i2cSlaveRxCpltCallback = I2cRxParsing;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <PROTOCOL_MASTER_I2C_Init+0x30>)
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <PROTOCOL_MASTER_I2C_Init+0x38>)
 8000d9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	I2cProtocol.i2cSlaveTxCpltCallback = I2cTxParsing;
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <PROTOCOL_MASTER_I2C_Init+0x30>)
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <PROTOCOL_MASTER_I2C_Init+0x3c>)
 8000da2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	I2C_DMA_Init(&I2cProtocol);
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <PROTOCOL_MASTER_I2C_Init+0x30>)
 8000da8:	f002 fd60 	bl	800386c <I2C_DMA_Init>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000024 	.word	0x20000024
 8000db4:	40005400 	.word	0x40005400
 8000db8:	08000b75 	.word	0x08000b75
 8000dbc:	08000d75 	.word	0x08000d75

08000dc0 <PROTOCOL_MASTER_I2C_RequestToMCU>:
//************************************************************
void PROTOCOL_MASTER_I2C_RequestToMCU(void){
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0

	static uint32_t cyclCount = cmdGetMillisCount;
	static uint32_t flag = 0;
	MCU_Request_t   *request  = (MCU_Request_t *)I2cProtocol.pTxBuf; //I2cDma.pTxBuf;
 8000dc6:	4b99      	ldr	r3, [pc, #612]	; (800102c <PROTOCOL_MASTER_I2C_RequestToMCU+0x26c>)
 8000dc8:	60bb      	str	r3, [r7, #8]
	//-----------------------------
	//Индикация передачи
	//LedPC13Toggel();
	switch(cyclCount){
 8000dca:	4b99      	ldr	r3, [pc, #612]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3b0d      	subs	r3, #13
 8000dd0:	2b35      	cmp	r3, #53	; 0x35
 8000dd2:	f200 80db 	bhi.w	8000f8c <PROTOCOL_MASTER_I2C_RequestToMCU+0x1cc>
 8000dd6:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <PROTOCOL_MASTER_I2C_RequestToMCU+0x1c>)
 8000dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ddc:	08000ecf 	.word	0x08000ecf
 8000de0:	08000f8d 	.word	0x08000f8d
 8000de4:	08000f8d 	.word	0x08000f8d
 8000de8:	08000ee9 	.word	0x08000ee9
 8000dec:	08000eb5 	.word	0x08000eb5
 8000df0:	08000f8d 	.word	0x08000f8d
 8000df4:	08000f8d 	.word	0x08000f8d
 8000df8:	08000f73 	.word	0x08000f73
 8000dfc:	08000f8d 	.word	0x08000f8d
 8000e00:	08000f8d 	.word	0x08000f8d
 8000e04:	08000f8d 	.word	0x08000f8d
 8000e08:	08000f8d 	.word	0x08000f8d
 8000e0c:	08000f8d 	.word	0x08000f8d
 8000e10:	08000f8d 	.word	0x08000f8d
 8000e14:	08000f8d 	.word	0x08000f8d
 8000e18:	08000f8d 	.word	0x08000f8d
 8000e1c:	08000f8d 	.word	0x08000f8d
 8000e20:	08000f8d 	.word	0x08000f8d
 8000e24:	08000f8d 	.word	0x08000f8d
 8000e28:	08000f8d 	.word	0x08000f8d
 8000e2c:	08000f8d 	.word	0x08000f8d
 8000e30:	08000f8d 	.word	0x08000f8d
 8000e34:	08000f8d 	.word	0x08000f8d
 8000e38:	08000f8d 	.word	0x08000f8d
 8000e3c:	08000f8d 	.word	0x08000f8d
 8000e40:	08000f8d 	.word	0x08000f8d
 8000e44:	08000f8d 	.word	0x08000f8d
 8000e48:	08000f8d 	.word	0x08000f8d
 8000e4c:	08000f8d 	.word	0x08000f8d
 8000e50:	08000f8d 	.word	0x08000f8d
 8000e54:	08000f8d 	.word	0x08000f8d
 8000e58:	08000f8d 	.word	0x08000f8d
 8000e5c:	08000f8d 	.word	0x08000f8d
 8000e60:	08000f8d 	.word	0x08000f8d
 8000e64:	08000f8d 	.word	0x08000f8d
 8000e68:	08000f8d 	.word	0x08000f8d
 8000e6c:	08000f8d 	.word	0x08000f8d
 8000e70:	08000f8d 	.word	0x08000f8d
 8000e74:	08000f8d 	.word	0x08000f8d
 8000e78:	08000f8d 	.word	0x08000f8d
 8000e7c:	08000f8d 	.word	0x08000f8d
 8000e80:	08000f8d 	.word	0x08000f8d
 8000e84:	08000f8d 	.word	0x08000f8d
 8000e88:	08000f8d 	.word	0x08000f8d
 8000e8c:	08000f8d 	.word	0x08000f8d
 8000e90:	08000f8d 	.word	0x08000f8d
 8000e94:	08000f8d 	.word	0x08000f8d
 8000e98:	08000f8d 	.word	0x08000f8d
 8000e9c:	08000f8d 	.word	0x08000f8d
 8000ea0:	08000f8d 	.word	0x08000f8d
 8000ea4:	08000f8d 	.word	0x08000f8d
 8000ea8:	08000f25 	.word	0x08000f25
 8000eac:	08000f3f 	.word	0x08000f3f
 8000eb0:	08000f59 	.word	0x08000f59
		//------------------
		case(cmdGetMillisCount):
			request->CmdCode = cmdGetMillisCount;	//
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2211      	movs	r2, #17
 8000eb8:	701a      	strb	r2, [r3, #0]
			request->Count   = 1;					//кол-во байтов в запросе
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	705a      	strb	r2, [r3, #1]
			responseSize	 = 7;					//сколько байт вычитываем(Count+Cmd+Data(uint32)+CRC)
 8000ec0:	4b5c      	ldr	r3, [pc, #368]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	601a      	str	r2, [r3, #0]

			cyclCount = cmdGetEncoderAngle;
 8000ec6:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000ec8:	220d      	movs	r2, #13
 8000eca:	601a      	str	r2, [r3, #0]
		break;
 8000ecc:	e062      	b.n	8000f94 <PROTOCOL_MASTER_I2C_RequestToMCU+0x1d4>
		//------------------
		case(cmdGetEncoderAngle):
			request->CmdCode = cmdGetEncoderAngle;//
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	220d      	movs	r2, #13
 8000ed2:	701a      	strb	r2, [r3, #0]
			request->Count   = 1;				  //кол-во байтов в запросе
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	705a      	strb	r2, [r3, #1]
			responseSize	 = 17;				  //сколько байт вычитываем(Count+Cmd+Data+CRC)
 8000eda:	4b56      	ldr	r3, [pc, #344]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000edc:	2211      	movs	r2, #17
 8000ede:	601a      	str	r2, [r3, #0]

			cyclCount = cmdGetTemperature;
 8000ee0:	4b53      	ldr	r3, [pc, #332]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	601a      	str	r2, [r3, #0]
		break;
 8000ee6:	e055      	b.n	8000f94 <PROTOCOL_MASTER_I2C_RequestToMCU+0x1d4>
		//------------------
		case(cmdGetTemperature):
			request->CmdCode = cmdGetTemperature; //
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2210      	movs	r2, #16
 8000eec:	701a      	strb	r2, [r3, #0]
			request->Count   = 2;				  //кол-во байтов в запросе
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	705a      	strb	r2, [r3, #1]

			//sensor_number
			if(flag) request->Payload[0] = 1;
 8000ef4:	4b50      	ldr	r3, [pc, #320]	; (8001038 <PROTOCOL_MASTER_I2C_RequestToMCU+0x278>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <PROTOCOL_MASTER_I2C_RequestToMCU+0x144>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2201      	movs	r2, #1
 8000f00:	709a      	strb	r2, [r3, #2]
 8000f02:	e002      	b.n	8000f0a <PROTOCOL_MASTER_I2C_RequestToMCU+0x14a>
			else	 request->Payload[0] = 2;
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2202      	movs	r2, #2
 8000f08:	709a      	strb	r2, [r3, #2]
			flag ^= 1;
 8000f0a:	4b4b      	ldr	r3, [pc, #300]	; (8001038 <PROTOCOL_MASTER_I2C_RequestToMCU+0x278>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	4a49      	ldr	r2, [pc, #292]	; (8001038 <PROTOCOL_MASTER_I2C_RequestToMCU+0x278>)
 8000f14:	6013      	str	r3, [r2, #0]

			responseSize = 7;					//сколько байт вычитываем(Count+Cmd+Data+CRC)
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]

			cyclCount = cmdGetSupplyVoltage;
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	601a      	str	r2, [r3, #0]
		break;
 8000f22:	e037      	b.n	8000f94 <PROTOCOL_MASTER_I2C_RequestToMCU+0x1d4>
		//------------------
		case(cmdGetSupplyVoltage):
			request->CmdCode = cmdGetSupplyVoltage;	//
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2240      	movs	r2, #64	; 0x40
 8000f28:	701a      	strb	r2, [r3, #0]
			request->Count   = 1;					//
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	705a      	strb	r2, [r3, #1]
			responseSize	 = 7;					//сколько байт вычитываем(Count+Cmd+Data(uint32)+CRC)
 8000f30:	4b40      	ldr	r3, [pc, #256]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000f32:	2207      	movs	r2, #7
 8000f34:	601a      	str	r2, [r3, #0]

			cyclCount = cmdGetSenseState;
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000f38:	2241      	movs	r2, #65	; 0x41
 8000f3a:	601a      	str	r2, [r3, #0]
		break;
 8000f3c:	e02a      	b.n	8000f94 <PROTOCOL_MASTER_I2C_RequestToMCU+0x1d4>
		//------------------
		case(cmdGetSenseState):
			request->CmdCode = cmdGetSenseState;	//
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2241      	movs	r2, #65	; 0x41
 8000f42:	701a      	strb	r2, [r3, #0]
			request->Count   = 1;					//
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2201      	movs	r2, #1
 8000f48:	705a      	strb	r2, [r3, #1]
			responseSize	 = 7;					//сколько байт вычитываем(Count+Cmd+Data(uint32)+CRC)
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]

			cyclCount = cmdGetResetCount;
 8000f50:	4b37      	ldr	r3, [pc, #220]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000f52:	2242      	movs	r2, #66	; 0x42
 8000f54:	601a      	str	r2, [r3, #0]
		break;
 8000f56:	e01d      	b.n	8000f94 <PROTOCOL_MASTER_I2C_RequestToMCU+0x1d4>
		//------------------
		case(cmdGetResetCount):
			request->CmdCode = cmdGetResetCount;	//
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2242      	movs	r2, #66	; 0x42
 8000f5c:	701a      	strb	r2, [r3, #0]
			request->Count   = 1;					//
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2201      	movs	r2, #1
 8000f62:	705a      	strb	r2, [r3, #1]
			responseSize	 = 7;					//сколько байт вычитываем(Count+Cmd+Data(uint32)+CRC)
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	601a      	str	r2, [r3, #0]

			cyclCount = cmdGetSystemCtrlReg;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	601a      	str	r2, [r3, #0]
		break;
 8000f70:	e010      	b.n	8000f94 <PROTOCOL_MASTER_I2C_RequestToMCU+0x1d4>
		//------------------
		case(cmdGetSystemCtrlReg):
			request->CmdCode = cmdGetSystemCtrlReg;	//
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2214      	movs	r2, #20
 8000f76:	701a      	strb	r2, [r3, #0]
			request->Count   = 1;					//кол-во байтов в запросе
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	705a      	strb	r2, [r3, #1]
			responseSize	 = 7;					//сколько байт вычитываем
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
													//(Count+Cmd+Data(uint32)+CRC)
			cyclCount = cmdGetMillisCount;
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000f86:	2211      	movs	r2, #17
 8000f88:	601a      	str	r2, [r3, #0]
		break;
 8000f8a:	e003      	b.n	8000f94 <PROTOCOL_MASTER_I2C_RequestToMCU+0x1d4>
		//------------------
		default:
			cyclCount = cmdGetMillisCount;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <PROTOCOL_MASTER_I2C_RequestToMCU+0x270>)
 8000f8e:	2211      	movs	r2, #17
 8000f90:	601a      	str	r2, [r3, #0]
			return;
 8000f92:	e047      	b.n	8001024 <PROTOCOL_MASTER_I2C_RequestToMCU+0x264>
		break;
		//------------------
	}
	//-----------------------------------------
	//Расчет CRC
	request->Payload[request->Count-1] = CRC_Calculate((uint8_t*)request, request->Count+1);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	1e5c      	subs	r4, r3, #1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f000 f955 	bl	8001254 <CRC_Calculate>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4423      	add	r3, r4
 8000fb2:	709a      	strb	r2, [r3, #2]
	//-----------------------------------------
	//Перадача команды в MCUv7
	uint32_t err = I2C_StartAndSendDeviceAddr(MCUv7_I2C, MCUv7_I2C_ADDR|I2C_MODE_WRITE);
 8000fb4:	210c      	movs	r1, #12
 8000fb6:	4821      	ldr	r0, [pc, #132]	; (800103c <PROTOCOL_MASTER_I2C_RequestToMCU+0x27c>)
 8000fb8:	f002 f8b2 	bl	8003120 <I2C_StartAndSendDeviceAddr>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	607b      	str	r3, [r7, #4]
		 if(err == I2C_ERR_ADDR) return;//Если нет Ack то выходим.
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d02d      	beq.n	8001022 <PROTOCOL_MASTER_I2C_RequestToMCU+0x262>
	else if(err == I2C_ERR_START)		//Если ошибка формирования старт последовательности
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d103      	bne.n	8000fd4 <PROTOCOL_MASTER_I2C_RequestToMCU+0x214>
	{
		I2C_DMA_Init(&I2cProtocol); //Повторная инициализация I2C.
 8000fcc:	481c      	ldr	r0, [pc, #112]	; (8001040 <PROTOCOL_MASTER_I2C_RequestToMCU+0x280>)
 8000fce:	f002 fc4d 	bl	800386c <I2C_DMA_Init>
		return;
 8000fd2:	e027      	b.n	8001024 <PROTOCOL_MASTER_I2C_RequestToMCU+0x264>
	}
	I2C_SendDataWithoutStop(MCUv7_I2C, (uint8_t*)request, request->Count+2);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	785b      	ldrb	r3, [r3, #1]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <PROTOCOL_MASTER_I2C_RequestToMCU+0x27c>)
 8000fe0:	f002 f9d2 	bl	8003388 <I2C_SendDataWithoutStop>
	//-----------------------------------------
	//Чтение ответа на команду от MCUv7 с помощью DMA.
	I2cProtocol.rxBufSize = responseSize;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <PROTOCOL_MASTER_I2C_RequestToMCU+0x280>)
 8000fea:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	if(I2C_DMA_Read(&I2cProtocol) == I2C_DMA_NAC)//Если ошибка при чтении ответа
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <PROTOCOL_MASTER_I2C_RequestToMCU+0x280>)
 8000ff0:	f002 fc52 	bl	8003898 <I2C_DMA_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d114      	bne.n	8001024 <PROTOCOL_MASTER_I2C_RequestToMCU+0x264>
	{
		for(uint32_t i = 0; i < responseSize; i++) *(I2cProtocol.pRxBuf+i) = 0;//Очистка буфера.
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	e007      	b.n	8001010 <PROTOCOL_MASTER_I2C_RequestToMCU+0x250>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <PROTOCOL_MASTER_I2C_RequestToMCU+0x284>)
 8001004:	4413      	add	r3, r2
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <PROTOCOL_MASTER_I2C_RequestToMCU+0x274>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3f2      	bcc.n	8001000 <PROTOCOL_MASTER_I2C_RequestToMCU+0x240>
		I2C_DMA_Init(&I2cProtocol);
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <PROTOCOL_MASTER_I2C_RequestToMCU+0x280>)
 800101c:	f002 fc26 	bl	800386c <I2C_DMA_Init>
 8001020:	e000      	b.n	8001024 <PROTOCOL_MASTER_I2C_RequestToMCU+0x264>
		 if(err == I2C_ERR_ADDR) return;//Если нет Ack то выходим.
 8001022:	bf00      	nop
	}
}
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	bf00      	nop
 800102c:	20000044 	.word	0x20000044
 8001030:	20000000 	.word	0x20000000
 8001034:	20000100 	.word	0x20000100
 8001038:	20000108 	.word	0x20000108
 800103c:	40005400 	.word	0x40005400
 8001040:	20000024 	.word	0x20000024
 8001044:	2000008c 	.word	0x2000008c

08001048 <PROTOCOL_MASTER_I2C_GetI2cNacCount>:
	cmd.Count   = 5;				    //Размер блока данных команды в байтах
	*(int32_t*)&cmd.Payload = angle;
	PROTOCOL_MASTER_I2C_SendCmdToMCU(&cmd);
}
//****************************************************
uint32_t PROTOCOL_MASTER_I2C_GetI2cNacCount(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

	return I2C_Master_GetNacCount(I2cProtocol.i2c);
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <PROTOCOL_MASTER_I2C_GetI2cNacCount+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fa41 	bl	80034d8 <I2C_Master_GetNacCount>
 8001056:	4603      	mov	r3, r0
}
 8001058:	4618      	mov	r0, r3
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000024 	.word	0x20000024

08001060 <PROTOCOL_MASTER_I2C_GetDataMCU>:
//****************************************************
MCUv7_Data_t* PROTOCOL_MASTER_I2C_GetDataMCU(void){
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

	return &MCUc7Data;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <PROTOCOL_MASTER_I2C_GetDataMCU+0x10>)
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200000dc 	.word	0x200000dc

08001074 <Blink_Loop>:
static volatile uint32_t blink_mSCount = 0;

//*******************************************************************************************
//*******************************************************************************************
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
	//--------------------
	++blink_mSCount;
 8001078:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <Blink_Loop+0x100>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <Blink_Loop+0x100>)
 8001080:	6013      	str	r3, [r2, #0]
	++blinkCount;
 8001082:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <Blink_Loop+0x104>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <Blink_Loop+0x104>)
 800108c:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) blinkReg ^= (1 << INTERVAL_50_mS);
 800108e:	4b3a      	ldr	r3, [pc, #232]	; (8001178 <Blink_Loop+0x104>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	4a3a      	ldr	r2, [pc, #232]	; (800117c <Blink_Loop+0x108>)
 8001094:	fba2 1203 	umull	r1, r2, r2, r3
 8001098:	0912      	lsrs	r2, r2, #4
 800109a:	2132      	movs	r1, #50	; 0x32
 800109c:	fb01 f202 	mul.w	r2, r1, r2
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d107      	bne.n	80010b8 <Blink_Loop+0x44>
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <Blink_Loop+0x10c>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <Blink_Loop+0x10c>)
 80010b6:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) blinkReg ^= (1 << INTERVAL_100_mS);
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <Blink_Loop+0x104>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	4a2f      	ldr	r2, [pc, #188]	; (800117c <Blink_Loop+0x108>)
 80010be:	fba2 1203 	umull	r1, r2, r2, r3
 80010c2:	0952      	lsrs	r2, r2, #5
 80010c4:	2164      	movs	r1, #100	; 0x64
 80010c6:	fb01 f202 	mul.w	r2, r1, r2
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <Blink_Loop+0x6e>
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <Blink_Loop+0x10c>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f083 0302 	eor.w	r3, r3, #2
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <Blink_Loop+0x10c>)
 80010e0:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) blinkReg ^= (1 << INTERVAL_250_mS);
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <Blink_Loop+0x104>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	4a27      	ldr	r2, [pc, #156]	; (8001184 <Blink_Loop+0x110>)
 80010e8:	fba2 1203 	umull	r1, r2, r2, r3
 80010ec:	0912      	lsrs	r2, r2, #4
 80010ee:	21fa      	movs	r1, #250	; 0xfa
 80010f0:	fb01 f202 	mul.w	r2, r1, r2
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d107      	bne.n	800110c <Blink_Loop+0x98>
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <Blink_Loop+0x10c>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b29b      	uxth	r3, r3
 8001102:	f083 0304 	eor.w	r3, r3, #4
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <Blink_Loop+0x10c>)
 800110a:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) blinkReg ^= (1 << INTERVAL_500_mS);
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <Blink_Loop+0x104>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <Blink_Loop+0x110>)
 8001112:	fba2 1203 	umull	r1, r2, r2, r3
 8001116:	0952      	lsrs	r2, r2, #5
 8001118:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800111c:	fb01 f202 	mul.w	r2, r1, r2
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	b29b      	uxth	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <Blink_Loop+0xc4>
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <Blink_Loop+0x10c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	f083 0308 	eor.w	r3, r3, #8
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <Blink_Loop+0x10c>)
 8001136:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <Blink_Loop+0x104>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <Blink_Loop+0x110>)
 800113e:	fba2 1203 	umull	r1, r2, r2, r3
 8001142:	0992      	lsrs	r2, r2, #6
 8001144:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001148:	fb01 f202 	mul.w	r2, r1, r2
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	b29b      	uxth	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10a      	bne.n	800116a <Blink_Loop+0xf6>
	{
		blinkReg ^= (1 << INTERVAL_1000_mS);
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <Blink_Loop+0x10c>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	f083 0310 	eor.w	r3, r3, #16
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <Blink_Loop+0x10c>)
 8001162:	801a      	strh	r2, [r3, #0]
		blinkCount = 0;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <Blink_Loop+0x104>)
 8001166:	2200      	movs	r2, #0
 8001168:	801a      	strh	r2, [r3, #0]
	}
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000110 	.word	0x20000110
 8001178:	20000114 	.word	0x20000114
 800117c:	51eb851f 	.word	0x51eb851f
 8001180:	2000010c 	.word	0x2000010c
 8001184:	10624dd3 	.word	0x10624dd3

08001188 <_config_SaveToFlash>:
//********************************************************************************************
//********************************************************************************************
//********************************************************************************************
//********************************************************************************************
//пишем данные в FLASH память.
void _config_SaveToFlash(uint32_t pageAddr, uint32_t size){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]

	uint32_t index = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
	//--------------------
	STM32_Flash_Unlock();
 8001196:	f001 fdd3 	bl	8002d40 <STM32_Flash_Unlock>
	STM32_Flash_ErasePage(CONFIG_FLASH_PAGE);
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <_config_SaveToFlash+0x4c>)
 800119c:	f001 fde2 	bl	8002d64 <STM32_Flash_ErasePage>
	while(index < size)
 80011a0:	e00d      	b.n	80011be <_config_SaveToFlash+0x36>
	{
		STM32_Flash_WriteWord(dataForFLASH.data32[index], pageAddr);
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <_config_SaveToFlash+0x50>)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fe13 	bl	8002dd8 <STM32_Flash_WriteWord>
		index    += 1;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
		pageAddr += 4;//шагаем по 4 байта
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3304      	adds	r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
	while(index < size)
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3ed      	bcc.n	80011a2 <_config_SaveToFlash+0x1a>
	}
	STM32_Flash_Lock();
 80011c6:	f001 fdad 	bl	8002d24 <STM32_Flash_Lock>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0801fc00 	.word	0x0801fc00
 80011d8:	20000118 	.word	0x20000118

080011dc <Config_SaveLoop>:
		_config_SaveToFlash(CONFIG_FLASH_PAGE, CONFIG_SIZE_U32);
	}
}
//**********************************************************
//Запись конфигурации после ее изменения.
void Config_SaveLoop(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	
	//если были редактирования конфигурации, то запишем конфигурацию во FLASH.
	if(changeConfig != 0)
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <Config_SaveLoop+0x2c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <Config_SaveLoop+0x28>
	{
		changeConfig = 0;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <Config_SaveLoop+0x2c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
		dataForFLASH.sector.numWrite += 1;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <Config_SaveLoop+0x30>)
 80011f0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <Config_SaveLoop+0x30>)
 80011f8:	f8c2 3026 	str.w	r3, [r2, #38]	; 0x26
		//пишем данные в память.
		//__disable_irq();
		_config_SaveToFlash(CONFIG_FLASH_PAGE, CONFIG_SIZE_U32);
 80011fc:	210d      	movs	r1, #13
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <Config_SaveLoop+0x34>)
 8001200:	f7ff ffc2 	bl	8001188 <_config_SaveToFlash>
		//__enable_irq();
	}
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000148 	.word	0x20000148
 800120c:	20000118 	.word	0x20000118
 8001210:	0801fc00 	.word	0x0801fc00

08001214 <CRC8_FastCalculate>:
    0x78, 0x49, 0x1A, 0x2B, 0xBC, 0x8D, 0xDE, 0xEF,
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};
//**********************************************************
uint8_t CRC8_FastCalculate(uint8_t *pBlock, uint32_t len){
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]

    uint8_t crc = 0xFF;
 800121e:	23ff      	movs	r3, #255	; 0xff
 8001220:	73fb      	strb	r3, [r7, #15]
    //-------------------------
    while(len--)
 8001222:	e00a      	b.n	800123a <CRC8_FastCalculate+0x26>
    {
    	crc = Crc8Table[crc ^ *pBlock++];
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	4053      	eors	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <CRC8_FastCalculate+0x3c>)
 8001236:	5c9b      	ldrb	r3, [r3, r2]
 8001238:	73fb      	strb	r3, [r7, #15]
    while(len--)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	603a      	str	r2, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ef      	bne.n	8001224 <CRC8_FastCalculate+0x10>
    }
    return crc;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	08005510 	.word	0x08005510

08001254 <CRC_Calculate>:
//*******************************************************************************************
//*******************************************************************************************
uint8_t CRC_Calculate(uint8_t *pBlock, uint32_t len){
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]

	return CRC8_FastCalculate(pBlock, len);
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffd7 	bl	8001214 <CRC8_FastCalculate>
 8001266:	4603      	mov	r3, r0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <TemperatureSens_Sign>:
	DS18B20_ReadTemperature(sensor);

	TemperatureSens_StartConvertTemperature(sensor);
}
//**********************************************************
uint32_t TemperatureSens_Sign(DS18B20_t *sensor){
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	return sensor->TEMPERATURE_SIGN;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
	...

08001288 <_ds2782_ReadData>:

//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
static uint16_t _ds2782_ReadData(DS2782_Registers_t addrReg, uint8_t len){
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]

	uint8_t rxBuf[2] = {0};
 8001298:	2300      	movs	r3, #0
 800129a:	81bb      	strh	r3, [r7, #12]
	//-------------------
	if(I2C_Master_Read(DS2782_I2C, DS2782_ADDR, (uint8_t)addrReg, rxBuf, len) != I2C_OK)
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	f107 010c 	add.w	r1, r7, #12
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	460b      	mov	r3, r1
 80012a8:	2168      	movs	r1, #104	; 0x68
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <_ds2782_ReadData+0x54>)
 80012ac:	f002 f955 	bl	800355a <I2C_Master_Read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <_ds2782_ReadData+0x3a>
	{
		DS2782_Init(DS2782_I2C, I2C_GPIO_NOREMAP);
 80012b6:	2100      	movs	r1, #0
 80012b8:	4808      	ldr	r0, [pc, #32]	; (80012dc <_ds2782_ReadData+0x54>)
 80012ba:	f000 f827 	bl	800130c <DS2782_Init>
		return 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	e007      	b.n	80012d2 <_ds2782_ReadData+0x4a>
	}
	return((rxBuf[0]<<8) | rxBuf[1]);
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	7b7b      	ldrb	r3, [r7, #13]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29b      	uxth	r3, r3

//	return 0;
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40005400 	.word	0x40005400

080012e0 <_ds2782_WriteData>:
//************************************************************
static void _ds2782_WriteData(uint8_t regAddr, uint8_t *pBuf, uint8_t len){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]

	I2C_Master_Write(DS2782_I2C, DS2782_ADDR, regAddr, pBuf, len);
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2168      	movs	r1, #104	; 0x68
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <_ds2782_WriteData+0x28>)
 80012fc:	f002 f904 	bl	8003508 <I2C_Master_Write>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40005400 	.word	0x40005400

0800130c <DS2782_Init>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void DS2782_Init(I2C_TypeDef *i2c, uint32_t i2cRemap){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]

	//I2C_Init(i2c, i2cRemap);
	//I2C_Master_Init(i2c, i2cRemap);

	uint8_t txBuf[2] = {0};
 8001316:	2300      	movs	r3, #0
 8001318:	81bb      	strh	r3, [r7, #12]
	//-------------------
	_ds2782_WriteData(Register_ACR, txBuf, 2);
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2202      	movs	r2, #2
 8001320:	4619      	mov	r1, r3
 8001322:	2010      	movs	r0, #16
 8001324:	f7ff ffdc 	bl	80012e0 <_ds2782_WriteData>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <DS2782_GetTemperature>:
//			 (rxBuf[2] << 16) |
//			 (rxBuf[1] << 8)  |
//			  rxBuf[0];
}
//************************************************************
void DS2782_GetTemperature(DS2782_t *ds){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	uint16_t Temp   = _ds2782_ReadData(Register_TEMP, 2)>>5;//младшие 5 бит незначащие.
 8001338:	2102      	movs	r1, #2
 800133a:	200a      	movs	r0, #10
 800133c:	f7ff ffa4 	bl	8001288 <_ds2782_ReadData>
 8001340:	4603      	mov	r3, r0
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	81fb      	strh	r3, [r7, #14]
	uint32_t tTemp  = Temp * 125;
 8001346:	89fa      	ldrh	r2, [r7, #14]
 8001348:	4613      	mov	r3, r2
 800134a:	015b      	lsls	r3, r3, #5
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
	ds->Temperature = (tTemp + 50) / 100;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3332      	adds	r3, #50	; 0x32
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <DS2782_GetTemperature+0x3c>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	095a      	lsrs	r2, r3, #5
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	51eb851f 	.word	0x51eb851f

08001370 <DS2782_GetVoltage>:
//************************************************************
void DS2782_GetVoltage(DS2782_t *ds){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

	//получение напряжения на АКБ.
	uint32_t adcTemp = _ds2782_ReadData(Register_VOLT, 2)>>5;//младшие 5 бит незначащие.
 8001378:	2102      	movs	r1, #2
 800137a:	200c      	movs	r0, #12
 800137c:	f7ff ff84 	bl	8001288 <_ds2782_ReadData>
 8001380:	4603      	mov	r3, r0
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	b29b      	uxth	r3, r3
 8001386:	60fb      	str	r3, [r7, #12]
	//-------------------
	//adcTemp  &= 0b0000001111111111;//Уберем знак
	adcTemp  *= 488;               //это 4,88mV * 100. Это нужно чтобы избавится от запятой => получили микровольты
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	60fb      	str	r3, [r7, #12]
	adcTemp  *= 5475; 			   //это коэф-т деления резистивного делителя, умноженный на 1000.
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f241 5263 	movw	r2, #5475	; 0x1563
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	60fb      	str	r3, [r7, #12]
	ds->Voltage = ((adcTemp + 500000) / 1000000);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 80013a6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <DS2782_GetVoltage+0x50>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9a      	lsrs	r2, r3, #18
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60da      	str	r2, [r3, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	431bde83 	.word	0x431bde83

080013c4 <msDelay_Loop>:

//*******************************************************************************************
static volatile uint32_t msCounter = 0;
//*******************************************************************************************
//*******************************************************************************************
void msDelay_Loop(void){
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

	msCounter++;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <msDelay_Loop+0x18>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a03      	ldr	r2, [pc, #12]	; (80013dc <msDelay_Loop+0x18>)
 80013d0:	6013      	str	r3, [r2, #0]
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000014c 	.word	0x2000014c

080013e0 <DELAY_Init>:
	msCounter = 0;
	while(msCounter < del){__NOP();};
}
//*******************************************************************************************
//*******************************************************************************************
void DELAY_Init(void){
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <DELAY_Init+0x2c>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <DELAY_Init+0x2c>)
 80013ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ee:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT       = 0;						    // сброс счетчика
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <DELAY_Init+0x30>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
	DWT->CTRL        |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <DELAY_Init+0x30>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <DELAY_Init+0x30>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000edf0 	.word	0xe000edf0
 8001410:	e0001000 	.word	0xe0001000

08001414 <DELAY_microS>:
	volatile uint32_t temp = DWT->CYCCNT;
	return (temp / TACTS_FOR_MICROSEC);
}
//**********************************************************
//макс. задержка 58 сек. Через 59 сек. происходит переполнение DWT->CTRL.
void DELAY_microS(uint32_t microSec){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	if(microSec > MAX_DELAY_uS) return;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <DELAY_microS+0x3c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d80f      	bhi.n	8001444 <DELAY_microS+0x30>
    uint32_t uS_count_tic = microSec * TACTS_FOR_MICROSEC;// получаем кол-во тактов за 1 мкс и умножаем на наше значение
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <DELAY_microS+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < uS_count_tic);
 8001436:	bf00      	nop
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <DELAY_microS+0x40>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	d8fa      	bhi.n	8001438 <DELAY_microS+0x24>
 8001442:	e000      	b.n	8001446 <DELAY_microS+0x32>
	if(microSec > MAX_DELAY_uS) return;
 8001444:	bf00      	nop

    //Вариант 2. Опасен переполнением счетчика DWT->CTRL.
//    uint32_t old = DELAY_microSecCount();
//    while((DELAY_microSecCount() - old) < microSec);
}
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	03750280 	.word	0x03750280
 8001454:	e0001000 	.word	0xe0001000

08001458 <DELAY_milliS>:
//**********************************************************
void DELAY_milliS(uint32_t milliSec){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

	DELAY_microS(milliSec * 1000);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffd2 	bl	8001414 <DELAY_microS>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_encoder_GpioInit>:

#include "Encoder.h"

//*******************************************************************************************
//*******************************************************************************************
static void _encoder_GpioInit(GPIO_TypeDef *gpio, uint32_t pin){
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	
	uint32_t pinTemp = 1 << pin;
 8001482:	2201      	movs	r2, #1
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	60fb      	str	r3, [r7, #12]
	//Включение тактирования портов.
		 if(gpio == GPIOA) RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <_encoder_GpioInit+0x100>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d106      	bne.n	80014a2 <_encoder_GpioInit+0x2a>
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <_encoder_GpioInit+0x104>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a38      	ldr	r2, [pc, #224]	; (800157c <_encoder_GpioInit+0x104>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	e014      	b.n	80014cc <_encoder_GpioInit+0x54>
	else if(gpio == GPIOB) RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a36      	ldr	r2, [pc, #216]	; (8001580 <_encoder_GpioInit+0x108>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d106      	bne.n	80014b8 <_encoder_GpioInit+0x40>
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <_encoder_GpioInit+0x104>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <_encoder_GpioInit+0x104>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	e009      	b.n	80014cc <_encoder_GpioInit+0x54>
	else if(gpio == GPIOC) RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a32      	ldr	r2, [pc, #200]	; (8001584 <_encoder_GpioInit+0x10c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d155      	bne.n	800156c <_encoder_GpioInit+0xf4>
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <_encoder_GpioInit+0x104>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a2d      	ldr	r2, [pc, #180]	; (800157c <_encoder_GpioInit+0x104>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6193      	str	r3, [r2, #24]
	else return;
	//Конфигурация выводов: Input with pull-up.
	if(pin <= 7)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d822      	bhi.n	8001518 <_encoder_GpioInit+0xa0>
	{
		pin = pin * 4;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	603b      	str	r3, [r7, #0]
		gpio->CRL &= ~(0x03 << pin);//GPIO_CRL_MODEx - 00:Input mode (reset state)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2103      	movs	r1, #3
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	fa01 f202 	lsl.w	r2, r1, r2
 80014e4:	43d2      	mvns	r2, r2
 80014e6:	401a      	ands	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	601a      	str	r2, [r3, #0]
		//CNFy[1:0]: 10 - Input with pull-up / pull-down.
		gpio->CRL &= ~(0x03 << (pin + 2));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	3202      	adds	r2, #2
 80014f4:	2103      	movs	r1, #3
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	43d2      	mvns	r2, r2
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
		gpio->CRL |=  (0x02 << (pin + 2));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	3202      	adds	r2, #2
 800150a:	2102      	movs	r1, #2
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e022      	b.n	800155e <_encoder_GpioInit+0xe6>
	}
	else
	{
		pin = (pin - 8) * 4;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3b08      	subs	r3, #8
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	603b      	str	r3, [r7, #0]
		gpio->CRH &= ~(0x03 << pin);//GPIO_CRL_MODEx - 00:Input mode (reset state)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2103      	movs	r1, #3
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	43d2      	mvns	r2, r2
 800152e:	401a      	ands	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]
		//CNFy[1:0]: 10 - Input with pull-up / pull-down.
		gpio->CRH &= ~(0x03 << (pin + 2));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	3202      	adds	r2, #2
 800153c:	2103      	movs	r1, #3
 800153e:	fa01 f202 	lsl.w	r2, r1, r2
 8001542:	43d2      	mvns	r2, r2
 8001544:	401a      	ands	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	605a      	str	r2, [r3, #4]
		gpio->CRH |=  (0x02 << (pin + 2));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	3202      	adds	r2, #2
 8001552:	2102      	movs	r1, #2
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	605a      	str	r2, [r3, #4]
	}
	gpio->ODR |= pinTemp; //pull-up.
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	e000      	b.n	800156e <_encoder_GpioInit+0xf6>
	else return;
 800156c:	bf00      	nop
}
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40010800 	.word	0x40010800
 800157c:	40021000 	.word	0x40021000
 8001580:	40010c00 	.word	0x40010c00
 8001584:	40011000 	.word	0x40011000

08001588 <ENCODER_Init>:
/**
 * @brief: Фу-я инициализации выводов STM32 для работы энкодера.
 * @In_param:
 * @Out_param:
 */
void ENCODER_Init(Encoder_t *encoder){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

	//Конфигурация выводов: Input with pull-up.
	_encoder_GpioInit(encoder->GpioPort_A,      encoder->GpioPin_A);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f7ff ff6c 	bl	8001478 <_encoder_GpioInit>
	_encoder_GpioInit(encoder->GpioPort_B,      encoder->GpioPin_B);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4610      	mov	r0, r2
 80015ac:	f7ff ff64 	bl	8001478 <_encoder_GpioInit>
	_encoder_GpioInit(encoder->GpioPort_BUTTON, encoder->GpioPin_BUTTON);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f7ff ff5c 	bl	8001478 <_encoder_GpioInit>
	encoder->encoderState = ENCODER_NO_TURN;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	771a      	strb	r2, [r3, #28]
	encoder->buttonState  = RELEASED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	775a      	strb	r2, [r3, #29]
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <ENCODER_ScanLoop>:
/**
 * @brief: Фу-я опроса состояния энкодера Вариант 2. Вызывается каждую 1мСек.
 * @In_param:
 * @Out_param:
 */
void ENCODER_ScanLoop(Encoder_t *encoder){
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

	uint32_t pinA         = (1 << encoder->GpioPin_A);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	613b      	str	r3, [r7, #16]
	uint32_t pinB         = (1 << encoder->GpioPin_B);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	60fb      	str	r3, [r7, #12]
	uint32_t pinButton    = (1 << encoder->GpioPin_BUTTON);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2201      	movs	r2, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	60bb      	str	r3, [r7, #8]
	uint8_t  currentState =  0;
 8001600:	2300      	movs	r3, #0
 8001602:	75fb      	strb	r3, [r7, #23]
	//--------------------
	//Определение состояния энкодера.
	static uint8_t oldStateEncoder = 0; //хранит последовательность состояний энкодера

	//проверяем состояние выводов микроконтроллера
	if(encoder->GpioPort_A->IDR & pinA) currentState |= 1<<0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <ENCODER_ScanLoop+0x46>
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
	if(encoder->GpioPort_B->IDR & pinB) currentState |= 1<<1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <ENCODER_ScanLoop+0x5c>
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	75fb      	strb	r3, [r7, #23]

	//если равно предыдущему, то выходим
	if(currentState != (oldStateEncoder & 0b00000011))
 8001630:	7dfa      	ldrb	r2, [r7, #23]
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <ENCODER_ScanLoop+0xf4>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	429a      	cmp	r2, r3
 800163c:	d018      	beq.n	8001670 <ENCODER_ScanLoop+0x9c>
	{
		//если не равно, то сдвигаем и сохраняем
		oldStateEncoder = (oldStateEncoder << 2) | currentState;
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <ENCODER_ScanLoop+0xf4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	b25a      	sxtb	r2, r3
 8001646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164a:	4313      	orrs	r3, r2
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <ENCODER_ScanLoop+0xf4>)
 8001652:	701a      	strb	r2, [r3, #0]
		//сравниваем получившуюся последовательность
		if(oldStateEncoder == 0b11100001) encoder->encoderState = ENCODER_TURN_RIGHT;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <ENCODER_ScanLoop+0xf4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2be1      	cmp	r3, #225	; 0xe1
 800165a:	d102      	bne.n	8001662 <ENCODER_ScanLoop+0x8e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	771a      	strb	r2, [r3, #28]
		if(oldStateEncoder == 0b11010010) encoder->encoderState = ENCODER_TURN_LEFT;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <ENCODER_ScanLoop+0xf4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2bd2      	cmp	r3, #210	; 0xd2
 8001668:	d102      	bne.n	8001670 <ENCODER_ScanLoop+0x9c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2203      	movs	r2, #3
 800166e:	771a      	strb	r2, [r3, #28]
	}
	//--------------------
	//Опрос кнопки энкодера.
	static uint8_t oldStateButton = 0; //хранит последовательность состояний кнопки.
	currentState = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	75fb      	strb	r3, [r7, #23]

	//проверяем состояние выводов микроконтроллера
	if(encoder->GpioPort_BUTTON->IDR & pinButton) currentState |= 1<<0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <ENCODER_ScanLoop+0xb6>
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]

	//если равно предыдущему, то выходим
	//if(currentState == (oldStateButton & 0b00000001)) return;

	//если не равно, то сдвигаем и сохраняем
	oldStateButton = (oldStateButton << 1) | currentState;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <ENCODER_ScanLoop+0xf8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	b25a      	sxtb	r2, r3
 8001692:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001696:	4313      	orrs	r3, r2
 8001698:	b25b      	sxtb	r3, r3
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <ENCODER_ScanLoop+0xf8>)
 800169e:	701a      	strb	r2, [r3, #0]

	//сравниваем получившуюся последовательность
	if(oldStateButton == 0b00000000) encoder->buttonState = PRESSED;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <ENCODER_ScanLoop+0xf8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <ENCODER_ScanLoop+0xda>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	775a      	strb	r2, [r3, #29]
	if(oldStateButton == 0b11111111) encoder->buttonState = RELEASED;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <ENCODER_ScanLoop+0xf8>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2bff      	cmp	r3, #255	; 0xff
 80016b4:	d102      	bne.n	80016bc <ENCODER_ScanLoop+0xe8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	775a      	strb	r2, [r3, #29]
	//--------------------
}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000150 	.word	0x20000150
 80016cc:	20000151 	.word	0x20000151

080016d0 <ENCODER_IncDecParam>:
 * 			  step - шаг изменения значения переменной;
 *            min  - минимальное значение до которого будет уменьшаться значение переменной;
 *            max  - максимальное значение до которого будет увеличиваться значение переменной.
 * @Out_param:
 */
void ENCODER_IncDecParam(Encoder_t *encoder, uint32_t *parameter, uint32_t step, uint32_t min, uint32_t max){
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]

	//--------------------
	switch(encoder->encoderState){
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	7f1b      	ldrb	r3, [r3, #28]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d002      	beq.n	80016ec <ENCODER_IncDecParam+0x1c>
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d013      	beq.n	8001712 <ENCODER_IncDecParam+0x42>
			else                   (*parameter) = max; //Закольцовывание редактирования параметра.
			encoder->encoderState = ENCODER_NO_TURN;
		break;
		//-----------
		default:
		break;
 80016ea:	e025      	b.n	8001738 <ENCODER_IncDecParam+0x68>
			if ((*parameter) < max)(*parameter)+= step;//Проверка на  максимум.
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d906      	bls.n	8001704 <ENCODER_IncDecParam+0x34>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	441a      	add	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e002      	b.n	800170a <ENCODER_IncDecParam+0x3a>
			else                   (*parameter) = min; //Закольцовывание редактирования параметра.
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	601a      	str	r2, [r3, #0]
			encoder->encoderState = ENCODER_NO_TURN;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	771a      	strb	r2, [r3, #28]
		break;
 8001710:	e012      	b.n	8001738 <ENCODER_IncDecParam+0x68>
			if ((*parameter) > min)(*parameter)-= step;//Проверка на минимум.
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d206      	bcs.n	800172a <ENCODER_IncDecParam+0x5a>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	1ad2      	subs	r2, r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e002      	b.n	8001730 <ENCODER_IncDecParam+0x60>
			else                   (*parameter) = max; //Закольцовывание редактирования параметра.
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]
			encoder->encoderState = ENCODER_NO_TURN;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	771a      	strb	r2, [r3, #28]
		break;
 8001736:	bf00      	nop
		//-----------
	}
	//--------------------
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <ENCODER_GetButton>:
//**********************************************************
EncoderButtonState_t ENCODER_GetButton(Encoder_t *encoder){
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]

	return encoder->buttonState;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7f5b      	ldrb	r3, [r3, #29]
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <TIME_Calculation>:
//*******************************************************************************************


//*******************************************************************************************
//*******************************************************************************************
void TIME_Calculation(Time_t *time, uint32_t mScount){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]

	time->mSec = mScount;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	60da      	str	r2, [r3, #12]
	mScount   /= 1000;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <TIME_Calculation+0x8c>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	603b      	str	r3, [r7, #0]
	time->hour = (uint8_t)((mScount / 3600) % 24);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <TIME_Calculation+0x90>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0ad9      	lsrs	r1, r3, #11
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <TIME_Calculation+0x94>)
 8001780:	fba3 2301 	umull	r2, r3, r3, r1
 8001784:	091a      	lsrs	r2, r3, #4
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	1aca      	subs	r2, r1, r3
 8001790:	b2d3      	uxtb	r3, r2
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	601a      	str	r2, [r3, #0]
	time->min  = (uint8_t)((mScount / 60) % 60);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <TIME_Calculation+0x98>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0959      	lsrs	r1, r3, #5
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <TIME_Calculation+0x98>)
 80017a4:	fba3 2301 	umull	r2, r3, r3, r1
 80017a8:	095a      	lsrs	r2, r3, #5
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	1aca      	subs	r2, r1, r3
 80017b4:	b2d3      	uxtb	r3, r2
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]
	time->sec  = (uint8_t)( mScount % 60);
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <TIME_Calculation+0x98>)
 80017c0:	fba3 2301 	umull	r2, r3, r3, r1
 80017c4:	095a      	lsrs	r2, r3, #5
 80017c6:	4613      	mov	r3, r2
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	1aca      	subs	r2, r1, r3
 80017d0:	b2d3      	uxtb	r3, r2
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	10624dd3 	.word	0x10624dd3
 80017e8:	91a2b3c5 	.word	0x91a2b3c5
 80017ec:	aaaaaaab 	.word	0xaaaaaaab
 80017f0:	88888889 	.word	0x88888889

080017f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <SystemInit+0x5c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <SystemInit+0x5c>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <SystemInit+0x5c>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4911      	ldr	r1, [pc, #68]	; (8001850 <SystemInit+0x5c>)
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <SystemInit+0x60>)
 800180c:	4013      	ands	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <SystemInit+0x5c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <SystemInit+0x5c>)
 8001816:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800181a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <SystemInit+0x5c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <SystemInit+0x5c>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <SystemInit+0x5c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <SystemInit+0x5c>)
 8001832:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001836:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SystemInit+0x5c>)
 800183a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800183e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <SystemInit+0x64>)
 8001842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001846:	609a      	str	r2, [r3, #8]
#endif 
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000
 8001854:	f8ff0000 	.word	0xf8ff0000
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <Lm6063LcdPause>:

#include "LM6063D.h"
  
//extern SPI_HandleTypeDef hspi2;
//-----------------------------------------------------------------------------
static void Lm6063LcdPause(uint16_t pause){
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]

  while(pause != 0) {--pause;}
 8001866:	e002      	b.n	800186e <Lm6063LcdPause+0x12>
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	3b01      	subs	r3, #1
 800186c:	80fb      	strh	r3, [r7, #6]
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f9      	bne.n	8001868 <Lm6063LcdPause+0xc>
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <Lm6063LcdGpioInit>:
//-----------------------------------------------------------------------------
static void Lm6063LcdGpioInit(void){
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  
	//Включаем тактирование порта
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN);
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <Lm6063LcdGpioInit+0x48>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <Lm6063LcdGpioInit+0x48>)
 800188a:	f043 030c 	orr.w	r3, r3, #12
 800188e:	6193      	str	r3, [r2, #24]
	//--------------------
	// A1   - PB10.
	// /RES - PB12.
	// /CS  - PB11.
	//выход, режим - push-pull.
	GPIOB->CRH &= ~(GPIO_CRH_CNF10 |
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <Lm6063LcdGpioInit+0x4c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <Lm6063LcdGpioInit+0x4c>)
 8001896:	f423 234c 	bic.w	r3, r3, #835584	; 0xcc000
 800189a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800189e:	6053      	str	r3, [r2, #4]
					GPIO_CRH_CNF11 |
					GPIO_CRH_CNF12 );
	//тактирование 50МГц.
	GPIOB->CRH |= (GPIO_CRH_MODE10 |
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <Lm6063LcdGpioInit+0x4c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a09      	ldr	r2, [pc, #36]	; (80018cc <Lm6063LcdGpioInit+0x4c>)
 80018a6:	f443 334c 	orr.w	r3, r3, #208896	; 0x33000
 80018aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018ae:	6053      	str	r3, [r2, #4]
                   GPIO_CRH_MODE11 |
                   GPIO_CRH_MODE12 );

	Lm6063LcdResHight();
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <Lm6063LcdGpioInit+0x4c>)
 80018b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b6:	611a      	str	r2, [r3, #16]
	Lm6063LcdCsHight();
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <Lm6063LcdGpioInit+0x4c>)
 80018ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018be:	611a      	str	r2, [r3, #16]
}	
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010c00 	.word	0x40010c00

080018d0 <Lm6063LcdSendByte>:
//-----------------------------------------------------------------------------
//Передача байта в дисплей.
static void Lm6063LcdSendByte(uint8_t byte, uint8_t cmd){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	460a      	mov	r2, r1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	4613      	mov	r3, r2
 80018de:	71bb      	strb	r3, [r7, #6]
  
  Lm6063LcdCsLow();          //Enable display controller (active low)
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <Lm6063LcdSendByte+0x4c>)
 80018e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e6:	611a      	str	r2, [r3, #16]
  if(cmd) Lm6063LcdA1Hight();//данные.
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <Lm6063LcdSendByte+0x28>
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <Lm6063LcdSendByte+0x4c>)
 80018f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	e003      	b.n	8001900 <Lm6063LcdSendByte+0x30>
  else    Lm6063LcdA1Low();  //команда.
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <Lm6063LcdSendByte+0x4c>)
 80018fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018fe:	611a      	str	r2, [r3, #16]
	
  SPI_TxRxByte(LM6063_SPI, byte);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4619      	mov	r1, r3
 8001904:	4806      	ldr	r0, [pc, #24]	; (8001920 <Lm6063LcdSendByte+0x50>)
 8001906:	f002 f977 	bl	8003bf8 <SPI_TxRxByte>
  //Spi2TxRxByte(byte);      //
  //HAL_SPI_Transmit(&hspi2, &byte, 1, 10);
  
  Lm6063LcdCsHight();        //Disable display controller
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <Lm6063LcdSendByte+0x4c>)
 800190c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40010c00 	.word	0x40010c00
 8001920:	40003800 	.word	0x40003800

08001924 <Lm6063LcdInit>:
//-----------------------------------------------------------------------------
//инициализация SPI и дисплея
void Lm6063LcdInit(void){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  
	SPI_Init(LM6063_SPI);
 8001928:	4826      	ldr	r0, [pc, #152]	; (80019c4 <Lm6063LcdInit+0xa0>)
 800192a:	f002 f8dd 	bl	8003ae8 <SPI_Init>
	Lm6063LcdGpioInit();
 800192e:	f7ff ffa7 	bl	8001880 <Lm6063LcdGpioInit>
	
	//дернули ресет
	//  Lm6063LcdResHight;
	//	Lm6063LcdPause(10);

	Lm6063LcdResLow();
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <Lm6063LcdInit+0xa4>)
 8001934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001938:	611a      	str	r2, [r3, #16]
	Lm6063LcdPause(50);
 800193a:	2032      	movs	r0, #50	; 0x32
 800193c:	f7ff ff8e 	bl	800185c <Lm6063LcdPause>

	Lm6063LcdResHight();
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <Lm6063LcdInit+0xa4>)
 8001942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001946:	611a      	str	r2, [r3, #16]
	Lm6063LcdPause(50);
 8001948:	2032      	movs	r0, #50	; 0x32
 800194a:	f7ff ff87 	bl	800185c <Lm6063LcdPause>
	
	Lm6063LcdSendByte(0xaf, LM6063_CMD);	//Display OFF
 800194e:	2100      	movs	r1, #0
 8001950:	20af      	movs	r0, #175	; 0xaf
 8001952:	f7ff ffbd 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0x40, LM6063_CMD);
 8001956:	2100      	movs	r1, #0
 8001958:	2040      	movs	r0, #64	; 0x40
 800195a:	f7ff ffb9 	bl	80018d0 <Lm6063LcdSendByte>
	//--------------------
	//ADC select
	//Sets the display RAM address SEG output correspondence
	Lm6063LcdSendByte(0xa0, LM6063_CMD);//normal
 800195e:	2100      	movs	r1, #0
 8001960:	20a0      	movs	r0, #160	; 0xa0
 8001962:	f7ff ffb5 	bl	80018d0 <Lm6063LcdSendByte>
	//Lm6063LcdSendByte(0xa1, LM6063_CMD);//reverse 
	//--------------------
	//
	Lm6063LcdSendByte(0xa6, LM6063_CMD);
 8001966:	2100      	movs	r1, #0
 8001968:	20a6      	movs	r0, #166	; 0xa6
 800196a:	f7ff ffb1 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0xa4, LM6063_CMD);
 800196e:	2100      	movs	r1, #0
 8001970:	20a4      	movs	r0, #164	; 0xa4
 8001972:	f7ff ffad 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0xa2, LM6063_CMD);
 8001976:	2100      	movs	r1, #0
 8001978:	20a2      	movs	r0, #162	; 0xa2
 800197a:	f7ff ffa9 	bl	80018d0 <Lm6063LcdSendByte>
	
	//--------------------
	//Common Output Mode Select
	//Lm6063LcdSendByte(0xc0, LM6063_CMD);//Normal
	Lm6063LcdSendByte(0xc8, LM6063_CMD);//Reverse
 800197e:	2100      	movs	r1, #0
 8001980:	20c8      	movs	r0, #200	; 0xc8
 8001982:	f7ff ffa5 	bl	80018d0 <Lm6063LcdSendByte>
	//--------------------

	Lm6063LcdSendByte(0x2f, LM6063_CMD);
 8001986:	2100      	movs	r1, #0
 8001988:	202f      	movs	r0, #47	; 0x2f
 800198a:	f7ff ffa1 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0x25, LM6063_CMD);
 800198e:	2100      	movs	r1, #0
 8001990:	2025      	movs	r0, #37	; 0x25
 8001992:	f7ff ff9d 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0xf8, LM6063_CMD);
 8001996:	2100      	movs	r1, #0
 8001998:	20f8      	movs	r0, #248	; 0xf8
 800199a:	f7ff ff99 	bl	80018d0 <Lm6063LcdSendByte>
	
	Lm6063LcdSendByte(0x00, LM6063_CMD);
 800199e:	2100      	movs	r1, #0
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff ff95 	bl	80018d0 <Lm6063LcdSendByte>
	//Lm6063LcdSendByte(0x01, LM6063_CMD);
	//--------------------
	//Контрастность - Electronic volume mode set
	Lm6063LcdSendByte(0x81, LM6063_CMD);//Команда
 80019a6:	2100      	movs	r1, #0
 80019a8:	2081      	movs	r0, #129	; 0x81
 80019aa:	f7ff ff91 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0x22, LM6063_CMD);//Значение
 80019ae:	2100      	movs	r1, #0
 80019b0:	2022      	movs	r0, #34	; 0x22
 80019b2:	f7ff ff8d 	bl	80018d0 <Lm6063LcdSendByte>
	
	//--------------------	
	Lm6063LcdSendByte(0xaf, LM6063_CMD);
 80019b6:	2100      	movs	r1, #0
 80019b8:	20af      	movs	r0, #175	; 0xaf
 80019ba:	f7ff ff89 	bl	80018d0 <Lm6063LcdSendByte>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40003800 	.word	0x40003800
 80019c8:	40010c00 	.word	0x40010c00

080019cc <Lm6063LcdUpdate>:
//-----------------------------------------------------------------------------
//Copies the LCD cache into the device RAM
void Lm6063LcdUpdate(uint8_t *displayBuf){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	//Передача данных для дисплея за раз передется 128 байта(~1.5мС)
	static uint32_t count    = 0;
	static uint32_t bufIndex = 0;
	uint32_t j;
	//--------------------
	if(count == 0) Lm6063LcdSendByte(0x40, LM6063_CMD);	//Set Display Start Line = com0
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <Lm6063LcdUpdate+0x90>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <Lm6063LcdUpdate+0x18>
 80019dc:	2100      	movs	r1, #0
 80019de:	2040      	movs	r0, #64	; 0x40
 80019e0:	f7ff ff76 	bl	80018d0 <Lm6063LcdSendByte>

	Lm6063LcdSendByte(0xB0|count, LM6063_CMD); //Set Page Address as ComTable
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <Lm6063LcdUpdate+0x90>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff6c 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0x10,   	  LM6063_CMD); //Set Column Address = 0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2010      	movs	r0, #16
 80019fc:	f7ff ff68 	bl	80018d0 <Lm6063LcdSendByte>
	Lm6063LcdSendByte(0x04,   	  LM6063_CMD); //Colum from 4 -> 132 auto add
 8001a00:	2100      	movs	r1, #0
 8001a02:	2004      	movs	r0, #4
 8001a04:	f7ff ff64 	bl	80018d0 <Lm6063LcdSendByte>
	for(j = 0; j < 128; j++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e010      	b.n	8001a30 <Lm6063LcdUpdate+0x64>
	{
	  Lm6063LcdSendByte(*(displayBuf+bufIndex), LM6063_DATA);
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <Lm6063LcdUpdate+0x94>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff58 	bl	80018d0 <Lm6063LcdSendByte>
	  bufIndex++;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <Lm6063LcdUpdate+0x94>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <Lm6063LcdUpdate+0x94>)
 8001a28:	6013      	str	r3, [r2, #0]
	for(j = 0; j < 128; j++)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b7f      	cmp	r3, #127	; 0x7f
 8001a34:	d9eb      	bls.n	8001a0e <Lm6063LcdUpdate+0x42>
	}

	if(++count >= 8)
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <Lm6063LcdUpdate+0x90>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <Lm6063LcdUpdate+0x90>)
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <Lm6063LcdUpdate+0x90>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b07      	cmp	r3, #7
 8001a46:	d905      	bls.n	8001a54 <Lm6063LcdUpdate+0x88>
	{
		count    = 0;
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <Lm6063LcdUpdate+0x90>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
		bufIndex = 0;
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <Lm6063LcdUpdate+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
	}
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000154 	.word	0x20000154
 8001a60:	20000158 	.word	0x20000158

08001a64 <ClearTextBuf>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//Очистка текстового буфера.
static void ClearTextBuf(void){
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<LCD_TEXT_BUFFER_SIZE; i++) lcdTextBuf[i] = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	e006      	b.n	8001a7e <ClearTextBuf+0x1a>
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <ClearTextBuf+0x2c>)
 8001a74:	2100      	movs	r1, #0
 8001a76:	54d1      	strb	r1, [r2, r3]
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b15      	cmp	r3, #21
 8001a82:	d9f5      	bls.n	8001a70 <ClearTextBuf+0xc>
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	2000015c 	.word	0x2000015c

08001a94 <Lcd_Init>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void Lcd_Init(void){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0

	Lm6063LcdInit();
 8001a98:	f7ff ff44 	bl	8001924 <Lm6063LcdInit>
//	SSD1306_Init(SSD1306_128x64);
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <Lcd_Update>:
//*****************************************************************************
//Вывод буфера на дисплей.
void Lcd_Update(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

	Lm6063LcdUpdate(lcdVideoBuffer);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <Lcd_Update+0x10>)
 8001aa6:	f7ff ff91 	bl	80019cc <Lm6063LcdUpdate>
//	Lcd_TIC32_SendData(lcdVideoBuffer);
//	SSD1306_UpdateScreen(lcdVideoBuffer, LCD_VIDEO_BUFFER_SIZE);
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000174 	.word	0x20000174

08001ab4 <Lcd_ClearVideoBuffer>:

	return lcdVideoBuffer;
}
//*****************************************************************************
//Clears the display
void Lcd_ClearVideoBuffer(void){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  
	//забиваем всю память 0
	for(uint16_t i = 0; i < LCD_VIDEO_BUFFER_SIZE; i++) lcdVideoBuffer[i] = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	80fb      	strh	r3, [r7, #6]
 8001abe:	e006      	b.n	8001ace <Lcd_ClearVideoBuffer+0x1a>
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <Lcd_ClearVideoBuffer+0x30>)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	54d1      	strb	r1, [r2, r3]
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	3301      	adds	r3, #1
 8001acc:	80fb      	strh	r3, [r7, #6]
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad4:	d3f4      	bcc.n	8001ac0 <Lcd_ClearVideoBuffer+0xc>
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000174 	.word	0x20000174

08001ae8 <Lcd_Pixel>:
  
	for(uint16_t i = 0; i < LCD_VIDEO_BUFFER_SIZE; i++) lcdVideoBuffer[i] = byte;
}
//*****************************************************************************
//управление пикселем с координатами x,y. mode -> Off, On or Xor.
void Lcd_Pixel(uint8_t x, uint8_t y, uint8_t mode){
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	460b      	mov	r3, r1
 8001af4:	71bb      	strb	r3, [r7, #6]
 8001af6:	4613      	mov	r3, r2
 8001af8:	717b      	strb	r3, [r7, #5]
  
	uint16_t index;
	uint16_t offset, data;
	//--------------------
	//если передали в функцию некорректные данные - выходим.
	if((x > LCD_X_RES) || (y > LCD_Y_RES)) return;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b80      	cmp	r3, #128	; 0x80
 8001afe:	d84b      	bhi.n	8001b98 <Lcd_Pixel+0xb0>
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	2b40      	cmp	r3, #64	; 0x40
 8001b04:	d848      	bhi.n	8001b98 <Lcd_Pixel+0xb0>
	//--------------------
	index  = (((int)(y)/8)*128)+x; //считаем номер байта в массиве памяти дисплея
 8001b06:	79bb      	ldrb	r3, [r7, #6]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	81bb      	strh	r3, [r7, #12]
	offset = y-((y/8)*8);          //считаем номер бита в этом байте
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	817b      	strh	r3, [r7, #10]
	data   = lcdVideoBuffer[index];//берем байт по найденному индексу.
 8001b2e:	89bb      	ldrh	r3, [r7, #12]
 8001b30:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <Lcd_Pixel+0xbc>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	81fb      	strh	r3, [r7, #14]
	//редактируем бит в этом байте
	     if( mode == PIXEL_OFF ) data &= ~(0x01 << offset);
 8001b36:	797b      	ldrb	r3, [r7, #5]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10c      	bne.n	8001b56 <Lcd_Pixel+0x6e>
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	81fb      	strh	r3, [r7, #14]
 8001b54:	e01a      	b.n	8001b8c <Lcd_Pixel+0xa4>
	else if( mode == PIXEL_ON  ) data |=  (0x01 << offset);
 8001b56:	797b      	ldrb	r3, [r7, #5]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d10a      	bne.n	8001b72 <Lcd_Pixel+0x8a>
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	81fb      	strh	r3, [r7, #14]
 8001b70:	e00c      	b.n	8001b8c <Lcd_Pixel+0xa4>
	else if( mode == PIXEL_XOR ) data ^=  (0x01 << offset);
 8001b72:	797b      	ldrb	r3, [r7, #5]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d109      	bne.n	8001b8c <Lcd_Pixel+0xa4>
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b86:	4053      	eors	r3, r2
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	81fb      	strh	r3, [r7, #14]
	//--------------------
	lcdVideoBuffer[index] = data;		//загружаем байт назад
 8001b8c:	89bb      	ldrh	r3, [r7, #12]
 8001b8e:	89fa      	ldrh	r2, [r7, #14]
 8001b90:	b2d1      	uxtb	r1, r2
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <Lcd_Pixel+0xbc>)
 8001b94:	54d1      	strb	r1, [r2, r3]
 8001b96:	e000      	b.n	8001b9a <Lcd_Pixel+0xb2>
	if((x > LCD_X_RES) || (y > LCD_Y_RES)) return;
 8001b98:	bf00      	nop
}
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000174 	.word	0x20000174

08001ba8 <Lcd_Line>:
//*****************************************************************************
//Draws a line between two points on the display - по Брезенхейму
void Lcd_Line(int x1, int y1, int x2, int y2, uint8_t mode){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  
	signed int dy       = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
	signed int dx       = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
	signed int stepx    = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
	signed int stepy    = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
	signed int fraction = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
	//--------------------
	//если передали в функцию некорректные данные - выходим.
	if(x1>LCD_X_RES || x2>LCD_X_RES || y1>LCD_Y_RES || y2>LCD_Y_RES) return;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	f300 8095 	bgt.w	8001cfc <Lcd_Line+0x154>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b80      	cmp	r3, #128	; 0x80
 8001bd6:	f300 8091 	bgt.w	8001cfc <Lcd_Line+0x154>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	f300 808d 	bgt.w	8001cfc <Lcd_Line+0x154>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b40      	cmp	r3, #64	; 0x40
 8001be6:	f300 8089 	bgt.w	8001cfc <Lcd_Line+0x154>
	//--------------------
	//Перемещение начала координат в нижний левый угол экрана.
	y1 = 63 - y1;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001bf0:	60bb      	str	r3, [r7, #8]
	y2 = 63 - y2;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001bf8:	603b      	str	r3, [r7, #0]
	//--------------------

	dy = y2 - y1;
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
	dx = x2 - x1;
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	623b      	str	r3, [r7, #32]

	if(dy < 0)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da06      	bge.n	8001c1e <Lcd_Line+0x76>
	{
		dy    = -dy;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	425b      	negs	r3, r3
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
		stepy = -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	e001      	b.n	8001c22 <Lcd_Line+0x7a>
	}
	else stepy = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]

	if(dx < 0)
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	da06      	bge.n	8001c36 <Lcd_Line+0x8e>
	{
		dx    = -dx;
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	623b      	str	r3, [r7, #32]
		stepx = -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e001      	b.n	8001c3a <Lcd_Line+0x92>
	}
	else stepx = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]

	dy <<= 1;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
	dx <<= 1;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	623b      	str	r3, [r7, #32]
	Lcd_Pixel(x1,y1,mode);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	b2d1      	uxtb	r1, r2
 8001c4e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff48 	bl	8001ae8 <Lcd_Pixel>

	if(dx > dy)
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dd26      	ble.n	8001cae <Lcd_Line+0x106>
	{
	  fraction = dy - (dx >> 1);
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	105b      	asrs	r3, r3, #1
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
	  while(x1 != x2)
 8001c6a:	e01b      	b.n	8001ca4 <Lcd_Line+0xfc>
		{
		  if(fraction >= 0)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db07      	blt.n	8001c82 <Lcd_Line+0xda>
			{
			  y1 += stepy;
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4413      	add	r3, r2
 8001c78:	60bb      	str	r3, [r7, #8]
			  fraction -= dx;
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
			}
		  x1 += stepx;
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
		  fraction += dy;
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	4413      	add	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
		  Lcd_Pixel(x1,y1,mode);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	b2d1      	uxtb	r1, r2
 8001c9a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff22 	bl	8001ae8 <Lcd_Pixel>
	  while(x1 != x2)
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1df      	bne.n	8001c6c <Lcd_Line+0xc4>
 8001cac:	e027      	b.n	8001cfe <Lcd_Line+0x156>
		}
	}
	else
	{
	  fraction = dx - (dy >> 1);
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	105b      	asrs	r3, r3, #1
 8001cb2:	6a3a      	ldr	r2, [r7, #32]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
	  while(y1 != y2)
 8001cb8:	e01b      	b.n	8001cf2 <Lcd_Line+0x14a>
		{
		  if(fraction >= 0)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db07      	blt.n	8001cd0 <Lcd_Line+0x128>
			{
			  x1 += stepx;
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
			  fraction -= dy;
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	617b      	str	r3, [r7, #20]
			}
		  y1 += stepy;
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
		  fraction += dx;
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	4413      	add	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
		  Lcd_Pixel(x1,y1,mode);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	b2d1      	uxtb	r1, r2
 8001ce8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fefb 	bl	8001ae8 <Lcd_Pixel>
	  while(y1 != y2)
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d1df      	bne.n	8001cba <Lcd_Line+0x112>
 8001cfa:	e000      	b.n	8001cfe <Lcd_Line+0x156>
	if(x1>LCD_X_RES || x2>LCD_X_RES || y1>LCD_Y_RES || y2>LCD_Y_RES) return;
 8001cfc:	bf00      	nop
		}
	}
}
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <Lcd_GotoXYFont>:
  horizon_line2 = (y2-y1-3);
  for(i=horizon_line2;i>horizon_line;i--) Lcd_Line(x1+2,y2-2-i,x2-2,y2-2-i,0);
}
//*****************************************************************************
//Установка курсора в положение Х,У. Диапазон значений Х,У: 1,1 .. 14,8.
void Lcd_GotoXYFont(uint8_t x, uint8_t y){
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	71fb      	strb	r3, [r7, #7]
 8001d10:	4613      	mov	r3, r2
 8001d12:	71bb      	strb	r3, [r7, #6]
  
  if((x > 24) || (y > 8)) return;
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b18      	cmp	r3, #24
 8001d18:	d814      	bhi.n	8001d44 <Lcd_GotoXYFont+0x40>
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d811      	bhi.n	8001d44 <Lcd_GotoXYFont+0x40>
  LcdCacheIdx = (uint16_t)((y-1) * 128) + (uint16_t)((x-1) * 6);
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	0049      	lsls	r1, r1, #1
 8001d34:	440b      	add	r3, r1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <Lcd_GotoXYFont+0x4c>)
 8001d40:	801a      	strh	r2, [r3, #0]
 8001d42:	e000      	b.n	8001d46 <Lcd_GotoXYFont+0x42>
  if((x > 24) || (y > 8)) return;
 8001d44:	bf00      	nop
}
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000574 	.word	0x20000574

08001d54 <Lcd_Chr>:
//*****************************************************************************
//Displays a character at current cursor location and increment cursor location
void Lcd_Chr(char ch){
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  
	//Проверка на максимум.
	//if(ch > LCD_CACHE_SIZE) return;
	//--------------------
	UartTextBuffer[UartTextBufferIndex++] = (uint8_t)ch;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <Lcd_Chr+0x70>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	b291      	uxth	r1, r2
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <Lcd_Chr+0x70>)
 8001d68:	8011      	strh	r1, [r2, #0]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <Lcd_Chr+0x74>)
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	5453      	strb	r3, [r2, r1]

	for(uint8_t i=0; i<5; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e013      	b.n	8001da0 <Lcd_Chr+0x4c>
	{
		//выделяем байт-столбик из символа и грузим в массив - 5 раз
		lcdVideoBuffer[LcdCacheIdx++] = TabAscii[ch*5+i];
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	441a      	add	r2, r3
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	441a      	add	r2, r3
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <Lcd_Chr+0x78>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	1c59      	adds	r1, r3, #1
 8001d8a:	b288      	uxth	r0, r1
 8001d8c:	490f      	ldr	r1, [pc, #60]	; (8001dcc <Lcd_Chr+0x78>)
 8001d8e:	8008      	strh	r0, [r1, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <Lcd_Chr+0x7c>)
 8001d94:	5c9a      	ldrb	r2, [r3, r2]
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <Lcd_Chr+0x80>)
 8001d98:	545a      	strb	r2, [r3, r1]
	for(uint8_t i=0; i<5; i++)
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d9e8      	bls.n	8001d78 <Lcd_Chr+0x24>
	}
	lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//добавляем пробел между символами
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <Lcd_Chr+0x78>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	b291      	uxth	r1, r2
 8001dae:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <Lcd_Chr+0x78>)
 8001db0:	8011      	strh	r1, [r2, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <Lcd_Chr+0x80>)
 8001db6:	2100      	movs	r1, #0
 8001db8:	5499      	strb	r1, [r3, r2]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	200005f8 	.word	0x200005f8
 8001dc8:	20000578 	.word	0x20000578
 8001dcc:	20000574 	.word	0x20000574
 8001dd0:	08005610 	.word	0x08005610
 8001dd4:	20000174 	.word	0x20000174

08001dd8 <Lcd_SetCursor>:
//*****************************************************************************
//Утсановка курсора.
void Lcd_SetCursor(uint8_t x, uint8_t y){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	460a      	mov	r2, r1
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71bb      	strb	r3, [r7, #6]
  
	//if (x > 15 || y > 8) return;
	if(x > 22 || y > 8)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b16      	cmp	r3, #22
 8001dec:	d802      	bhi.n	8001df4 <Lcd_SetCursor+0x1c>
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d903      	bls.n	8001dfc <Lcd_SetCursor+0x24>
	{
		x = 22;
 8001df4:	2316      	movs	r3, #22
 8001df6:	71fb      	strb	r3, [r7, #7]
		y = 8;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	71bb      	strb	r3, [r7, #6]
	}
	//--------------------
	Lcd_GotoXYFont (x, y);
 8001dfc:	79ba      	ldrb	r2, [r7, #6]
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff7e 	bl	8001d04 <Lcd_GotoXYFont>
	for(uint8_t i = 0; i < (22-x); i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e00d      	b.n	8001e2a <Lcd_SetCursor+0x52>
	{
		if(lcdTextBuf[i]) Lcd_Chr(lcdTextBuf[i]);
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <Lcd_SetCursor+0x68>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <Lcd_SetCursor+0x4c>
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <Lcd_SetCursor+0x68>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff98 	bl	8001d54 <Lcd_Chr>
	for(uint8_t i = 0; i < (22-x); i++)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	3301      	adds	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f1c3 0316 	rsb	r3, r3, #22
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbeb      	blt.n	8001e0e <Lcd_SetCursor+0x36>
	}
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000015c 	.word	0x2000015c

08001e44 <Lcd_ChrBold>:
//*****************************************************************************
//Displays a bold character at current cursor location and increment cursor location
void Lcd_ChrBold(char ch){
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  
	unsigned char i;
	unsigned char a = 0, b = 0, c = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73bb      	strb	r3, [r7, #14]
 8001e52:	2300      	movs	r3, #0
 8001e54:	737b      	strb	r3, [r7, #13]
 8001e56:	2300      	movs	r3, #0
 8001e58:	733b      	strb	r3, [r7, #12]
	//--------------------
	for(i = 0; i < 5; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e096      	b.n	8001f8e <Lcd_ChrBold+0x14a>
	{
		c = TabAscii[(ch*5+i)];//выделяем столбец из символа
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	441a      	add	r2, r3
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <Lcd_ChrBold+0x184>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	733b      	strb	r3, [r7, #12]

		b  = (c & 0x01) * 3;   //"растягиваем" столбец на два байта
 8001e72:	7b3b      	ldrb	r3, [r7, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	0052      	lsls	r2, r2, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	737b      	strb	r3, [r7, #13]
		b |= (c & 0x02) * 6;
 8001e82:	7b3b      	ldrb	r3, [r7, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	0052      	lsls	r2, r2, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	b25a      	sxtb	r2, r3
 8001e96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	737b      	strb	r3, [r7, #13]
		b |= (c & 0x04) * 12;
 8001ea0:	7b3b      	ldrb	r3, [r7, #12]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	0052      	lsls	r2, r2, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	b25a      	sxtb	r2, r3
 8001eb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	737b      	strb	r3, [r7, #13]
		b |= (c & 0x08) * 24;
 8001ebe:	7b3b      	ldrb	r3, [r7, #12]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	0052      	lsls	r2, r2, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	b25a      	sxtb	r2, r3
 8001ed2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b25b      	sxtb	r3, r3
 8001eda:	737b      	strb	r3, [r7, #13]

		c >>= 4;
 8001edc:	7b3b      	ldrb	r3, [r7, #12]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	733b      	strb	r3, [r7, #12]
		a  = (c & 0x01) * 3;
 8001ee2:	7b3b      	ldrb	r3, [r7, #12]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	0052      	lsls	r2, r2, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	73bb      	strb	r3, [r7, #14]
		a |= (c & 0x02) * 6;
 8001ef2:	7b3b      	ldrb	r3, [r7, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	0052      	lsls	r2, r2, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	b25a      	sxtb	r2, r3
 8001f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	73bb      	strb	r3, [r7, #14]
		a |= (c & 0x04) * 12;
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	0052      	lsls	r2, r2, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	b25a      	sxtb	r2, r3
 8001f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	73bb      	strb	r3, [r7, #14]
		a |= (c & 0x08) * 24;
 8001f2e:	7b3b      	ldrb	r3, [r7, #12]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	0052      	lsls	r2, r2, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	b25a      	sxtb	r2, r3
 8001f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	73bb      	strb	r3, [r7, #14]

		lcdVideoBuffer[LcdCacheIdx]     = b;//копируем байты в экранный буфер
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <Lcd_ChrBold+0x18c>)
 8001f54:	7b7b      	ldrb	r3, [r7, #13]
 8001f56:	5453      	strb	r3, [r2, r1]
		lcdVideoBuffer[LcdCacheIdx+1]   = b;//дублируем для получения жирного шрифта
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	491c      	ldr	r1, [pc, #112]	; (8001fd0 <Lcd_ChrBold+0x18c>)
 8001f60:	7b7a      	ldrb	r2, [r7, #13]
 8001f62:	54ca      	strb	r2, [r1, r3]
		lcdVideoBuffer[LcdCacheIdx+128] = a;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	3380      	adds	r3, #128	; 0x80
 8001f6a:	4919      	ldr	r1, [pc, #100]	; (8001fd0 <Lcd_ChrBold+0x18c>)
 8001f6c:	7bba      	ldrb	r2, [r7, #14]
 8001f6e:	54ca      	strb	r2, [r1, r3]
		lcdVideoBuffer[LcdCacheIdx+129] = a;
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	3381      	adds	r3, #129	; 0x81
 8001f76:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <Lcd_ChrBold+0x18c>)
 8001f78:	7bba      	ldrb	r2, [r7, #14]
 8001f7a:	54ca      	strb	r2, [r1, r3]
		LcdCacheIdx = LcdCacheIdx+2;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	3302      	adds	r3, #2
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001f86:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < 5; i++)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	f67f af65 	bls.w	8001e60 <Lcd_ChrBold+0x1c>
	}
	lcdVideoBuffer[LcdCacheIdx++] = 0x00;	//для пробела между символами
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	b291      	uxth	r1, r2
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001fa0:	8011      	strh	r1, [r2, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <Lcd_ChrBold+0x18c>)
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]
	lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	b291      	uxth	r1, r2
 8001fb2:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <Lcd_ChrBold+0x188>)
 8001fb4:	8011      	strh	r1, [r2, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <Lcd_ChrBold+0x18c>)
 8001fba:	2100      	movs	r1, #0
 8001fbc:	5499      	strb	r1, [r3, r2]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	08005610 	.word	0x08005610
 8001fcc:	20000574 	.word	0x20000574
 8001fd0:	20000174 	.word	0x20000174

08001fd4 <Lcd_ChrBig>:
	}
	ClearTextBuf();
}
//*****************************************************************************	
//Displays a character at current cursor location and increment cursor location
void Lcd_ChrBig (char ch){
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  
	unsigned char i;
	unsigned char a = 0, b = 0, c = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73bb      	strb	r3, [r7, #14]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	737b      	strb	r3, [r7, #13]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	733b      	strb	r3, [r7, #12]
	//--------------------
	for(i = 0; i < 5; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e08a      	b.n	8002106 <Lcd_ChrBig+0x132>
	{
		c = TabAscii[(ch*5+i)];		//выделяем столбец из символа
 8001ff0:	79fa      	ldrb	r2, [r7, #7]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	441a      	add	r2, r3
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <Lcd_ChrBig+0x158>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	733b      	strb	r3, [r7, #12]

		b  = (c & 0x01) * 3;            //"растягиваем" столбец на два байта
 8002002:	7b3b      	ldrb	r3, [r7, #12]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	0052      	lsls	r2, r2, #1
 800200e:	4413      	add	r3, r2
 8002010:	737b      	strb	r3, [r7, #13]
		b |= (c & 0x02) * 6;
 8002012:	7b3b      	ldrb	r3, [r7, #12]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	0052      	lsls	r2, r2, #1
 800201e:	4413      	add	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	b25a      	sxtb	r2, r3
 8002026:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800202a:	4313      	orrs	r3, r2
 800202c:	b25b      	sxtb	r3, r3
 800202e:	737b      	strb	r3, [r7, #13]
		b |= (c & 0x04) * 12;
 8002030:	7b3b      	ldrb	r3, [r7, #12]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	0052      	lsls	r2, r2, #1
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	b2db      	uxtb	r3, r3
 8002042:	b25a      	sxtb	r2, r3
 8002044:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	737b      	strb	r3, [r7, #13]
		b |= (c & 0x08) * 24;
 800204e:	7b3b      	ldrb	r3, [r7, #12]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	0052      	lsls	r2, r2, #1
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b25a      	sxtb	r2, r3
 8002062:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002066:	4313      	orrs	r3, r2
 8002068:	b25b      	sxtb	r3, r3
 800206a:	737b      	strb	r3, [r7, #13]

		c >>= 4;
 800206c:	7b3b      	ldrb	r3, [r7, #12]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	733b      	strb	r3, [r7, #12]
		a  = (c & 0x01) * 3;
 8002072:	7b3b      	ldrb	r3, [r7, #12]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	0052      	lsls	r2, r2, #1
 800207e:	4413      	add	r3, r2
 8002080:	73bb      	strb	r3, [r7, #14]
		a |= (c & 0x02) * 6;
 8002082:	7b3b      	ldrb	r3, [r7, #12]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	0052      	lsls	r2, r2, #1
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	b25a      	sxtb	r2, r3
 8002096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800209a:	4313      	orrs	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	73bb      	strb	r3, [r7, #14]
		a |= (c & 0x04) * 12;
 80020a0:	7b3b      	ldrb	r3, [r7, #12]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	0052      	lsls	r2, r2, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	73bb      	strb	r3, [r7, #14]
		a |= (c & 0x08) * 24;
 80020be:	7b3b      	ldrb	r3, [r7, #12]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	0052      	lsls	r2, r2, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	b25a      	sxtb	r2, r3
 80020d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	73bb      	strb	r3, [r7, #14]
		lcdVideoBuffer[LcdCacheIdx] = b;
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <Lcd_ChrBig+0x15c>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	4a14      	ldr	r2, [pc, #80]	; (8002134 <Lcd_ChrBig+0x160>)
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	5453      	strb	r3, [r2, r1]
		lcdVideoBuffer[LcdCacheIdx+128] = a;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <Lcd_ChrBig+0x15c>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	3380      	adds	r3, #128	; 0x80
 80020ee:	4911      	ldr	r1, [pc, #68]	; (8002134 <Lcd_ChrBig+0x160>)
 80020f0:	7bba      	ldrb	r2, [r7, #14]
 80020f2:	54ca      	strb	r2, [r1, r3]
		LcdCacheIdx = LcdCacheIdx+1;
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <Lcd_ChrBig+0x15c>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <Lcd_ChrBig+0x15c>)
 80020fe:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < 5; i++)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	3301      	adds	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	2b04      	cmp	r3, #4
 800210a:	f67f af71 	bls.w	8001ff0 <Lcd_ChrBig+0x1c>
	}
	lcdVideoBuffer[LcdCacheIdx++] = 0x00;
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <Lcd_ChrBig+0x15c>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	b291      	uxth	r1, r2
 8002116:	4a06      	ldr	r2, [pc, #24]	; (8002130 <Lcd_ChrBig+0x15c>)
 8002118:	8011      	strh	r1, [r2, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <Lcd_ChrBig+0x160>)
 800211e:	2100      	movs	r1, #0
 8002120:	5499      	strb	r1, [r3, r2]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	08005610 	.word	0x08005610
 8002130:	20000574 	.word	0x20000574
 8002134:	20000174 	.word	0x20000174

08002138 <Lcd_Print>:
		if(lcdTextBuf[i]) Lcd_ChrBig(lcdTextBuf[i]);
	}
	ClearTextBuf();
}
//*****************************************************************************
uint8_t Lcd_Print(char *txt){
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  
	uint8_t i = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
	//--------------------
	ClearTextBuf();
 8002144:	f7ff fc8e 	bl	8001a64 <ClearTextBuf>
	while(*txt)
 8002148:	e009      	b.n	800215e <Lcd_Print+0x26>
	{
		Lcd_Chr(*txt++);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fdfe 	bl	8001d54 <Lcd_Chr>
		i++;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
	while(*txt)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f1      	bne.n	800214a <Lcd_Print+0x12>
	}
	return i;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <Lcd_BinToDec>:
		lcdVideoBuffer[i] = imageData[1023 - i];	//грузим данные
		//lcdVideoBuffer[i] = imageData[i];	//грузим данные
	}
}
//*****************************************************************************
uint32_t Lcd_BinToDec(uint32_t var, uint32_t num, uint32_t charSize){
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]

	#define DEC_ARR_SIZE 10

	uint8_t  decArray[DEC_ARR_SIZE];
	uint32_t div = 1000000000;
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <Lcd_BinToDec+0xb8>)
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
	//uint8_t	 temp;
	//--------------------
	//Преобразование числа в строку.
	for(uint32_t i = DEC_ARR_SIZE; i > 0; i--)
 8002180:	230a      	movs	r3, #10
 8002182:	623b      	str	r3, [r7, #32]
 8002184:	e01c      	b.n	80021c0 <Lcd_BinToDec+0x50>
	{
		decArray[i-1] = (uint8_t)(var/div);
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	fbb2 f2f3 	udiv	r2, r2, r3
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	3b01      	subs	r3, #1
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	3328      	adds	r3, #40	; 0x28
 8002196:	443b      	add	r3, r7
 8002198:	f803 2c18 	strb.w	r2, [r3, #-24]
		var %= div;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	fb01 f202 	mul.w	r2, r1, r2
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
		div /= 10;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	4a1e      	ldr	r2, [pc, #120]	; (800222c <Lcd_BinToDec+0xbc>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	08db      	lsrs	r3, r3, #3
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint32_t i = DEC_ARR_SIZE; i > 0; i--)
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	3b01      	subs	r3, #1
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1df      	bne.n	8002186 <Lcd_BinToDec+0x16>
//
//	decArray[1] = (uint8_t)(var/10);
//	decArray[0] = (uint8_t)(var%10);
	//--------------------
	//Вывод на дисплей
	for(uint32_t i = 0; i < num; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e023      	b.n	8002214 <Lcd_BinToDec+0xa4>
	{
		var = 0x30 + decArray[(num - 1) - i];
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	3328      	adds	r3, #40	; 0x28
 80021d6:	443b      	add	r3, r7
 80021d8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80021dc:	3330      	adds	r3, #48	; 0x30
 80021de:	60fb      	str	r3, [r7, #12]
			 if(charSize == LCD_CHAR_SIZE_BIG) Lcd_ChrBig((uint8_t)var);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <Lcd_BinToDec+0x82>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fef2 	bl	8001fd4 <Lcd_ChrBig>
 80021f0:	e00d      	b.n	800220e <Lcd_BinToDec+0x9e>
		else if(charSize == LCD_CHAR_SIZE_BOLD)Lcd_ChrBold((uint8_t)var);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d105      	bne.n	8002204 <Lcd_BinToDec+0x94>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fe21 	bl	8001e44 <Lcd_ChrBold>
 8002202:	e004      	b.n	800220e <Lcd_BinToDec+0x9e>
		else					     		   Lcd_Chr((uint8_t)var);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fda3 	bl	8001d54 <Lcd_Chr>
	for(uint32_t i = 0; i < num; i++)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3d7      	bcc.n	80021cc <Lcd_BinToDec+0x5c>
	}
	return num+1;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3301      	adds	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3728      	adds	r7, #40	; 0x28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	3b9aca00 	.word	0x3b9aca00
 800222c:	cccccccd 	.word	0xcccccccd

08002230 <Lcd_BinToDecWithSign>:
//*****************************************************************************
uint32_t Lcd_BinToDecWithSign(int32_t var, uint32_t num, uint32_t charSize){
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]

	void(*func)(char);
	//--------------------
	//Выбираем функцию для выводв символа
	 	 if(charSize == LCD_CHAR_SIZE_BIG) func = Lcd_ChrBig;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <Lcd_BinToDecWithSign+0x18>
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <Lcd_BinToDecWithSign+0x5c>)
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e007      	b.n	8002258 <Lcd_BinToDecWithSign+0x28>
	else if(charSize == LCD_CHAR_SIZE_BOLD)func = Lcd_ChrBold;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d102      	bne.n	8002254 <Lcd_BinToDecWithSign+0x24>
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <Lcd_BinToDecWithSign+0x60>)
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e001      	b.n	8002258 <Lcd_BinToDecWithSign+0x28>
	else					     		   func = Lcd_Chr;
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <Lcd_BinToDecWithSign+0x64>)
 8002256:	617b      	str	r3, [r7, #20]
	//Вывод знака
	if(var < 0)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da06      	bge.n	800226c <Lcd_BinToDecWithSign+0x3c>
	{
		var  = -var;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	425b      	negs	r3, r3
 8002262:	60fb      	str	r3, [r7, #12]
		(*func)('-');
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	202d      	movs	r0, #45	; 0x2d
 8002268:	4798      	blx	r3
 800226a:	e002      	b.n	8002272 <Lcd_BinToDecWithSign+0x42>
	}
	else (*func)(' ');
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2020      	movs	r0, #32
 8002270:	4798      	blx	r3
	//Вывод десятичных разрядов числа. Возвращаем кол-во выведенных символов.
	return Lcd_BinToDec(var, num, charSize) + 1;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff79 	bl	8002170 <Lcd_BinToDec>
 800227e:	4603      	mov	r3, r0
 8002280:	3301      	adds	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	08001fd5 	.word	0x08001fd5
 8002290:	08001e45 	.word	0x08001e45
 8002294:	08001d55 	.word	0x08001d55

08002298 <Lcd_PrintStringAndNumber>:
	Lcd_u8ToHex((uint8_t)((var & 0x00FF0000) >> 16));
	Lcd_u8ToHex((uint8_t)((var & 0x0000FF00) >> 8));
	Lcd_u8ToHex((uint8_t)( var & 0x000000FF));
}
//*****************************************************************************
void Lcd_PrintStringAndNumber(uint8_t cursor_x, uint8_t cursor_y, char *str, uint32_t number, uint32_t numDigit){
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60ba      	str	r2, [r7, #8]
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	460b      	mov	r3, r1
 80022a8:	73bb      	strb	r3, [r7, #14]

	Lcd_SetCursor(cursor_x, cursor_y);
 80022aa:	7bba      	ldrb	r2, [r7, #14]
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fd91 	bl	8001dd8 <Lcd_SetCursor>
	if(*str != '\0')  Lcd_Print(str);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <Lcd_PrintStringAndNumber+0x2c>
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	f7ff ff3a 	bl	8002138 <Lcd_Print>
	if(numDigit != 0) Lcd_BinToDec(number, numDigit, LCD_CHAR_SIZE_NORM);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <Lcd_PrintStringAndNumber+0x3c>
 80022ca:	2200      	movs	r2, #0
 80022cc:	69b9      	ldr	r1, [r7, #24]
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4e 	bl	8002170 <Lcd_BinToDec>
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <map_I32>:

  return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
//************************************************************

int32_t map_I32(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max){
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]

  return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	1a8a      	subs	r2, r1, r2
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1acb      	subs	r3, r1, r3
 8002300:	fb92 f2f3 	sdiv	r2, r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4413      	add	r3, r2
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	0000      	movs	r0, r0
 8002314:	0000      	movs	r0, r0
	...

08002318 <Lcd_AnalogScale>:
 * Параметры:
 * angle :угол на который нужно повернуть стрелку (слева направо)
 *		  мин. уол  - ANALOG_SCALE_ANGLE_MIN градусов.
 *		  макс.угол - ANALOG_SCALE_ANGLE_MAX градусов.
 */
void Lcd_AnalogScale(uint32_t angle){
 8002318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af02      	add	r7, sp, #8
 800231e:	6078      	str	r0, [r7, #4]
//	int8_t y0 = ANALOG_SCALE_Y0; //Y-координата центра шкалы.
	float cos;
	float sin;
	//-------------------
	//Рисуем риски-метки шкалы
	for(float i = 0; i < M_PI_2; i += ANALOG_SCALE_PI_2_8)
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e06c      	b.n	8002402 <Lcd_AnalogScale+0xea>
	{
		cos = cosf(i + M_PI_4);
 8002328:	6978      	ldr	r0, [r7, #20]
 800232a:	f7fe f939 	bl	80005a0 <__aeabi_f2d>
 800232e:	a366      	add	r3, pc, #408	; (adr r3, 80024c8 <Lcd_AnalogScale+0x1b0>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fd ffd6 	bl	80002e4 <__adddf3>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fa0e 	bl	8000760 <__aeabi_d2f>
 8002344:	4603      	mov	r3, r0
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fa40 	bl	80047cc <cosf>
 800234c:	60f8      	str	r0, [r7, #12]
		sin = sinf(i + M_PI_4);
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7fe f926 	bl	80005a0 <__aeabi_f2d>
 8002354:	a35c      	add	r3, pc, #368	; (adr r3, 80024c8 <Lcd_AnalogScale+0x1b0>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fd ffc3 	bl	80002e4 <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe f9fb 	bl	8000760 <__aeabi_d2f>
 800236a:	4603      	mov	r3, r0
 800236c:	4618      	mov	r0, r3
 800236e:	f002 fa65 	bl	800483c <sinf>
 8002372:	60b8      	str	r0, [r7, #8]
		Lcd_Line(ANALOG_SCALE_X0 +  ANALOG_SCALE_RADIUS    * cos,
 8002374:	4958      	ldr	r1, [pc, #352]	; (80024d8 <Lcd_AnalogScale+0x1c0>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7fd fefa 	bl	8000170 <__aeabi_fmul>
 800237c:	4603      	mov	r3, r0
 800237e:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fa42 	bl	800080c <__addsf3>
 8002388:	4603      	mov	r3, r0
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fbbc 	bl	8000b08 <__aeabi_f2iz>
 8002390:	4604      	mov	r4, r0
				 ANALOG_SCALE_Y0 +  ANALOG_SCALE_RADIUS    * sin,
 8002392:	4951      	ldr	r1, [pc, #324]	; (80024d8 <Lcd_AnalogScale+0x1c0>)
 8002394:	68b8      	ldr	r0, [r7, #8]
 8002396:	f7fd feeb 	bl	8000170 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
 800239c:	494f      	ldr	r1, [pc, #316]	; (80024dc <Lcd_AnalogScale+0x1c4>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fa32 	bl	8000808 <__aeabi_fsub>
 80023a4:	4603      	mov	r3, r0
		Lcd_Line(ANALOG_SCALE_X0 +  ANALOG_SCALE_RADIUS    * cos,
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fbae 	bl	8000b08 <__aeabi_f2iz>
 80023ac:	4605      	mov	r5, r0
				 ANALOG_SCALE_X0 + (ANALOG_SCALE_RADIUS-6) * cos,
 80023ae:	494c      	ldr	r1, [pc, #304]	; (80024e0 <Lcd_AnalogScale+0x1c8>)
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f7fd fedd 	bl	8000170 <__aeabi_fmul>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fa25 	bl	800080c <__addsf3>
 80023c2:	4603      	mov	r3, r0
		Lcd_Line(ANALOG_SCALE_X0 +  ANALOG_SCALE_RADIUS    * cos,
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fb9f 	bl	8000b08 <__aeabi_f2iz>
 80023ca:	4606      	mov	r6, r0
				 ANALOG_SCALE_Y0 + (ANALOG_SCALE_RADIUS-6) * sin,
 80023cc:	4944      	ldr	r1, [pc, #272]	; (80024e0 <Lcd_AnalogScale+0x1c8>)
 80023ce:	68b8      	ldr	r0, [r7, #8]
 80023d0:	f7fd fece 	bl	8000170 <__aeabi_fmul>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4941      	ldr	r1, [pc, #260]	; (80024dc <Lcd_AnalogScale+0x1c4>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fa15 	bl	8000808 <__aeabi_fsub>
 80023de:	4603      	mov	r3, r0
		Lcd_Line(ANALOG_SCALE_X0 +  ANALOG_SCALE_RADIUS    * cos,
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fb91 	bl	8000b08 <__aeabi_f2iz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2201      	movs	r2, #1
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	4632      	mov	r2, r6
 80023ee:	4629      	mov	r1, r5
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff fbd9 	bl	8001ba8 <Lcd_Line>
	for(float i = 0; i < M_PI_2; i += ANALOG_SCALE_PI_2_8)
 80023f6:	493b      	ldr	r1, [pc, #236]	; (80024e4 <Lcd_AnalogScale+0x1cc>)
 80023f8:	6978      	ldr	r0, [r7, #20]
 80023fa:	f7fe fa07 	bl	800080c <__addsf3>
 80023fe:	4603      	mov	r3, r0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7fe f8cc 	bl	80005a0 <__aeabi_f2d>
 8002408:	a331      	add	r3, pc, #196	; (adr r3, 80024d0 <Lcd_AnalogScale+0x1b8>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe f97f 	bl	8000710 <__aeabi_dcmplt>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d187      	bne.n	8002328 <Lcd_AnalogScale+0x10>
				 PIXEL_ON);
	}
	//Стрелка.
	angle  = (ANALOG_SCALE_SECTOR - angle);	//это нужно чтобы стрелка двигалась слева направо.
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800241e:	607b      	str	r3, [r7, #4]
	angle += ANALOG_SCALE_PHI;				//поворот сектора отображения стрелки от нуля градусов.
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8002426:	607b      	str	r3, [r7, #4]
	float rad = angle * ANALOG_SCALE_K_RAD; //перевод углов в радианы
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7fe fa9f 	bl	800096c <__aeabi_ui2f>
 800242e:	4603      	mov	r3, r0
 8002430:	492d      	ldr	r1, [pc, #180]	; (80024e8 <Lcd_AnalogScale+0x1d0>)
 8002432:	4618      	mov	r0, r3
 8002434:	f7fd fe9c 	bl	8000170 <__aeabi_fmul>
 8002438:	4603      	mov	r3, r0
 800243a:	613b      	str	r3, [r7, #16]
	cos = cosf(rad);
 800243c:	6938      	ldr	r0, [r7, #16]
 800243e:	f002 f9c5 	bl	80047cc <cosf>
 8002442:	60f8      	str	r0, [r7, #12]
	sin = sinf(rad);
 8002444:	6938      	ldr	r0, [r7, #16]
 8002446:	f002 f9f9 	bl	800483c <sinf>
 800244a:	60b8      	str	r0, [r7, #8]
	//x0 += 1; //небольшое смещение по Х что бы стрелка точно поподала в среднюю риску.
	//y0 += 5; //небольшое смещение по Y что бы стрелка поподала в риски.
	Lcd_Line(ANALOG_SCALE_X0 + ANALOG_SCALE_RADIUS * cos,
 800244c:	4922      	ldr	r1, [pc, #136]	; (80024d8 <Lcd_AnalogScale+0x1c0>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7fd fe8e 	bl	8000170 <__aeabi_fmul>
 8002454:	4603      	mov	r3, r0
 8002456:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f9d6 	bl	800080c <__addsf3>
 8002460:	4603      	mov	r3, r0
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fb50 	bl	8000b08 <__aeabi_f2iz>
 8002468:	4604      	mov	r4, r0
			 ANALOG_SCALE_Y0 + 5 + ANALOG_SCALE_RADIUS * sin,
 800246a:	491b      	ldr	r1, [pc, #108]	; (80024d8 <Lcd_AnalogScale+0x1c0>)
 800246c:	68b8      	ldr	r0, [r7, #8]
 800246e:	f7fd fe7f 	bl	8000170 <__aeabi_fmul>
 8002472:	4603      	mov	r3, r0
 8002474:	491d      	ldr	r1, [pc, #116]	; (80024ec <Lcd_AnalogScale+0x1d4>)
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f9c6 	bl	8000808 <__aeabi_fsub>
 800247c:	4603      	mov	r3, r0
	Lcd_Line(ANALOG_SCALE_X0 + ANALOG_SCALE_RADIUS * cos,
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fb42 	bl	8000b08 <__aeabi_f2iz>
 8002484:	4605      	mov	r5, r0
			 ANALOG_SCALE_X0 + 1 * cos,
 8002486:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7fe f9be 	bl	800080c <__addsf3>
 8002490:	4603      	mov	r3, r0
	Lcd_Line(ANALOG_SCALE_X0 + ANALOG_SCALE_RADIUS * cos,
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fb38 	bl	8000b08 <__aeabi_f2iz>
 8002498:	4606      	mov	r6, r0
			 ANALOG_SCALE_Y0 + 5 + 1 * sin,
 800249a:	4914      	ldr	r1, [pc, #80]	; (80024ec <Lcd_AnalogScale+0x1d4>)
 800249c:	68b8      	ldr	r0, [r7, #8]
 800249e:	f7fe f9b3 	bl	8000808 <__aeabi_fsub>
 80024a2:	4603      	mov	r3, r0
	Lcd_Line(ANALOG_SCALE_X0 + ANALOG_SCALE_RADIUS * cos,
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fb2f 	bl	8000b08 <__aeabi_f2iz>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2201      	movs	r2, #1
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	4632      	mov	r2, r6
 80024b2:	4629      	mov	r1, r5
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff fb77 	bl	8001ba8 <Lcd_Line>
			 PIXEL_ON);
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c2:	bf00      	nop
 80024c4:	f3af 8000 	nop.w
 80024c8:	54442d18 	.word	0x54442d18
 80024cc:	3fe921fb 	.word	0x3fe921fb
 80024d0:	54442d18 	.word	0x54442d18
 80024d4:	3ff921fb 	.word	0x3ff921fb
 80024d8:	42be0000 	.word	0x42be0000
 80024dc:	42820000 	.word	0x42820000
 80024e0:	42b20000 	.word	0x42b20000
 80024e4:	3e490fdb 	.word	0x3e490fdb
 80024e8:	3ae4c388 	.word	0x3ae4c388
 80024ec:	42700000 	.word	0x42700000

080024f0 <Lcd_HorizontalProgressBar>:
 * x0	: начальная координата шкалы по Х (мин. 0, макс. 127).
 * y0	: начальная координата шкалы по Y (мин. 0, макс. 63).
 * level: отображаемое значение (мин. 0, макс. 127)
 *
 */
void Lcd_HorizontalProgressBar(uint8_t x0, uint8_t y0, uint8_t level){
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
 80024fa:	460b      	mov	r3, r1
 80024fc:	71bb      	strb	r3, [r7, #6]
 80024fe:	4613      	mov	r3, r2
 8002500:	717b      	strb	r3, [r7, #5]

//	uint8_t x0	      = 3;		//Начальная координата шкалы по Х.
//	uint8_t y0	      = 2;		//Начальная координата шкалы по Y.
//	uint8_t sigLevel  = (uint8_t)map(percent, 0, 100, 0, maxVal);//Отображаемый сигнал . Мин. 0, макс. 127.

	const uint8_t numMarks  = 5;   //Необходимое кол-во вертикальных рисок на шкале.
 8002502:	2305      	movs	r3, #5
 8002504:	733b      	strb	r3, [r7, #12]
	const uint8_t scaleStep = 1;   //Шаг приращения шкалы в пикселях
 8002506:	2301      	movs	r3, #1
 8002508:	72fb      	strb	r3, [r7, #11]
	const uint8_t maxVal    = 100; //Максимальное отображаемое значение, макс. 127 (на дисплее макс 128 пикселей).
 800250a:	2364      	movs	r3, #100	; 0x64
 800250c:	72bb      	strb	r3, [r7, #10]
	uint8_t marksStep = maxVal / (numMarks-1);//Шаг между рисками.
 800250e:	7aba      	ldrb	r2, [r7, #10]
 8002510:	7b3b      	ldrb	r3, [r7, #12]
 8002512:	3b01      	subs	r3, #1
 8002514:	fb92 f3f3 	sdiv	r3, r2, r3
 8002518:	727b      	strb	r3, [r7, #9]
	uint8_t stepCount = x0;
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	73fb      	strb	r3, [r7, #15]
	//-------------------
	//Рисуем риски.
	for(uint8_t i = 0; i < numMarks; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	73bb      	strb	r3, [r7, #14]
 8002522:	e00f      	b.n	8002544 <Lcd_HorizontalProgressBar+0x54>
	{
		Lcd_Line(stepCount, y0, stepCount, y0+4, PIXEL_ON);//Первая Вертикальная палочка высотой 5 пикселей.
 8002524:	7bf8      	ldrb	r0, [r7, #15]
 8002526:	79b9      	ldrb	r1, [r7, #6]
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	3304      	adds	r3, #4
 800252e:	2401      	movs	r4, #1
 8002530:	9400      	str	r4, [sp, #0]
 8002532:	f7ff fb39 	bl	8001ba8 <Lcd_Line>
		//Lcd_Line(stepCount+1, 1, stepCount+1, 5, PIXEL_ON);//Вторая Вертикальная палочка высотой 5 пикселей.
		stepCount += marksStep;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	7a7b      	ldrb	r3, [r7, #9]
 800253a:	4413      	add	r3, r2
 800253c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < numMarks; i++)
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	3301      	adds	r3, #1
 8002542:	73bb      	strb	r3, [r7, #14]
 8002544:	7bba      	ldrb	r2, [r7, #14]
 8002546:	7b3b      	ldrb	r3, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d3eb      	bcc.n	8002524 <Lcd_HorizontalProgressBar+0x34>
	}
	//Рисуем шкалу.
	stepCount = x0;
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	73fb      	strb	r3, [r7, #15]
	level /= scaleStep;//равномерное распределение шагов на всю шкалу.
 8002550:	797a      	ldrb	r2, [r7, #5]
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < level; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	737b      	strb	r3, [r7, #13]
 800255e:	e00f      	b.n	8002580 <Lcd_HorizontalProgressBar+0x90>
	{
		Lcd_Line(stepCount, y0, stepCount, y0+2, PIXEL_ON);//Вертикальная палочка высотой 3 пикселя.
 8002560:	7bf8      	ldrb	r0, [r7, #15]
 8002562:	79b9      	ldrb	r1, [r7, #6]
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	3302      	adds	r3, #2
 800256a:	2401      	movs	r4, #1
 800256c:	9400      	str	r4, [sp, #0]
 800256e:	f7ff fb1b 	bl	8001ba8 <Lcd_Line>
		stepCount += scaleStep;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	7afb      	ldrb	r3, [r7, #11]
 8002576:	4413      	add	r3, r2
 8002578:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < level; i++)
 800257a:	7b7b      	ldrb	r3, [r7, #13]
 800257c:	3301      	adds	r3, #1
 800257e:	737b      	strb	r3, [r7, #13]
 8002580:	7b7a      	ldrb	r2, [r7, #13]
 8002582:	797b      	ldrb	r3, [r7, #5]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3eb      	bcc.n	8002560 <Lcd_HorizontalProgressBar+0x70>
	}
	//Циферки над рисками шкалы
	Lcd_SetCursor(1, 7);
 8002588:	2107      	movs	r1, #7
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fc24 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("0   25  50  75  100");
 8002590:	4803      	ldr	r0, [pc, #12]	; (80025a0 <Lcd_HorizontalProgressBar+0xb0>)
 8002592:	f7ff fdd1 	bl	8002138 <Lcd_Print>
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	bf00      	nop
 80025a0:	080053f8 	.word	0x080053f8

080025a4 <IncrementOnEachPass>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void IncrementOnEachPass(uint32_t *var, uint32_t event, uint32_t step, uint32_t max){
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]

		   uint32_t riseReg  = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
	static uint32_t oldState = 0;
	//-------------------
	riseReg  = (oldState ^ event) & event;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <IncrementOnEachPass+0x5c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
	oldState = event;
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <IncrementOnEachPass+0x5c>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6013      	str	r3, [r2, #0]
//	if(riseReg) (*var)++;
	if(riseReg)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <IncrementOnEachPass+0x52>
	{
		if(step == 0) step = 1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <IncrementOnEachPass+0x34>
 80025d4:	2301      	movs	r3, #1
 80025d6:	607b      	str	r3, [r7, #4]
		if((*var) < max) (*var)+= step;//Проверка на  максимум.
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d906      	bls.n	80025f0 <IncrementOnEachPass+0x4c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	441a      	add	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
		else             (*var) = 0;   //Закольцовывание редактирования параметра.
	}
}
 80025ee:	e002      	b.n	80025f6 <IncrementOnEachPass+0x52>
		else             (*var) = 0;   //Закольцовывание редактирования параметра.
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	2000067c 	.word	0x2000067c

08002604 <Temperature_Display>:
		flag = !flag;
	}
	return flag;
}
//************************************************************
void Temperature_Display(uint8_t cursor_x, uint8_t cursor_y, DS18B20_t *sensor){
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	603a      	str	r2, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
 8002610:	460b      	mov	r3, r1
 8002612:	71bb      	strb	r3, [r7, #6]

	uint32_t temperature = sensor->TEMPERATURE;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	60fb      	str	r3, [r7, #12]
	//-------------------
	Lcd_SetCursor(cursor_x, cursor_y);
 800261a:	79ba      	ldrb	r2, [r7, #6]
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fbd9 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("Temp");
 8002626:	4820      	ldr	r0, [pc, #128]	; (80026a8 <Temperature_Display+0xa4>)
 8002628:	f7ff fd86 	bl	8002138 <Lcd_Print>
	Lcd_BinToDec(sensor->SENSOR_NUMBER, 1, LCD_CHAR_SIZE_NORM);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fd9b 	bl	8002170 <Lcd_BinToDec>
	Lcd_Print(":");
 800263a:	481c      	ldr	r0, [pc, #112]	; (80026ac <Temperature_Display+0xa8>)
 800263c:	f7ff fd7c 	bl	8002138 <Lcd_Print>
	if(TemperatureSens_Sign(sensor) & DS18B20_SIGN_NEGATIVE)Lcd_Chr('-');
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f7fe fe15 	bl	8001270 <TemperatureSens_Sign>
 8002646:	4603      	mov	r3, r0
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <Temperature_Display+0x54>
 8002650:	202d      	movs	r0, #45	; 0x2d
 8002652:	f7ff fb7f 	bl	8001d54 <Lcd_Chr>
 8002656:	e002      	b.n	800265e <Temperature_Display+0x5a>
	else                    								Lcd_Chr('+');
 8002658:	202b      	movs	r0, #43	; 0x2b
 800265a:	f7ff fb7b 	bl	8001d54 <Lcd_Chr>
	Lcd_BinToDec(temperature/10, 2, LCD_CHAR_SIZE_NORM);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <Temperature_Display+0xac>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	2200      	movs	r2, #0
 800266a:	2102      	movs	r1, #2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fd7f 	bl	8002170 <Lcd_BinToDec>
	Lcd_Chr('.');
 8002672:	202e      	movs	r0, #46	; 0x2e
 8002674:	f7ff fb6e 	bl	8001d54 <Lcd_Chr>
	Lcd_BinToDec(temperature%10, 1, LCD_CHAR_SIZE_NORM);
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <Temperature_Display+0xac>)
 800267c:	fba3 1302 	umull	r1, r3, r3, r2
 8002680:	08d8      	lsrs	r0, r3, #3
 8002682:	4603      	mov	r3, r0
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4403      	add	r3, r0
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	1ad0      	subs	r0, r2, r3
 800268c:	2200      	movs	r2, #0
 800268e:	2101      	movs	r1, #1
 8002690:	f7ff fd6e 	bl	8002170 <Lcd_BinToDec>
	Lcd_Print("o ");
 8002694:	4807      	ldr	r0, [pc, #28]	; (80026b4 <Temperature_Display+0xb0>)
 8002696:	f7ff fd4f 	bl	8002138 <Lcd_Print>
	Lcd_Chr('C');
 800269a:	2043      	movs	r0, #67	; 0x43
 800269c:	f7ff fb5a 	bl	8001d54 <Lcd_Chr>
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	0800540c 	.word	0x0800540c
 80026ac:	08005414 	.word	0x08005414
 80026b0:	cccccccd 	.word	0xcccccccd
 80026b4:	08005418 	.word	0x08005418

080026b8 <Time_Display>:
	Txt_Chr('.');
	Txt_BinToDec(temperature%10, 1);
	Txt_Print(" C\n");
}
//************************************************************
void Time_Display(uint8_t cursor_x, uint8_t cursor_y){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	460a      	mov	r2, r1
 80026c2:	71fb      	strb	r3, [r7, #7]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71bb      	strb	r3, [r7, #6]

	//Вывод времени.
	Lcd_SetCursor(cursor_x, cursor_y);
 80026c8:	79ba      	ldrb	r2, [r7, #6]
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fb82 	bl	8001dd8 <Lcd_SetCursor>
//	Lcd_Print("Time: ");
	Lcd_BinToDec(Time.hour, 2, LCD_CHAR_SIZE_NORM);//часы
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <Time_Display+0x70>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	2102      	movs	r1, #2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fd47 	bl	8002170 <Lcd_BinToDec>
	Lcd_Chr(':');
 80026e2:	203a      	movs	r0, #58	; 0x3a
 80026e4:	f7ff fb36 	bl	8001d54 <Lcd_Chr>
	Lcd_BinToDec(Time.min,  2, LCD_CHAR_SIZE_NORM);//минуты
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <Time_Display+0x70>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2102      	movs	r1, #2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fd3d 	bl	8002170 <Lcd_BinToDec>
	//Lcd_Chr(':');
	if(Time.sec & 1) Lcd_Chr(':');//Мигание разделительным знаком
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <Time_Display+0x70>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <Time_Display+0x52>
 8002702:	203a      	movs	r0, #58	; 0x3a
 8002704:	f7ff fb26 	bl	8001d54 <Lcd_Chr>
 8002708:	e002      	b.n	8002710 <Time_Display+0x58>
	else			 Lcd_Chr(' ');
 800270a:	2020      	movs	r0, #32
 800270c:	f7ff fb22 	bl	8001d54 <Lcd_Chr>
	Lcd_BinToDec(Time.sec,  2, LCD_CHAR_SIZE_NORM);//секунды
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <Time_Display+0x70>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fd29 	bl	8002170 <Lcd_BinToDec>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200005fc 	.word	0x200005fc

0800272c <Battery_GetPercentCharge>:
#define	V_BAT_MIN_mV	10800U	//
#define	V_BAT_MAX_mV	16800U	//
//#define	DEVIDER			(V_BAT_MAX_mV - V_BAT_MIN_mV)

//Расчет процентов заряда АКБ.
uint8_t Battery_GetPercentCharge(void){
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af02      	add	r7, sp, #8

	uint32_t temp;
	//-------------------
	temp = PROTOCOL_MASTER_I2C_GetDataMCU()->SupplyVoltageVal;
 8002732:	f7fe fc95 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002736:	4603      	mov	r3, r0
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	607b      	str	r3, [r7, #4]
	if(temp < V_BAT_MIN_mV) temp = V_BAT_MIN_mV;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002742:	4293      	cmp	r3, r2
 8002744:	d802      	bhi.n	800274c <Battery_GetPercentCharge+0x20>
 8002746:	f642 2330 	movw	r3, #10800	; 0x2a30
 800274a:	607b      	str	r3, [r7, #4]
	temp = map_I32(temp, V_BAT_MIN_mV, V_BAT_MAX_mV, 1, 100);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	2364      	movs	r3, #100	; 0x64
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2301      	movs	r3, #1
 8002754:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8002758:	f642 2130 	movw	r1, #10800	; 0x2a30
 800275c:	f7ff fdbe 	bl	80022dc <map_I32>
 8002760:	4603      	mov	r3, r0
 8002762:	607b      	str	r3, [r7, #4]
	if(temp > 100) temp = 100;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <Battery_GetPercentCharge+0x42>
 800276a:	2364      	movs	r3, #100	; 0x64
 800276c:	607b      	str	r3, [r7, #4]
	return (uint8_t)temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	b2db      	uxtb	r3, r3
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <Task_DS2782>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//Работа с микросхемой DS2782.
void Task_DS2782(void){
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

//	DS2782_GetI2cAddress(&DS2782); 		//получение адреса на шине I2C
	//DS2782_GetID(&DS2782);         		//получение Unique ID (factory option)
	DS2782_GetTemperature(&DS2782);		//получение температуры.
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <Task_DS2782+0x14>)
 8002782:	f7fe fdd5 	bl	8001330 <DS2782_GetTemperature>
 	DS2782_GetVoltage(&DS2782);    		//получение напряжения на АКБ.
 8002786:	4802      	ldr	r0, [pc, #8]	; (8002790 <Task_DS2782+0x14>)
 8002788:	f7fe fdf2 	bl	8001370 <DS2782_GetVoltage>
//	DS2782_GetCurrent(&DS2782);    		//получения тока потребления от АКБ.
//	DS2782_GetAverageCurrent(&DS2782);	//получения усредненного за 28 сек. тока потребления от АКБ.
//	DS2782_GetAccumulatedCurrent(&DS2782);
//	DS2782_GetACRL(&DS2782);
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	2000063c 	.word	0x2000063c

08002794 <Task_DS2782_Display>:
//************************************************************
void Task_DS2782_Display(void){
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af02      	add	r7, sp, #8

		   uint32_t temp;
	static uint32_t strIndex = 0;
	//-------------------
	//Очистка видеобуфера.
	Lcd_ClearVideoBuffer();
 800279a:	f7ff f98b 	bl	8001ab4 <Lcd_ClearVideoBuffer>
	//Шапка;
	Lcd_PrintStringAndNumber(1, 1, "_DS2782_v01", 0, 0);
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2300      	movs	r3, #0
 80027a4:	4a6a      	ldr	r2, [pc, #424]	; (8002950 <Task_DS2782_Display+0x1bc>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7ff fd75 	bl	8002298 <Lcd_PrintStringAndNumber>
	//Вывод времени.
//	Time_Display(14, 1);
	//----------------------------------------------
	//По нажатию на кнопку энкодера переход к выбору редактируемого параметра.
	IncrementOnEachPass(&redaction, ENCODER_GetButton(&Encoder), 1, 1);
 80027ae:	4869      	ldr	r0, [pc, #420]	; (8002954 <Task_DS2782_Display+0x1c0>)
 80027b0:	f7fe ffc7 	bl	8001742 <ENCODER_GetButton>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4619      	mov	r1, r3
 80027b8:	2301      	movs	r3, #1
 80027ba:	2201      	movs	r2, #1
 80027bc:	4866      	ldr	r0, [pc, #408]	; (8002958 <Task_DS2782_Display+0x1c4>)
 80027be:	f7ff fef1 	bl	80025a4 <IncrementOnEachPass>
	//При редактировании параметров меню справа от редактируемого
	//параметра выводится "<=".
	if(redaction)
 80027c2:	4b65      	ldr	r3, [pc, #404]	; (8002958 <Task_DS2782_Display+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d014      	beq.n	80027f4 <Task_DS2782_Display+0x60>
	{
		ENCODER_IncDecParam(&Encoder, &strIndex, 1, 0, 6);
 80027ca:	2306      	movs	r3, #6
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2300      	movs	r3, #0
 80027d0:	2201      	movs	r2, #1
 80027d2:	4962      	ldr	r1, [pc, #392]	; (800295c <Task_DS2782_Display+0x1c8>)
 80027d4:	485f      	ldr	r0, [pc, #380]	; (8002954 <Task_DS2782_Display+0x1c0>)
 80027d6:	f7fe ff7b 	bl	80016d0 <ENCODER_IncDecParam>
		Lcd_PrintStringAndNumber(20, (2 + strIndex), "<=", 0, 0);
 80027da:	4b60      	ldr	r3, [pc, #384]	; (800295c <Task_DS2782_Display+0x1c8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3302      	adds	r3, #2
 80027e2:	b2d9      	uxtb	r1, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2300      	movs	r3, #0
 80027ea:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <Task_DS2782_Display+0x1cc>)
 80027ec:	2014      	movs	r0, #20
 80027ee:	f7ff fd53 	bl	8002298 <Lcd_PrintStringAndNumber>
 80027f2:	e002      	b.n	80027fa <Task_DS2782_Display+0x66>
	}
	else strIndex = 0;
 80027f4:	4b59      	ldr	r3, [pc, #356]	; (800295c <Task_DS2782_Display+0x1c8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
	//----------------------------------------------
	//Вывод ошибок обvена по I2C.
	temp = I2C_Master_GetNacCount(DS2782_I2C);
 80027fa:	485a      	ldr	r0, [pc, #360]	; (8002964 <Task_DS2782_Display+0x1d0>)
 80027fc:	f000 fe6c 	bl	80034d8 <I2C_Master_GetNacCount>
 8002800:	6078      	str	r0, [r7, #4]
	Lcd_PrintStringAndNumber(1, 2, "I2cNac :", temp, 4);
 8002802:	2304      	movs	r3, #4
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <Task_DS2782_Display+0x1d4>)
 800280a:	2102      	movs	r1, #2
 800280c:	2001      	movs	r0, #1
 800280e:	f7ff fd43 	bl	8002298 <Lcd_PrintStringAndNumber>
//	Lcd_Print("I2cAddr:");
//	Lcd_Print("0x");
//	Lcd_u8ToHex(DS2782.I2C_Address);

	//Вывод температуры.
	Lcd_SetCursor(1, 3);
 8002812:	2103      	movs	r1, #3
 8002814:	2001      	movs	r0, #1
 8002816:	f7ff fadf 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("Bat_T   = ");
 800281a:	4854      	ldr	r0, [pc, #336]	; (800296c <Task_DS2782_Display+0x1d8>)
 800281c:	f7ff fc8c 	bl	8002138 <Lcd_Print>
	temp = DS2782.Temperature;
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <Task_DS2782_Display+0x1dc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	607b      	str	r3, [r7, #4]
	Lcd_BinToDec(temp/10, 2, LCD_CHAR_SIZE_NORM);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <Task_DS2782_Display+0x1e0>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	2200      	movs	r2, #0
 8002832:	2102      	movs	r1, #2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc9b 	bl	8002170 <Lcd_BinToDec>
	Lcd_Chr('.');
 800283a:	202e      	movs	r0, #46	; 0x2e
 800283c:	f7ff fa8a 	bl	8001d54 <Lcd_Chr>
	Lcd_BinToDec(temp%10, 1, LCD_CHAR_SIZE_NORM);
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <Task_DS2782_Display+0x1e0>)
 8002844:	fba3 1302 	umull	r1, r3, r3, r2
 8002848:	08d8      	lsrs	r0, r3, #3
 800284a:	4603      	mov	r3, r0
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4403      	add	r3, r0
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	1ad0      	subs	r0, r2, r3
 8002854:	2200      	movs	r2, #0
 8002856:	2101      	movs	r1, #1
 8002858:	f7ff fc8a 	bl	8002170 <Lcd_BinToDec>
	Lcd_Print(" C");
 800285c:	4846      	ldr	r0, [pc, #280]	; (8002978 <Task_DS2782_Display+0x1e4>)
 800285e:	f7ff fc6b 	bl	8002138 <Lcd_Print>

	//Вывод напряжения на АКБ.
	Lcd_SetCursor(1, 4);
 8002862:	2104      	movs	r1, #4
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff fab7 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("Bat_U   = ");
 800286a:	4844      	ldr	r0, [pc, #272]	; (800297c <Task_DS2782_Display+0x1e8>)
 800286c:	f7ff fc64 	bl	8002138 <Lcd_Print>
	temp = DS2782.Voltage;
 8002870:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <Task_DS2782_Display+0x1dc>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	607b      	str	r3, [r7, #4]
	Lcd_BinToDec(temp/100, 2, LCD_CHAR_SIZE_NORM);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a41      	ldr	r2, [pc, #260]	; (8002980 <Task_DS2782_Display+0x1ec>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2200      	movs	r2, #0
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fc73 	bl	8002170 <Lcd_BinToDec>
	Lcd_Chr('.');
 800288a:	202e      	movs	r0, #46	; 0x2e
 800288c:	f7ff fa62 	bl	8001d54 <Lcd_Chr>
	Lcd_BinToDec(temp%100, 2, LCD_CHAR_SIZE_NORM);
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <Task_DS2782_Display+0x1ec>)
 8002894:	fba3 1302 	umull	r1, r3, r3, r2
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	2164      	movs	r1, #100	; 0x64
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fc62 	bl	8002170 <Lcd_BinToDec>
	Lcd_Chr('V');
 80028ac:	2056      	movs	r0, #86	; 0x56
 80028ae:	f7ff fa51 	bl	8001d54 <Lcd_Chr>
	//----------------------------------------------
	//Вывод тока потребления от АКБ.
	int16_t currentTemp = DS2782.Current;
 80028b2:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <Task_DS2782_Display+0x1dc>)
 80028b4:	8a1b      	ldrh	r3, [r3, #16]
 80028b6:	807b      	strh	r3, [r7, #2]

	Lcd_SetCursor(1, 5);
 80028b8:	2105      	movs	r1, #5
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7ff fa8c 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("Bat_I   =");
 80028c0:	4830      	ldr	r0, [pc, #192]	; (8002984 <Task_DS2782_Display+0x1f0>)
 80028c2:	f7ff fc39 	bl	8002138 <Lcd_Print>
//		currentTemp = -currentTemp;//Уберем знак.
//		Lcd_Chr('-');
//	}
//	else Lcd_Chr(' ');
//	Lcd_BinToDec(currentTemp, 4, LCD_CHAR_SIZE_NORM);
	Lcd_BinToDecWithSign(currentTemp, 8, LCD_CHAR_SIZE_NORM);
 80028c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028ca:	2200      	movs	r2, #0
 80028cc:	2108      	movs	r1, #8
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fcae 	bl	8002230 <Lcd_BinToDecWithSign>
	Lcd_Print("uA");
 80028d4:	482c      	ldr	r0, [pc, #176]	; (8002988 <Task_DS2782_Display+0x1f4>)
 80028d6:	f7ff fc2f 	bl	8002138 <Lcd_Print>
	//----------------------------------------------
	//Вывод усредненного за 28сек. тока.
	currentTemp = DS2782.AverageCurrent;
 80028da:	4b25      	ldr	r3, [pc, #148]	; (8002970 <Task_DS2782_Display+0x1dc>)
 80028dc:	8a5b      	ldrh	r3, [r3, #18]
 80028de:	807b      	strh	r3, [r7, #2]

	Lcd_SetCursor(1, 6);
 80028e0:	2106      	movs	r1, #6
 80028e2:	2001      	movs	r0, #1
 80028e4:	f7ff fa78 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("Bat_Iavr=");
 80028e8:	4828      	ldr	r0, [pc, #160]	; (800298c <Task_DS2782_Display+0x1f8>)
 80028ea:	f7ff fc25 	bl	8002138 <Lcd_Print>
//		currentTemp = -currentTemp;//Уберем знак.
//		Lcd_Chr('-');
//	}
//	else Lcd_Chr(' ');
//	Lcd_BinToDec(currentTemp, 4, LCD_CHAR_SIZE_NORM);
	Lcd_BinToDecWithSign(currentTemp, 4, LCD_CHAR_SIZE_NORM);
 80028ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2104      	movs	r1, #4
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fc9a 	bl	8002230 <Lcd_BinToDecWithSign>
	Lcd_Print("mA");
 80028fc:	4824      	ldr	r0, [pc, #144]	; (8002990 <Task_DS2782_Display+0x1fc>)
 80028fe:	f7ff fc1b 	bl	8002138 <Lcd_Print>
	//----------------------------------------------
	Lcd_SetCursor(1, 7);
 8002902:	2107      	movs	r1, #7
 8002904:	2001      	movs	r0, #1
 8002906:	f7ff fa67 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("Bat_Iacc= ");
 800290a:	4822      	ldr	r0, [pc, #136]	; (8002994 <Task_DS2782_Display+0x200>)
 800290c:	f7ff fc14 	bl	8002138 <Lcd_Print>
	Lcd_BinToDec(DS2782.AccumulatedCurrent, 8, LCD_CHAR_SIZE_NORM);
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <Task_DS2782_Display+0x1dc>)
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2108      	movs	r1, #8
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fc29 	bl	8002170 <Lcd_BinToDec>
	Lcd_Print("uAh");
 800291e:	481e      	ldr	r0, [pc, #120]	; (8002998 <Task_DS2782_Display+0x204>)
 8002920:	f7ff fc0a 	bl	8002138 <Lcd_Print>

	Lcd_SetCursor(1, 8);
 8002924:	2108      	movs	r1, #8
 8002926:	2001      	movs	r0, #1
 8002928:	f7ff fa56 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("Bat_ACRL= ");
 800292c:	481b      	ldr	r0, [pc, #108]	; (800299c <Task_DS2782_Display+0x208>)
 800292e:	f7ff fc03 	bl	8002138 <Lcd_Print>
	Lcd_BinToDec(DS2782.ACRL, 8, LCD_CHAR_SIZE_NORM);
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <Task_DS2782_Display+0x1dc>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2200      	movs	r2, #0
 8002938:	2108      	movs	r1, #8
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fc18 	bl	8002170 <Lcd_BinToDec>
	Lcd_Print("nAh");
 8002940:	4817      	ldr	r0, [pc, #92]	; (80029a0 <Task_DS2782_Display+0x20c>)
 8002942:	f7ff fbf9 	bl	8002138 <Lcd_Print>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	0800542c 	.word	0x0800542c
 8002954:	20000658 	.word	0x20000658
 8002958:	20000678 	.word	0x20000678
 800295c:	20000680 	.word	0x20000680
 8002960:	08005438 	.word	0x08005438
 8002964:	40005400 	.word	0x40005400
 8002968:	0800543c 	.word	0x0800543c
 800296c:	08005448 	.word	0x08005448
 8002970:	2000063c 	.word	0x2000063c
 8002974:	cccccccd 	.word	0xcccccccd
 8002978:	08005454 	.word	0x08005454
 800297c:	08005458 	.word	0x08005458
 8002980:	51eb851f 	.word	0x51eb851f
 8002984:	08005464 	.word	0x08005464
 8002988:	08005470 	.word	0x08005470
 800298c:	08005474 	.word	0x08005474
 8002990:	08005480 	.word	0x08005480
 8002994:	08005484 	.word	0x08005484
 8002998:	08005490 	.word	0x08005490
 800299c:	08005494 	.word	0x08005494
 80029a0:	080054a0 	.word	0x080054a0

080029a4 <Task_MCUv7DataDisplay>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void Task_MCUv7DataDisplay(void){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af02      	add	r7, sp, #8

		   uint32_t temp;
	static uint32_t strIndex = 0;
	//-------------------
	//Очистка видеобуфера.
	Lcd_ClearVideoBuffer();
 80029aa:	f7ff f883 	bl	8001ab4 <Lcd_ClearVideoBuffer>
	//Шапка
	Lcd_PrintStringAndNumber(1, 1,"Emul_MCUv7_000", 0, 0);
 80029ae:	2300      	movs	r3, #0
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <Task_MCUv7DataDisplay+0x14c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2001      	movs	r0, #1
 80029ba:	f7ff fc6d 	bl	8002298 <Lcd_PrintStringAndNumber>
	//Вывод времени.
	//Time_Display(14, 1);
	//----------------------------------------------
	//По нажатию на кнопку энкодера переход к выбору редактируемого параметра.
	IncrementOnEachPass(&redaction, ENCODER_GetButton(&Encoder), 1, 1);
 80029be:	484d      	ldr	r0, [pc, #308]	; (8002af4 <Task_MCUv7DataDisplay+0x150>)
 80029c0:	f7fe febf 	bl	8001742 <ENCODER_GetButton>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4619      	mov	r1, r3
 80029c8:	2301      	movs	r3, #1
 80029ca:	2201      	movs	r2, #1
 80029cc:	484a      	ldr	r0, [pc, #296]	; (8002af8 <Task_MCUv7DataDisplay+0x154>)
 80029ce:	f7ff fde9 	bl	80025a4 <IncrementOnEachPass>
	//Ходим по пунктам страницы.
	if(redaction)
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <Task_MCUv7DataDisplay+0x154>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d014      	beq.n	8002a04 <Task_MCUv7DataDisplay+0x60>
	{
		ENCODER_IncDecParam(&Encoder, &strIndex, 1, 0, 6);
 80029da:	2306      	movs	r3, #6
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2300      	movs	r3, #0
 80029e0:	2201      	movs	r2, #1
 80029e2:	4946      	ldr	r1, [pc, #280]	; (8002afc <Task_MCUv7DataDisplay+0x158>)
 80029e4:	4843      	ldr	r0, [pc, #268]	; (8002af4 <Task_MCUv7DataDisplay+0x150>)
 80029e6:	f7fe fe73 	bl	80016d0 <ENCODER_IncDecParam>
		Lcd_PrintStringAndNumber(20, (2 + strIndex), "<=", 0, 0);
 80029ea:	4b44      	ldr	r3, [pc, #272]	; (8002afc <Task_MCUv7DataDisplay+0x158>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3302      	adds	r3, #2
 80029f2:	b2d9      	uxtb	r1, r3
 80029f4:	2300      	movs	r3, #0
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2300      	movs	r3, #0
 80029fa:	4a41      	ldr	r2, [pc, #260]	; (8002b00 <Task_MCUv7DataDisplay+0x15c>)
 80029fc:	2014      	movs	r0, #20
 80029fe:	f7ff fc4b 	bl	8002298 <Lcd_PrintStringAndNumber>
 8002a02:	e002      	b.n	8002a0a <Task_MCUv7DataDisplay+0x66>
	}
	else strIndex = 0;
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <Task_MCUv7DataDisplay+0x158>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
	//----------------------------------------------
	Lcd_PrintStringAndNumber(18, 3, '\0', strIndex, 2);
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <Task_MCUv7DataDisplay+0x158>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2103      	movs	r1, #3
 8002a16:	2012      	movs	r0, #18
 8002a18:	f7ff fc3e 	bl	8002298 <Lcd_PrintStringAndNumber>

	//Вывод ошибок обvена по I2C.
	temp = PROTOCOL_MASTER_I2C_GetI2cNacCount();
 8002a1c:	f7fe fb14 	bl	8001048 <PROTOCOL_MASTER_I2C_GetI2cNacCount>
 8002a20:	6078      	str	r0, [r7, #4]
	Lcd_PrintStringAndNumber(1, 2, "I2cNac:", temp, 3);
 8002a22:	2303      	movs	r3, #3
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a36      	ldr	r2, [pc, #216]	; (8002b04 <Task_MCUv7DataDisplay+0x160>)
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f7ff fc33 	bl	8002298 <Lcd_PrintStringAndNumber>

	//Количество переинициализаций I2C.
	temp = PROTOCOL_MASTER_I2C_GetDataMCU()->I2cResetCount;
 8002a32:	f7fe fb15 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002a36:	4603      	mov	r3, r0
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	607b      	str	r3, [r7, #4]
	Lcd_PrintStringAndNumber(12, 2, "I2cRes:", temp, 3);
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <Task_MCUv7DataDisplay+0x164>)
 8002a44:	2102      	movs	r1, #2
 8002a46:	200c      	movs	r0, #12
 8002a48:	f7ff fc26 	bl	8002298 <Lcd_PrintStringAndNumber>

	//Значение энкодера MCUv7.
	temp = PROTOCOL_MASTER_I2C_GetDataMCU()->EncoderAngle;
 8002a4c:	f7fe fb08 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002a50:	4603      	mov	r3, r0
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	607b      	str	r3, [r7, #4]
	Lcd_PrintStringAndNumber(1, 3, "EncAngle: ", temp, 6);
 8002a56:	2306      	movs	r3, #6
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <Task_MCUv7DataDisplay+0x168>)
 8002a5e:	2103      	movs	r1, #3
 8002a60:	2001      	movs	r0, #1
 8002a62:	f7ff fc19 	bl	8002298 <Lcd_PrintStringAndNumber>

	//Вывод темперетуры DS18B20.
	Sensor_1.TEMPERATURE_SIGN = PROTOCOL_MASTER_I2C_GetDataMCU()->TemperatureSense1 >> 24;
 8002a66:	f7fe fafb 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	0e1b      	lsrs	r3, r3, #24
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <Task_MCUv7DataDisplay+0x16c>)
 8002a72:	6113      	str	r3, [r2, #16]
	Sensor_1.TEMPERATURE      = PROTOCOL_MASTER_I2C_GetDataMCU()->TemperatureSense1 & 0x0000FFFF;
 8002a74:	f7fe faf4 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4a24      	ldr	r2, [pc, #144]	; (8002b10 <Task_MCUv7DataDisplay+0x16c>)
 8002a80:	6153      	str	r3, [r2, #20]

	Sensor_2.TEMPERATURE_SIGN = PROTOCOL_MASTER_I2C_GetDataMCU()->TemperatureSense2 >> 24;
 8002a82:	f7fe faed 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002a86:	4603      	mov	r3, r0
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	0e1b      	lsrs	r3, r3, #24
 8002a8c:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <Task_MCUv7DataDisplay+0x170>)
 8002a8e:	6113      	str	r3, [r2, #16]
	Sensor_2.TEMPERATURE      = PROTOCOL_MASTER_I2C_GetDataMCU()->TemperatureSense2 & 0x0000FFFF;
 8002a90:	f7fe fae6 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002a94:	4603      	mov	r3, r0
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <Task_MCUv7DataDisplay+0x170>)
 8002a9c:	6153      	str	r3, [r2, #20]

	Temperature_Display(1, 4, &Sensor_1);
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <Task_MCUv7DataDisplay+0x16c>)
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f7ff fdae 	bl	8002604 <Temperature_Display>
	Temperature_Display(1, 5, &Sensor_2);
 8002aa8:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <Task_MCUv7DataDisplay+0x170>)
 8002aaa:	2105      	movs	r1, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7ff fda9 	bl	8002604 <Temperature_Display>

	//Напряжения питания MCU
	temp = PROTOCOL_MASTER_I2C_GetDataMCU()->SupplyVoltageVal;
 8002ab2:	f7fe fad5 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	607b      	str	r3, [r7, #4]
	Lcd_PrintStringAndNumber(1, 6, "Vin  : ", temp, 5);
 8002abc:	2305      	movs	r3, #5
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <Task_MCUv7DataDisplay+0x174>)
 8002ac4:	2106      	movs	r1, #6
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7ff fbe6 	bl	8002298 <Lcd_PrintStringAndNumber>
	Lcd_Print(" mV");
 8002acc:	4813      	ldr	r0, [pc, #76]	; (8002b1c <Task_MCUv7DataDisplay+0x178>)
 8002ace:	f7ff fb33 	bl	8002138 <Lcd_Print>
//	Lcd_SetCursor(1, 7);
//	Lcd_Print("Sense:");
//	Lcd_u32ToHex(temp);
	//----------------------------------------------
	//Отображение заряда АКБ в виде батарейки.
	uint8_t batPercent = Battery_GetPercentCharge();
 8002ad2:	f7ff fe2b 	bl	800272c <Battery_GetPercentCharge>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	70fb      	strb	r3, [r7, #3]
//	Lcd_PrintBig("%");
//	Lcd_BinToDec(batPercent, 3, LCD_CHAR_SIZE_BIG);
//	Lcd_Bar(114, 2, 124, 17, (uint8_t)percent);
	//----------------------------------------------
	//Горизонтальная шкала с рисками.
	Lcd_HorizontalProgressBar(3, 2, batPercent); //map(batPercent, 0, 100, 0, 100));
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	461a      	mov	r2, r3
 8002ade:	2102      	movs	r1, #2
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f7ff fd05 	bl	80024f0 <Lcd_HorizontalProgressBar>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	080054a4 	.word	0x080054a4
 8002af4:	20000658 	.word	0x20000658
 8002af8:	20000678 	.word	0x20000678
 8002afc:	20000684 	.word	0x20000684
 8002b00:	08005438 	.word	0x08005438
 8002b04:	080054b4 	.word	0x080054b4
 8002b08:	080054bc 	.word	0x080054bc
 8002b0c:	080054c4 	.word	0x080054c4
 8002b10:	2000060c 	.word	0x2000060c
 8002b14:	20000624 	.word	0x20000624
 8002b18:	080054d0 	.word	0x080054d0
 8002b1c:	080054d8 	.word	0x080054d8

08002b20 <Task_AnalogMeter>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void Task_AnalogMeter(void){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af02      	add	r7, sp, #8

	//-------------------
	//Очистка видеобуфера.
	Lcd_ClearVideoBuffer();
 8002b26:	f7fe ffc5 	bl	8001ab4 <Lcd_ClearVideoBuffer>
	//Шапка
	Lcd_SetCursor(1, 1);
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7ff f953 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("AnalogMeter");
 8002b32:	4814      	ldr	r0, [pc, #80]	; (8002b84 <Task_AnalogMeter+0x64>)
 8002b34:	f7ff fb00 	bl	8002138 <Lcd_Print>
	//Вывод времени.
	Time_Display(14, 1);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	200e      	movs	r0, #14
 8002b3c:	f7ff fdbc 	bl	80026b8 <Time_Display>
	//-------------------
	//Расчет процентов заряда АКБ
	uint8_t batPercent = Battery_GetPercentCharge();
 8002b40:	f7ff fdf4 	bl	800272c <Battery_GetPercentCharge>
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
	//Энкодер
	static uint32_t angle = (ANALOG_SCALE_ANGLE_MAX - ANALOG_SCALE_ANGLE_MIN) / 2;
//	ENCODER_IncDecParam(&Encoder, &angle, 1, ANALOG_SCALE_ANGLE_MIN , ANALOG_SCALE_ANGLE_MAX);
	//-------------------
	//Аналговая стрелочная шкала.
	angle = map_I32(batPercent, 1, 100, ANALOG_SCALE_ANGLE_MIN, ANALOG_SCALE_ANGLE_MAX);
 8002b48:	79f8      	ldrb	r0, [r7, #7]
 8002b4a:	f240 3352 	movw	r3, #850	; 0x352
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2332      	movs	r3, #50	; 0x32
 8002b52:	2264      	movs	r2, #100	; 0x64
 8002b54:	2101      	movs	r1, #1
 8002b56:	f7ff fbc1 	bl	80022dc <map_I32>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <Task_AnalogMeter+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]

//	Lcd_PrintStringAndNumber(1, 2, "Angle: ", angle, 3);
	Lcd_PrintStringAndNumber(1, 2, "Percent: ", batPercent, 3);
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2203      	movs	r2, #3
 8002b66:	9200      	str	r2, [sp, #0]
 8002b68:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <Task_AnalogMeter+0x6c>)
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f7ff fb93 	bl	8002298 <Lcd_PrintStringAndNumber>

	Lcd_AnalogScale(angle);
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <Task_AnalogMeter+0x68>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fbce 	bl	8002318 <Lcd_AnalogScale>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	080054dc 	.word	0x080054dc
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	080054e8 	.word	0x080054e8

08002b90 <Task_DisplayPageSelect>:
}
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void Task_DisplayPageSelect(void){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0

	static uint32_t pageIndex = 0;
	//-----------------------------
	TIME_Calculation(&Time, PROTOCOL_MASTER_I2C_GetDataMCU()->msCount);//RTOS_GetTickCount());
 8002b94:	f7fe fa64 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4824      	ldr	r0, [pc, #144]	; (8002c30 <Task_DisplayPageSelect+0xa0>)
 8002ba0:	f7fe fdda 	bl	8001758 <TIME_Calculation>
//	if(Blink_SwitchOnTime(500, 5)) LedPC13On();
//	else						   LedPC13Off();

	//Если на какой-то странице производится редактирование то выбор страницы запрешен
	//if(!redaction) ENCODER_IncDecParam(&Encoder, &pageIndex, 1, 0, 2);//Выбор сраницы
	switch(pageIndex){
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <Task_DisplayPageSelect+0xa4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d01c      	beq.n	8002be6 <Task_DisplayPageSelect+0x56>
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d820      	bhi.n	8002bf2 <Task_DisplayPageSelect+0x62>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <Task_DisplayPageSelect+0x2a>
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d00b      	beq.n	8002bd0 <Task_DisplayPageSelect+0x40>
 8002bb8:	e01b      	b.n	8002bf2 <Task_DisplayPageSelect+0x62>
		//--------------------
		case 0:
			RTOS_SetTask(PROTOCOL_MASTER_I2C_RequestToMCU, 1, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	481e      	ldr	r0, [pc, #120]	; (8002c38 <Task_DisplayPageSelect+0xa8>)
 8002bc0:	f001 fcb4 	bl	800452c <RTOS_SetTask>
			RTOS_SetTask(Task_MCUv7DataDisplay, 2, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	481c      	ldr	r0, [pc, #112]	; (8002c3c <Task_DisplayPageSelect+0xac>)
 8002bca:	f001 fcaf 	bl	800452c <RTOS_SetTask>
		break;
 8002bce:	e01a      	b.n	8002c06 <Task_DisplayPageSelect+0x76>
		//--------------------
		case 1:
			RTOS_SetTask(Task_DS2782,	  	  1,  0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	481a      	ldr	r0, [pc, #104]	; (8002c40 <Task_DisplayPageSelect+0xb0>)
 8002bd6:	f001 fca9 	bl	800452c <RTOS_SetTask>
			RTOS_SetTask(Task_DS2782_Display, 10, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	210a      	movs	r1, #10
 8002bde:	4819      	ldr	r0, [pc, #100]	; (8002c44 <Task_DisplayPageSelect+0xb4>)
 8002be0:	f001 fca4 	bl	800452c <RTOS_SetTask>
		break;
 8002be4:	e00f      	b.n	8002c06 <Task_DisplayPageSelect+0x76>
		//--------------------
		case 2:
			RTOS_SetTask(Task_AnalogMeter, 2, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2102      	movs	r1, #2
 8002bea:	4817      	ldr	r0, [pc, #92]	; (8002c48 <Task_DisplayPageSelect+0xb8>)
 8002bec:	f001 fc9e 	bl	800452c <RTOS_SetTask>
		break;
 8002bf0:	e009      	b.n	8002c06 <Task_DisplayPageSelect+0x76>
		//--------------------
		default:
			Lcd_ClearVideoBuffer();
 8002bf2:	f7fe ff5f 	bl	8001ab4 <Lcd_ClearVideoBuffer>
			Lcd_SetCursor(1, 1);
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff f8ed 	bl	8001dd8 <Lcd_SetCursor>
			Lcd_Print(" EMPTY PAGE ");
 8002bfe:	4813      	ldr	r0, [pc, #76]	; (8002c4c <Task_DisplayPageSelect+0xbc>)
 8002c00:	f7ff fa9a 	bl	8002138 <Lcd_Print>
		break;
 8002c04:	bf00      	nop
		//--------------------
	}
	//RTOS_SetTask(PROTOCOL_MASTER_I2C_RequestToMCU, 1, 0);
	//Проверка состяния системного регистра SystemCtrlReg
	if(PROTOCOL_MASTER_I2C_GetDataMCU()->SysCtrlReg.f_PwrOff) BIG_BOARD_PWR_Off();
 8002c06:	f7fe fa2b 	bl	8001060 <PROTOCOL_MASTER_I2C_GetDataMCU>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <Task_DisplayPageSelect+0x94>
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <Task_DisplayPageSelect+0xc0>)
 8002c1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c20:	611a      	str	r2, [r3, #16]
	else 									  				  BIG_BOARD_PWR_On();
}
 8002c22:	e002      	b.n	8002c2a <Task_DisplayPageSelect+0x9a>
	else 									  				  BIG_BOARD_PWR_On();
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <Task_DisplayPageSelect+0xc0>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	611a      	str	r2, [r3, #16]
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200005fc 	.word	0x200005fc
 8002c34:	20000688 	.word	0x20000688
 8002c38:	08000dc1 	.word	0x08000dc1
 8002c3c:	080029a5 	.word	0x080029a5
 8002c40:	0800277d 	.word	0x0800277d
 8002c44:	08002795 	.word	0x08002795
 8002c48:	08002b21 	.word	0x08002b21
 8002c4c:	080054f4 	.word	0x080054f4
 8002c50:	40010c00 	.word	0x40010c00

08002c54 <main>:

//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
int main(void){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0

	//***********************************************
	//Drivers.
	Sys_Init();
 8002c58:	f001 fa08 	bl	800406c <Sys_Init>
	GPIO_MCU_Init();
 8002c5c:	f7fd ff7a 	bl	8000b54 <GPIO_MCU_Init>
	DELAY_Init();
 8002c60:	f7fe fbbe 	bl	80013e0 <DELAY_Init>
	USART_Init(USART1, USART1_BRR);
 8002c64:	f641 514c 	movw	r1, #7500	; 0x1d4c
 8002c68:	481e      	ldr	r0, [pc, #120]	; (8002ce4 <main+0x90>)
 8002c6a:	f001 fb83 	bl	8004374 <USART_Init>
	//***********************************************
	//Инициализация графического дисплея LM6063D.
	DELAY_milliS(250);//Эта задержка нужна для стабилизации напряжения патания.
 8002c6e:	20fa      	movs	r0, #250	; 0xfa
 8002c70:	f7fe fbf2 	bl	8001458 <DELAY_milliS>
					  //Без задержки LCD-дисплей не работает.
	Lcd_Init();
 8002c74:	f7fe ff0e 	bl	8001a94 <Lcd_Init>
	//***********************************************
	//Инициализация Энкодера.
	Encoder.GpioPort_A 	 	= GPIOC;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <main+0x94>)
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <main+0x98>)
 8002c7c:	601a      	str	r2, [r3, #0]
	Encoder.GpioPin_A   	= 11;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <main+0x94>)
 8002c80:	220b      	movs	r2, #11
 8002c82:	605a      	str	r2, [r3, #4]
	Encoder.GpioPort_B 	 	= GPIOC;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <main+0x94>)
 8002c86:	4a19      	ldr	r2, [pc, #100]	; (8002cec <main+0x98>)
 8002c88:	609a      	str	r2, [r3, #8]
	Encoder.GpioPin_B  	 	= 12;
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <main+0x94>)
 8002c8c:	220c      	movs	r2, #12
 8002c8e:	60da      	str	r2, [r3, #12]
	Encoder.GpioPort_BUTTON = GPIOC;
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <main+0x94>)
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <main+0x98>)
 8002c94:	611a      	str	r2, [r3, #16]
	Encoder.GpioPin_BUTTON  = 10;
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <main+0x94>)
 8002c98:	220a      	movs	r2, #10
 8002c9a:	615a      	str	r2, [r3, #20]
	ENCODER_Init(&Encoder);
 8002c9c:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <main+0x94>)
 8002c9e:	f7fe fc73 	bl	8001588 <ENCODER_Init>
	//***********************************************
	//Ини-я DS2782.
	//DS2782_Init(DS2782_I2C, I2C_GPIO_NOREMAP);
	//***********************************************
	//Инициализация датчиков температуры
	Sensor_1.SENSOR_NUMBER = 1;
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <main+0x9c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	609a      	str	r2, [r3, #8]
	Sensor_2.SENSOR_NUMBER = 2;
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <main+0xa0>)
 8002caa:	2202      	movs	r2, #2
 8002cac:	609a      	str	r2, [r3, #8]
	//***********************************************
	//Инициализация I2C для работы протокола.
	PROTOCOL_MASTER_I2C_Init();
 8002cae:	f7fe f867 	bl	8000d80 <PROTOCOL_MASTER_I2C_Init>
	//***********************************************
	//Инициализация диспетчера.
	RTOS_Init();
 8002cb2:	f001 fc2f 	bl	8004514 <RTOS_Init>
	RTOS_SetTask(Lcd_Update,      0,    5);//Обновление дисплея каждые 5мс
 8002cb6:	2205      	movs	r2, #5
 8002cb8:	2100      	movs	r1, #0
 8002cba:	480f      	ldr	r0, [pc, #60]	; (8002cf8 <main+0xa4>)
 8002cbc:	f001 fc36 	bl	800452c <RTOS_SetTask>
	RTOS_SetTask(Config_SaveLoop, 0, 1000);//Проверка и сохранение конфигурации каждую 1 сек.
 8002cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	480d      	ldr	r0, [pc, #52]	; (8002cfc <main+0xa8>)
 8002cc8:	f001 fc30 	bl	800452c <RTOS_SetTask>

	RTOS_SetTask(Task_DisplayPageSelect, 0,   20);
 8002ccc:	2214      	movs	r2, #20
 8002cce:	2100      	movs	r1, #0
 8002cd0:	480b      	ldr	r0, [pc, #44]	; (8002d00 <main+0xac>)
 8002cd2:	f001 fc2b 	bl	800452c <RTOS_SetTask>
//	RTOS_SetTask(Task_Motor,     	   500, 2500);

	SysTick_Init();
 8002cd6:	f001 faad 	bl	8004234 <SysTick_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002cda:	b662      	cpsie	i
}
 8002cdc:	bf00      	nop
	__enable_irq();
	//***********************************************
	while(1)
	{
		RTOS_DispatchLoop();
 8002cde:	f001 fcb5 	bl	800464c <RTOS_DispatchLoop>
 8002ce2:	e7fc      	b.n	8002cde <main+0x8a>
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	20000658 	.word	0x20000658
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	2000060c 	.word	0x2000060c
 8002cf4:	20000624 	.word	0x20000624
 8002cf8:	08001aa1 	.word	0x08001aa1
 8002cfc:	080011dd 	.word	0x080011dd
 8002d00:	08002b91 	.word	0x08002b91

08002d04 <SysTick_IT_Handler>:
	//**************************************************************
}
//*******************************************************************************************
//*******************************************************************************************
//Прерывание каждую милисекунду.
void SysTick_IT_Handler(void){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0

	RTOS_TimerServiceLoop();
 8002d08:	f001 fce0 	bl	80046cc <RTOS_TimerServiceLoop>
	//PROTOCOL_MASTER_I2C_IncTimeoutAndReset();

	msDelay_Loop();
 8002d0c:	f7fe fb5a 	bl	80013c4 <msDelay_Loop>
	Blink_Loop();
 8002d10:	f7fe f9b0 	bl	8001074 <Blink_Loop>
	ENCODER_ScanLoop(&Encoder);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <SysTick_IT_Handler+0x1c>)
 8002d16:	f7fe fc5d 	bl	80015d4 <ENCODER_ScanLoop>
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000658 	.word	0x20000658

08002d24 <STM32_Flash_Lock>:


//*******************************************************************************************
//*******************************************************************************************
//Блокировка flash.
void STM32_Flash_Lock(void){
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0

  FLASH->CR |= FLASH_CR_LOCK;
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <STM32_Flash_Lock+0x18>)
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <STM32_Flash_Lock+0x18>)
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d32:	6113      	str	r3, [r2, #16]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40022000 	.word	0x40022000

08002d40 <STM32_Flash_Unlock>:
//*****************************************************************************
//Разблокировка работы с flash.
void STM32_Flash_Unlock(void){
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0

  FLASH->KEYR = 0x45670123;
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <STM32_Flash_Unlock+0x18>)
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <STM32_Flash_Unlock+0x1c>)
 8002d48:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = 0xCDEF89AB;
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <STM32_Flash_Unlock+0x18>)
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <STM32_Flash_Unlock+0x20>)
 8002d4e:	605a      	str	r2, [r3, #4]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	45670123 	.word	0x45670123
 8002d60:	cdef89ab 	.word	0xcdef89ab

08002d64 <STM32_Flash_ErasePage>:
//*****************************************************************************
//Стирание страницы flash.
//Перед записью необходимо стереть данные по нужным адресам,
//это особенность флеша.
//pageAddress - любой адрес, принадлежащий стираемой странице
void STM32_Flash_ErasePage(uint32_t pageAddress){
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

	while(FLASH->SR & FLASH_SR_BSY){};                     //Ждем окончания работы с памятю.
 8002d6c:	bf00      	nop
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f9      	bne.n	8002d6e <STM32_Flash_ErasePage+0xa>
	if(FLASH->SR & FLASH_SR_EOP) FLASH->SR = FLASH_SR_EOP; //Сбрасывается бит EOP записью в него единицы.
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <STM32_Flash_ErasePage+0x28>
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002d88:	2220      	movs	r2, #32
 8002d8a:	60da      	str	r2, [r3, #12]
	FLASH->CR |= FLASH_CR_PER;  //стирания страницы.
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	6113      	str	r3, [r2, #16]
	FLASH->AR  = pageAddress;   //адрес стираемой страницы.
 8002d98:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT; //Запуск выбранной операции
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da8:	6113      	str	r3, [r2, #16]
	while (!(FLASH->SR & FLASH_SR_EOP));
 8002daa:	bf00      	nop
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f9      	beq.n	8002dac <STM32_Flash_ErasePage+0x48>
	FLASH->SR  =  FLASH_SR_EOP;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002dba:	2220      	movs	r2, #32
 8002dbc:	60da      	str	r2, [r3, #12]
	FLASH->CR &= ~FLASH_CR_PER;
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <STM32_Flash_ErasePage+0x70>)
 8002dc4:	f023 0302 	bic.w	r3, r3, #2
 8002dc8:	6113      	str	r3, [r2, #16]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <STM32_Flash_WriteWord>:
//*****************************************************************************
void STM32_Flash_WriteWord(uint32_t word, uint32_t address){
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]

	while(FLASH->SR & FLASH_SR_BSY){};                     //Ждем окончания работы с памятю.
 8002de2:	bf00      	nop
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f9      	bne.n	8002de4 <STM32_Flash_WriteWord+0xc>
	if(FLASH->SR & FLASH_SR_EOP) FLASH->SR = FLASH_SR_EOP; //Сбрасывается бит EOP записью в него единицы.
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <STM32_Flash_WriteWord+0x2a>
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002dfe:	2220      	movs	r2, #32
 8002e00:	60da      	str	r2, [r3, #12]
	FLASH->CR |= FLASH_CR_PG;                              //разрешение зиписи во флеш.
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6113      	str	r3, [r2, #16]

	*(volatile unsigned short*)address = (uint16_t)word;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	b292      	uxth	r2, r2
 8002e14:	801a      	strh	r2, [r3, #0]
	while(!(FLASH->SR & FLASH_SR_EOP)){};
 8002e16:	bf00      	nop
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f9      	beq.n	8002e18 <STM32_Flash_WriteWord+0x40>
	FLASH->SR = FLASH_SR_EOP;
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e26:	2220      	movs	r2, #32
 8002e28:	60da      	str	r2, [r3, #12]

	*(volatile unsigned short*)(address + 2) = (uint16_t)(word >> 16);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0c1a      	lsrs	r2, r3, #16
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	3302      	adds	r3, #2
 8002e32:	b292      	uxth	r2, r2
 8002e34:	801a      	strh	r2, [r3, #0]
	while(!(FLASH->SR & FLASH_SR_EOP)){};
 8002e36:	bf00      	nop
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f9      	beq.n	8002e38 <STM32_Flash_WriteWord+0x60>
	FLASH->SR = FLASH_SR_EOP;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e46:	2220      	movs	r2, #32
 8002e48:	60da      	str	r2, [r3, #12]
	FLASH->CR &= ~(FLASH_CR_PG);
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <STM32_Flash_WriteWord+0x88>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6113      	str	r3, [r2, #16]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40022000 	.word	0x40022000

08002e64 <_gpio_PortXClockEnable>:

//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
static uint32_t _gpio_PortXClockEnable(GPIO_TypeDef *port){
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

	//Включение тактирования портов.
		 if(port == GPIOA) RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <_gpio_PortXClockEnable+0x5c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d106      	bne.n	8002e82 <_gpio_PortXClockEnable+0x1e>
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <_gpio_PortXClockEnable+0x60>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <_gpio_PortXClockEnable+0x60>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6193      	str	r3, [r2, #24]
 8002e80:	e017      	b.n	8002eb2 <_gpio_PortXClockEnable+0x4e>
	else if(port == GPIOB) RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <_gpio_PortXClockEnable+0x64>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d106      	bne.n	8002e98 <_gpio_PortXClockEnable+0x34>
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <_gpio_PortXClockEnable+0x60>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <_gpio_PortXClockEnable+0x60>)
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	6193      	str	r3, [r2, #24]
 8002e96:	e00c      	b.n	8002eb2 <_gpio_PortXClockEnable+0x4e>
	else if(port == GPIOC) RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <_gpio_PortXClockEnable+0x68>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d106      	bne.n	8002eae <_gpio_PortXClockEnable+0x4a>
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <_gpio_PortXClockEnable+0x60>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <_gpio_PortXClockEnable+0x60>)
 8002ea6:	f043 0310 	orr.w	r3, r3, #16
 8002eaa:	6193      	str	r3, [r2, #24]
 8002eac:	e001      	b.n	8002eb2 <_gpio_PortXClockEnable+0x4e>
	else return 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <_gpio_PortXClockEnable+0x50>
		 return 1;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40010800 	.word	0x40010800
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010c00 	.word	0x40010c00
 8002ecc:	40011000 	.word	0x40011000

08002ed0 <STM32_GPIO_InitForOutputPushPull>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void STM32_GPIO_InitForOutputPushPull(GPIO_TypeDef *port, uint32_t pin){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]

	//Включение тактирования портов.
	if(!_gpio_PortXClockEnable(port)) return;
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffc2 	bl	8002e64 <_gpio_PortXClockEnable>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d033      	beq.n	8002f4e <STM32_GPIO_InitForOutputPushPull+0x7e>
	//Конфигурация выводы в режим 50MHz output push-pull
	if(pin <= 7)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d817      	bhi.n	8002f1c <STM32_GPIO_InitForOutputPushPull+0x4c>
	{
		pin = pin * 4;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	603b      	str	r3, [r7, #0]
		port->CRL |=  (0X03 << pin);    //MODEy[1:0] - 11: Output mode, max speed 50 MHz
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2103      	movs	r1, #3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	fa01 f202 	lsl.w	r2, r1, r2
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
		port->CRL &= ~(0x03 << (pin+2));//CNFy[1:0]  - 00: General purpose output push-pull
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	3202      	adds	r2, #2
 8002f0c:	2103      	movs	r1, #3
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	43d2      	mvns	r2, r2
 8002f14:	401a      	ands	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e019      	b.n	8002f50 <STM32_GPIO_InitForOutputPushPull+0x80>
	}
	else
	{
		pin = (pin - 8) * 4;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	3b08      	subs	r3, #8
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	603b      	str	r3, [r7, #0]
		port->CRH |=  (0X03 << pin);    //MODEy[1:0] - 11: Output mode, max speed 50 MHz
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2103      	movs	r1, #3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	605a      	str	r2, [r3, #4]
		port->CRH &= ~(0x03 << (pin+2));//CNFy[1:0]  - 00: General purpose output push-pull
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	3202      	adds	r2, #2
 8002f3e:	2103      	movs	r1, #3
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	43d2      	mvns	r2, r2
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	e000      	b.n	8002f50 <STM32_GPIO_InitForOutputPushPull+0x80>
	if(!_gpio_PortXClockEnable(port)) return;
 8002f4e:	bf00      	nop
	}
}
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <__NVIC_GetPriorityGrouping+0x18>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0307 	and.w	r3, r3, #7
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db0b      	blt.n	8002f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4906      	ldr	r1, [pc, #24]	; (8002fa8 <__NVIC_EnableIRQ+0x34>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2001      	movs	r0, #1
 8002f96:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	db0a      	blt.n	8002fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	490c      	ldr	r1, [pc, #48]	; (8002ff8 <__NVIC_SetPriority+0x4c>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd4:	e00a      	b.n	8002fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4908      	ldr	r1, [pc, #32]	; (8002ffc <__NVIC_SetPriority+0x50>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	3b04      	subs	r3, #4
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	440b      	add	r3, r1
 8002fea:	761a      	strb	r2, [r3, #24]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e100 	.word	0xe000e100
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f1c3 0307 	rsb	r3, r3, #7
 800301a:	2b04      	cmp	r3, #4
 800301c:	bf28      	it	cs
 800301e:	2304      	movcs	r3, #4
 8003020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3304      	adds	r3, #4
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <NVIC_EncodePriority+0x30>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3b03      	subs	r3, #3
 800302e:	e000      	b.n	8003032 <NVIC_EncodePriority+0x32>
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	401a      	ands	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003048:	f04f 31ff 	mov.w	r1, #4294967295
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43d9      	mvns	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	4313      	orrs	r3, r2
         );
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <_i2c_LongWait>:
//*******************************************************************************************
static uint32_t I2C1NacCount = 0;
static uint32_t I2C2NacCount = 0;
//*******************************************************************************************
//*******************************************************************************************
static uint32_t _i2c_LongWait(I2C_TypeDef *i2c, uint32_t flag){
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

	uint32_t count = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
	//---------------------
	while(!(i2c->SR1 & flag))//Ждем отпускания флага.
 8003072:	e008      	b.n	8003086 <_i2c_LongWait+0x22>
	{
		if(++count >= I2C_WAIT_TIMEOUT) return 1;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003080:	d301      	bcc.n	8003086 <_i2c_LongWait+0x22>
 8003082:	2301      	movs	r3, #1
 8003084:	e006      	b.n	8003094 <_i2c_LongWait+0x30>
	while(!(i2c->SR1 & flag))//Ждем отпускания флага.
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <_i2c_LongWait+0x10>
	}
	return 0;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
	...

080030a0 <_i2c_GPIO_Init>:
//**********************************************************
static void _i2c_GPIO_Init(I2C_TypeDef *i2c, uint32_t remap){
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//Включаем тактирование GPIOB
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <_i2c_GPIO_Init+0x6c>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <_i2c_GPIO_Init+0x6c>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6193      	str	r3, [r2, #24]
	//Тактирование I2C_1
	if(i2c == I2C1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <_i2c_GPIO_Init+0x70>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d116      	bne.n	80030ec <_i2c_GPIO_Init+0x4c>
	{
		//Ремап: I2C1_SCL - PB8, I2C1_SDA - PB9.
		if(remap == I2C_GPIO_REMAP)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <_i2c_GPIO_Init+0x3e>
		{
			AFIO->MAPR |= AFIO_MAPR_I2C1_REMAP;
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <_i2c_GPIO_Init+0x74>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a12      	ldr	r2, [pc, #72]	; (8003114 <_i2c_GPIO_Init+0x74>)
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= GPIO_CRH_MODE8_1 | GPIO_CRH_MODE9_1 |
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <_i2c_GPIO_Init+0x78>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a10      	ldr	r2, [pc, #64]	; (8003118 <_i2c_GPIO_Init+0x78>)
 80030d6:	f043 03ee 	orr.w	r3, r3, #238	; 0xee
 80030da:	6053      	str	r3, [r2, #4]
	{
		//I2C2_SCL - PB10, I2C2_SDA - PB11.
		GPIOB->CRH |= GPIO_CRH_MODE10_1 | GPIO_CRH_MODE11_1 |
					  GPIO_CRH_CNF10    | GPIO_CRH_CNF11;
	}
}
 80030dc:	e010      	b.n	8003100 <_i2c_GPIO_Init+0x60>
			GPIOB->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE7_1 |
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <_i2c_GPIO_Init+0x78>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <_i2c_GPIO_Init+0x78>)
 80030e4:	f043 436e 	orr.w	r3, r3, #3992977408	; 0xee000000
 80030e8:	6013      	str	r3, [r2, #0]
}
 80030ea:	e009      	b.n	8003100 <_i2c_GPIO_Init+0x60>
	else if(i2c == I2C2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <_i2c_GPIO_Init+0x7c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d105      	bne.n	8003100 <_i2c_GPIO_Init+0x60>
		GPIOB->CRH |= GPIO_CRH_MODE10_1 | GPIO_CRH_MODE11_1 |
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <_i2c_GPIO_Init+0x78>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <_i2c_GPIO_Init+0x78>)
 80030fa:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
 80030fe:	6053      	str	r3, [r2, #4]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	40005400 	.word	0x40005400
 8003114:	40010000 	.word	0x40010000
 8003118:	40010c00 	.word	0x40010c00
 800311c:	40005800 	.word	0x40005800

08003120 <I2C_StartAndSendDeviceAddr>:
}
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//**************************Общие функции для работы с I2C***********************************
I2C_State_t I2C_StartAndSendDeviceAddr(I2C_TypeDef *i2c, uint8_t deviceAddr){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]

	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	601a      	str	r2, [r3, #0]
	if(_i2c_LongWait(i2c, I2C_SR1_SB)) //Ожидание формирования Start condition.
 8003138:	2101      	movs	r1, #1
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ff92 	bl	8003064 <_i2c_LongWait>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <I2C_StartAndSendDeviceAddr+0x2e>
	{
		(void)i2c->SR1;	//сбрасываем бит SB.
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
		return I2C_ERR_START;
 800314a:	2302      	movs	r3, #2
 800314c:	e027      	b.n	800319e <I2C_StartAndSendDeviceAddr+0x7e>
	}
	(void)i2c->SR1;			   		//Для сброса флага SB необходимо прочитать SR1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес.
	i2c->DR = deviceAddr;
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	611a      	str	r2, [r3, #16]
	if(_i2c_LongWait(i2c, I2C_SR1_ADDR))//Ожидаем окончания передачи адреса
 8003158:	2102      	movs	r1, #2
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ff82 	bl	8003064 <_i2c_LongWait>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <I2C_StartAndSendDeviceAddr+0x74>
	{
		i2c->SR1 &= ~I2C_SR1_AF; //Сброс флагов ошибок.
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	615a      	str	r2, [r3, #20]
		if(i2c == I2C1) I2C1NacCount++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <I2C_StartAndSendDeviceAddr+0x88>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d105      	bne.n	8003186 <I2C_StartAndSendDeviceAddr+0x66>
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <I2C_StartAndSendDeviceAddr+0x8c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <I2C_StartAndSendDeviceAddr+0x8c>)
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e004      	b.n	8003190 <I2C_StartAndSendDeviceAddr+0x70>
		else			I2C2NacCount++;
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <I2C_StartAndSendDeviceAddr+0x90>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <I2C_StartAndSendDeviceAddr+0x90>)
 800318e:	6013      	str	r3, [r2, #0]
		return I2C_ERR_ADDR;
 8003190:	2303      	movs	r3, #3
 8003192:	e004      	b.n	800319e <I2C_StartAndSendDeviceAddr+0x7e>
	}
	(void)i2c->SR1;	//сбрасываем бит ADDR (чтением SR1 и SR2):
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;	//
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
	return I2C_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40005400 	.word	0x40005400
 80031ac:	2000068c 	.word	0x2000068c
 80031b0:	20000690 	.word	0x20000690

080031b4 <I2C_SendByte>:
//**********************************************************
I2C_State_t I2C_SendByte(I2C_TypeDef *i2c, uint8_t byte){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]

	if(_i2c_LongWait(i2c, I2C_SR1_TXE)) return I2C_ERR_TX_BYTE;//Ждем освобождения буфера
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff4e 	bl	8003064 <_i2c_LongWait>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_SendByte+0x1e>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e003      	b.n	80031da <I2C_SendByte+0x26>
	i2c->DR = byte;
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	611a      	str	r2, [r3, #16]
	return I2C_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <I2C_ReadData>:
//**********************************************************
I2C_State_t I2C_ReadData(I2C_TypeDef *i2c, uint8_t *pBuf, uint32_t len){
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]

	//receiving 1 byte
	if(len == 1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d120      	bne.n	8003236 <I2C_ReadData+0x54>
	{
		i2c->CR1 &= ~I2C_CR1_ACK;				   //Фомирование NACK.
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]
		i2c->CR1 |= I2C_CR1_STOP;				   //Формируем Stop.
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]
		if(_i2c_LongWait(i2c, I2C_SR1_RXNE)) return I2C_ERR_RX_BYTE;//ожидаем окончания приема байта
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff ff28 	bl	8003064 <_i2c_LongWait>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_ReadData+0x3c>
 800321a:	2305      	movs	r3, #5
 800321c:	e098      	b.n	8003350 <I2C_ReadData+0x16e>
		*(pBuf + 0) = i2c->DR;				       //считали принятый байт.
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	701a      	strb	r2, [r3, #0]
		i2c->CR1 |= I2C_CR1_ACK;				   //to be ready for another reception
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e08b      	b.n	800334e <I2C_ReadData+0x16c>
	}
	//receiving 2 bytes
	else if(len == 2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d132      	bne.n	80032a2 <I2C_ReadData+0xc0>
	{
		i2c->CR1 |=  I2C_CR1_POS;//
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]
		i2c->CR1 &= ~I2C_CR1_ACK;//Фомирование NACK.
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]
		if(_i2c_LongWait(i2c, I2C_SR1_BTF)) return I2C_ERR_BTF;
 8003254:	2104      	movs	r1, #4
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ff04 	bl	8003064 <_i2c_LongWait>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_ReadData+0x84>
 8003262:	2306      	movs	r3, #6
 8003264:	e074      	b.n	8003350 <I2C_ReadData+0x16e>
		i2c->CR1 |= I2C_CR1_STOP;//Формируем Stop.
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]
		*(pBuf + 0) = i2c->DR;	 //считали принятый байт.
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	701a      	strb	r2, [r3, #0]
		*(pBuf + 1) = i2c->DR;	 //считали принятый байт.
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	3301      	adds	r3, #1
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
		i2c->CR1 &= ~I2C_CR1_POS;//
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]
		i2c->CR1 |= I2C_CR1_ACK; //to be ready for another reception
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e055      	b.n	800334e <I2C_ReadData+0x16c>
	}
	//receiving more than 2 bytes
	else
	{
		uint32_t i;
		for(i=0; i<(len-3); i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e012      	b.n	80032ce <I2C_ReadData+0xec>
		{
			if(_i2c_LongWait(i2c, I2C_SR1_RXNE)) return I2C_ERR_RX_BYTE;
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff feda 	bl	8003064 <_i2c_LongWait>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_ReadData+0xd8>
 80032b6:	2305      	movs	r3, #5
 80032b8:	e04a      	b.n	8003350 <I2C_ReadData+0x16e>
			*(pBuf + i) = i2c->DR;//Read DataN
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6919      	ldr	r1, [r3, #16]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4413      	add	r3, r2
 80032c4:	b2ca      	uxtb	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
		for(i=0; i<(len-3); i++)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d3e7      	bcc.n	80032a8 <I2C_ReadData+0xc6>
		}
		//Вычитываем оставшиеся 3 байта.
		if(_i2c_LongWait(i2c, I2C_SR1_BTF)) return I2C_ERR_BTF;
 80032d8:	2104      	movs	r1, #4
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fec2 	bl	8003064 <_i2c_LongWait>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_ReadData+0x108>
 80032e6:	2306      	movs	r3, #6
 80032e8:	e032      	b.n	8003350 <I2C_ReadData+0x16e>
		i2c->CR1 &= ~I2C_CR1_ACK; //Фомирование NACK
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]
		*(pBuf + i + 0) = i2c->DR;//Read DataN-2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4413      	add	r3, r2
 8003300:	b2ca      	uxtb	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]
		i2c->CR1 |= I2C_CR1_STOP; //Формируем Stop
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]
		*(pBuf + i + 1) = i2c->DR;//Read DataN-1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6919      	ldr	r1, [r3, #16]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3301      	adds	r3, #1
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	4413      	add	r3, r2
 800331c:	b2ca      	uxtb	r2, r1
 800331e:	701a      	strb	r2, [r3, #0]
		if(_i2c_LongWait(i2c, I2C_SR1_RXNE)) return I2C_ERR_RX_BYTE;
 8003320:	2140      	movs	r1, #64	; 0x40
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fe9e 	bl	8003064 <_i2c_LongWait>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_ReadData+0x150>
 800332e:	2305      	movs	r3, #5
 8003330:	e00e      	b.n	8003350 <I2C_ReadData+0x16e>
		*(pBuf + i + 2) = i2c->DR;//Read DataN
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3302      	adds	r3, #2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	b2ca      	uxtb	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
		i2c->CR1 |= I2C_CR1_ACK;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	601a      	str	r2, [r3, #0]
	}
	return I2C_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_Stop>:
//**********************************************************
I2C_State_t I2C_Stop(I2C_TypeDef *i2c){
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

	if(_i2c_LongWait(i2c, I2C_SR1_BTF)) return I2C_ERR_BTF;
 8003360:	2104      	movs	r1, #4
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff fe7e 	bl	8003064 <_i2c_LongWait>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_Stop+0x1a>
 800336e:	2306      	movs	r3, #6
 8003370:	e006      	b.n	8003380 <I2C_Stop+0x28>
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
	return I2C_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_SendDataWithoutStop>:
//**********************************************************
I2C_State_t I2C_SendDataWithoutStop(I2C_TypeDef *i2c, uint8_t *pBuf, uint32_t len){
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]

	uint32_t err;
	//---------------------
	for(uint32_t i = 0; i < len; i++)
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e012      	b.n	80033c0 <I2C_SendDataWithoutStop+0x38>
	{
		err = I2C_SendByte(i2c, *(pBuf + i));
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff ff05 	bl	80031b4 <I2C_SendByte>
 80033aa:	4603      	mov	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]
		if(err != I2C_OK) return err;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <I2C_SendDataWithoutStop+0x32>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e010      	b.n	80033dc <I2C_SendDataWithoutStop+0x54>
	for(uint32_t i = 0; i < len; i++)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d3e8      	bcc.n	800339a <I2C_SendDataWithoutStop+0x12>
	}
	//Ждем освобождения буфера
	if(_i2c_LongWait(i2c, I2C_SR1_TXE)) return I2C_ERR_TX_BYTE;
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff fe4a 	bl	8003064 <_i2c_LongWait>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_SendDataWithoutStop+0x52>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e000      	b.n	80033dc <I2C_SendDataWithoutStop+0x54>
	//if(_i2c_LongWait(i2c, I2C_SR1_BTF)) return I2C_ERR_BTF;
	return I2C_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_SendData>:
//**********************************************************
I2C_State_t I2C_SendData(I2C_TypeDef *i2c, uint8_t *pBuf, uint32_t len){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]

	uint32_t err;
	//---------------------
	err = I2C_SendDataWithoutStop(i2c, pBuf, len);
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ffc7 	bl	8003388 <I2C_SendDataWithoutStop>
 80033fa:	4603      	mov	r3, r0
 80033fc:	617b      	str	r3, [r7, #20]
	if(err != I2C_OK) return err;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <I2C_SendData+0x26>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	e003      	b.n	8003412 <I2C_SendData+0x2e>
	return I2C_Stop(i2c);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7ff ffa4 	bl	8003358 <I2C_Stop>
 8003410:	4603      	mov	r3, r0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <I2C_Master_Init>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//**************************Функции для работы в режиме Master*******************************
void I2C_Master_Init(I2C_TypeDef *i2c, uint32_t remap){
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]

	_i2c_GPIO_Init(i2c, remap);
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fe39 	bl	80030a0 <_i2c_GPIO_Init>
	//Инициализация I2C.
	if(i2c == I2C1) RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;//Вкл. тактирования модуля I2C
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <I2C_Master_Init+0xb4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d106      	bne.n	8003444 <I2C_Master_Init+0x28>
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <I2C_Master_Init+0xb8>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <I2C_Master_Init+0xb8>)
 800343c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003440:	61d3      	str	r3, [r2, #28]
 8003442:	e005      	b.n	8003450 <I2C_Master_Init+0x34>
	else		    RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8003444:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <I2C_Master_Init+0xb8>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <I2C_Master_Init+0xb8>)
 800344a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800344e:	61d3      	str	r3, [r2, #28]
	i2c->CR1 &= ~I2C_CR1_PE;   //Откл. модуля I2C.
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 0201 	bic.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	601a      	str	r2, [r3, #0]
	i2c->CR1 |=  I2C_CR1_SWRST;//Программный сброс модуля I2C
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
	i2c->CR1 &= ~I2C_CR1_SWRST;//Это нужно для востановления работоспособноси после КЗ на линии.
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]
	i2c->SR2 |=  I2C_SR2_MSL;  //режим MASTER.
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
	//Скорость работы.
	i2c->CR2  = 0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (I2C_FREQ << I2C_CR2_FREQ_Pos);//APB1 = 36MHz
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]
	i2c->CCR  = 0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	61da      	str	r2, [r3, #28]
	//FastMode(400kHz)
	i2c->CCR   |=  I2C_CCR_FS; //1 - режим FastMode(400kHz).
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	61da      	str	r2, [r3, #28]
	i2c->CCR   |= (I2C_FM_CCR << I2C_CCR_CCR_Pos);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f043 021e 	orr.w	r2, r3, #30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	61da      	str	r2, [r3, #28]
	i2c->TRISE |= (I2C_FM_TRISE << I2C_TRISE_TRISE_Pos);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f043 020c 	orr.w	r2, r3, #12
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]
	//StandartMode(100kHz).
//	i2c->CCR   &= ~I2C_CCR_FS; //0 - режим STANDART(100kHz).
//	i2c->CCR   |= (I2C_SM_CCR << I2C_CCR_CCR_Pos);
//	i2c->TRISE |= (I2C_SM_TRISE << I2C_TRISE_TRISE_Pos);
	//Включение модуля I2C.
	i2c->CR1 |= I2C_CR1_PE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40005400 	.word	0x40005400
 80034d4:	40021000 	.word	0x40021000

080034d8 <I2C_Master_GetNacCount>:
//**********************************************************
uint32_t I2C_Master_GetNacCount(I2C_TypeDef *i2c){
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

	if(i2c == I2C1) return I2C1NacCount;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a06      	ldr	r2, [pc, #24]	; (80034fc <I2C_Master_GetNacCount+0x24>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d102      	bne.n	80034ee <I2C_Master_GetNacCount+0x16>
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <I2C_Master_GetNacCount+0x28>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e001      	b.n	80034f2 <I2C_Master_GetNacCount+0x1a>
					return I2C2NacCount;
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <I2C_Master_GetNacCount+0x2c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40005400 	.word	0x40005400
 8003500:	2000068c 	.word	0x2000068c
 8003504:	20000690 	.word	0x20000690

08003508 <I2C_Master_Write>:
 *  	  *pBuf      - указать на буфер передачи,
 *  	  len		 - размер буфера передачи.
 *
 *  Выход: статус передачи I2C_State_t.
 */
I2C_State_t I2C_Master_Write(I2C_TypeDef *i2c, uint8_t deviceAddr, uint8_t regAddr, uint8_t *pBuf, uint32_t len){
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	72fb      	strb	r3, [r7, #11]
 8003516:	4613      	mov	r3, r2
 8003518:	72bb      	strb	r3, [r7, #10]

	//Формирование Start + AddrSlave|Write.
	if(I2C_StartAndSendDeviceAddr(i2c, deviceAddr|I2C_MODE_WRITE) != I2C_OK) return I2C_ERR_ADDR;
 800351a:	7afb      	ldrb	r3, [r7, #11]
 800351c:	4619      	mov	r1, r3
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff fdfe 	bl	8003120 <I2C_StartAndSendDeviceAddr>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_Master_Write+0x26>
 800352a:	2303      	movs	r3, #3
 800352c:	e011      	b.n	8003552 <I2C_Master_Write+0x4a>

	//Передача адреса в который хотим записать.
	i2c->DR = regAddr;
 800352e:	7aba      	ldrb	r2, [r7, #10]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	611a      	str	r2, [r3, #16]
	if(_i2c_LongWait(i2c, I2C_SR1_TXE)) return I2C_ERR_TX_BYTE;
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fd94 	bl	8003064 <_i2c_LongWait>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_Master_Write+0x3e>
 8003542:	2304      	movs	r3, #4
 8003544:	e005      	b.n	8003552 <I2C_Master_Write+0x4a>

	//передача данных на запись.
	return(I2C_SendData(i2c, pBuf, len));
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff4a 	bl	80033e4 <I2C_SendData>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <I2C_Master_Read>:
 *  	  *pBuf      - указать на буфер приема,
 *  	  len		 - размер буфера приема.
 *
 *  Выход: статус передачи I2C_State_t.
 */
I2C_State_t I2C_Master_Read(I2C_TypeDef *i2c, uint8_t deviceAddr, uint8_t regAddr, uint8_t *pBuf, uint32_t len){
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	72fb      	strb	r3, [r7, #11]
 8003568:	4613      	mov	r3, r2
 800356a:	72bb      	strb	r3, [r7, #10]

	//if(I2C_DMA_State() != I2C_DMA_READY) return I2C_BUSY;

	//Формирование Start + AddrSlave|Write.
	if(I2C_StartAndSendDeviceAddr(i2c, deviceAddr|I2C_MODE_WRITE) != I2C_OK) return I2C_ERR_ADDR;
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	4619      	mov	r1, r3
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff fdd5 	bl	8003120 <I2C_StartAndSendDeviceAddr>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <I2C_Master_Read+0x26>
 800357c:	2303      	movs	r3, #3
 800357e:	e024      	b.n	80035ca <I2C_Master_Read+0x70>

	//Передача адреса с которого начинаем чтение.
	i2c->DR = regAddr;
 8003580:	7aba      	ldrb	r2, [r7, #10]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	611a      	str	r2, [r3, #16]
	if(_i2c_LongWait(i2c, I2C_SR1_TXE)) return I2C_ERR_TX_BYTE;
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fd6b 	bl	8003064 <_i2c_LongWait>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <I2C_Master_Read+0x3e>
 8003594:	2304      	movs	r3, #4
 8003596:	e018      	b.n	80035ca <I2C_Master_Read+0x70>
	//---------------------
	//Формирование reStart condition.
	i2c->CR1 |= I2C_CR1_STOP; //Это команда нужна для работы с DS2782. Без нее не работает
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

	//Формирование Start + AddrSlave|Read.
	if(I2C_StartAndSendDeviceAddr(i2c, deviceAddr|I2C_MODE_READ) != I2C_OK) return I2C_ERR_ADDR;
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	4619      	mov	r1, r3
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7ff fdb6 	bl	8003120 <I2C_StartAndSendDeviceAddr>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_Master_Read+0x64>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e005      	b.n	80035ca <I2C_Master_Read+0x70>

	//прием даннных
	return(I2C_ReadData(i2c, pBuf, len));
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff fe0d 	bl	80031e2 <I2C_ReadData>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <I2C_Slave_Init>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void I2C_Slave_Init(I2C_TypeDef *i2c, uint32_t remap, uint32_t slaveAddr){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

	_i2c_GPIO_Init(i2c, remap);
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff fd5c 	bl	80030a0 <_i2c_GPIO_Init>

	if(i2c == I2C1) RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a28      	ldr	r2, [pc, #160]	; (800368c <I2C_Slave_Init+0xb8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d106      	bne.n	80035fe <I2C_Slave_Init+0x2a>
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <I2C_Slave_Init+0xbc>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4a26      	ldr	r2, [pc, #152]	; (8003690 <I2C_Slave_Init+0xbc>)
 80035f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035fa:	61d3      	str	r3, [r2, #28]
 80035fc:	e005      	b.n	800360a <I2C_Slave_Init+0x36>
	else		    RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <I2C_Slave_Init+0xbc>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a23      	ldr	r2, [pc, #140]	; (8003690 <I2C_Slave_Init+0xbc>)
 8003604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003608:	61d3      	str	r3, [r2, #28]
	//Инициализация I2C в режиме Slave.
	i2c->CR1 |=  I2C_CR1_PE;    //Включение модуля I2C1.
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	601a      	str	r2, [r3, #0]
	i2c->CR1 &= ~I2C_CR1_SMBUS; //модуль работает в режиме I2C
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0202 	bic.w	r2, r3, #2
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	601a      	str	r2, [r3, #0]
	i2c->SR2 &= ~I2C_SR2_MSL;   //режим Slave.
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]
	i2c->SR1  = 0; 			    //Сброс флагов ошибок.
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]

	i2c->OAR1 = slaveAddr << 1; //адрес устройства на шине.
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	005a      	lsls	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]
	i2c->CR1 |= I2C_CR1_ACK;	//разрешаем отправлять ACK/NACK после приема байта адреса.
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]
	//Скорость работы.
	i2c->CR2  = 0;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (I2C_FREQ << I2C_CR2_FREQ_Pos);//APB1 = 36MHz
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	605a      	str	r2, [r3, #4]
	i2c->CCR  = 0;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	61da      	str	r2, [r3, #28]
	//FastMode(400kHz)
	i2c->CCR   |=  I2C_CCR_FS; //1 - режим FastMode(400kHz), 0 - режим STANDART(100kHz).
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	61da      	str	r2, [r3, #28]
	i2c->CCR   |= (I2C_FM_CCR << I2C_CCR_CCR_Pos);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f043 021e 	orr.w	r2, r3, #30
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	61da      	str	r2, [r3, #28]
	i2c->TRISE |= (I2C_FM_TRISE << I2C_TRISE_TRISE_Pos);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f043 020c 	orr.w	r2, r3, #12
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	621a      	str	r2, [r3, #32]
//	i2c->CCR   &= ~I2C_CCR_FS; //1 - режим FastMode(400kHz), 0 - режим STANDART(100kHz).
//	i2c->CCR   |= (I2C_SM_CCR << I2C_CCR_CCR_Pos);
//	i2c->TRISE |= (I2C_SM_TRISE << I2C_TRISE_TRISE_Pos);
	//Включение модуля I2C.
//	i2c->CR1 |= I2C_CR1_PE;
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40005400 	.word	0x40005400
 8003690:	40021000 	.word	0x40021000

08003694 <I2C_IT_Init>:
 */
static I2C_IT_t	*i2c1_IT_Define;
static I2C_IT_t	*i2c2_IT_Define;
//*******************************************************************************************
//*******************************************************************************************
void I2C_IT_Init(I2C_IT_t *i2cIt){
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

		 if(i2cIt->i2c == I2C1)  i2c1_IT_Define = i2cIt;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <I2C_IT_Init+0xa8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d103      	bne.n	80036ae <I2C_IT_Init+0x1a>
 80036a6:	4a26      	ldr	r2, [pc, #152]	; (8003740 <I2C_IT_Init+0xac>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e007      	b.n	80036be <I2C_IT_Init+0x2a>
	else if(i2cIt->i2c == I2C2)  i2c2_IT_Define = i2cIt;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a24      	ldr	r2, [pc, #144]	; (8003744 <I2C_IT_Init+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d13c      	bne.n	8003732 <I2C_IT_Init+0x9e>
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <I2C_IT_Init+0xb4>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6013      	str	r3, [r2, #0]
	else return;

	if(i2cIt->i2cMode == I2C_MODE_MASTER) I2C_Master_Init(i2cIt->i2c, i2cIt->gpioRemap);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <I2C_IT_Init+0x44>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7ff fea3 	bl	800341c <I2C_Master_Init>
 80036d6:	e008      	b.n	80036ea <I2C_IT_Init+0x56>
	else								  I2C_Slave_Init (i2cIt->i2c, i2cIt->gpioRemap, i2cIt->slaveAddr);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6899      	ldr	r1, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	461a      	mov	r2, r3
 80036e6:	f7ff ff75 	bl	80035d4 <I2C_Slave_Init>
	//Инициализация прерывания.
	i2cIt->i2c->CR2 |= I2C_CR2_ITEVTEN | //Разрешение прерывания по событию.
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80036f8:	605a      	str	r2, [r3, #4]
					   I2C_CR2_ITERREN;  //Разрешение прерывания по ошибкам.

	if(i2cIt->i2c == I2C1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	; (800373c <I2C_IT_Init+0xa8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d107      	bne.n	8003714 <I2C_IT_Init+0x80>
	{
//		NVIC_SetPriority(I2C1_EV_IRQn, 15);//Приоритет прерывания.
		NVIC_SetPriority(I2C1_ER_IRQn, 2);//Приоритет прерывания.
 8003704:	2102      	movs	r1, #2
 8003706:	2020      	movs	r0, #32
 8003708:	f7ff fc50 	bl	8002fac <__NVIC_SetPriority>

//		NVIC_EnableIRQ(I2C1_EV_IRQn);      //Разрешаем прерывание.
		NVIC_EnableIRQ(I2C1_ER_IRQn);      //Разрешаем прерывание.
 800370c:	2020      	movs	r0, #32
 800370e:	f7ff fc31 	bl	8002f74 <__NVIC_EnableIRQ>
 8003712:	e00f      	b.n	8003734 <I2C_IT_Init+0xa0>
	}
	else
	{
		NVIC_SetPriority(I2C2_EV_IRQn, 2);//Приоритет прерывания.
 8003714:	2102      	movs	r1, #2
 8003716:	2021      	movs	r0, #33	; 0x21
 8003718:	f7ff fc48 	bl	8002fac <__NVIC_SetPriority>
		NVIC_SetPriority(I2C2_ER_IRQn, 2);//Приоритет прерывания.
 800371c:	2102      	movs	r1, #2
 800371e:	2022      	movs	r0, #34	; 0x22
 8003720:	f7ff fc44 	bl	8002fac <__NVIC_SetPriority>

		NVIC_EnableIRQ(I2C2_EV_IRQn);      //Разрешаем прерывание.
 8003724:	2021      	movs	r0, #33	; 0x21
 8003726:	f7ff fc25 	bl	8002f74 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(I2C2_ER_IRQn);      //Разрешаем прерывание.
 800372a:	2022      	movs	r0, #34	; 0x22
 800372c:	f7ff fc22 	bl	8002f74 <__NVIC_EnableIRQ>
 8003730:	e000      	b.n	8003734 <I2C_IT_Init+0xa0>
	else return;
 8003732:	bf00      	nop
	}
	//Включение модуля I2C.
	//i2cIt->i2c->CR1 |= I2C_CR1_PE;
}
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40005400 	.word	0x40005400
 8003740:	20000694 	.word	0x20000694
 8003744:	40005800 	.word	0x40005800
 8003748:	20000698 	.word	0x20000698

0800374c <_i2c_ClearErrFlagAndStop>:
		return;
	}
	//------------------------------
}
//**********************************************************
void _i2c_ClearErrFlagAndStop(I2C_TypeDef *i2c, uint32_t flag){
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]

	i2c->SR1 &= ~(flag); 	   //Сброс флага ошибки.
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	43db      	mvns	r3, r3
 800375e:	401a      	ands	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	615a      	str	r2, [r3, #20]
	i2c->CR1 |= I2C_CR1_STOP | //Формируем Stop
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
				I2C_CR1_ACK;   //to be ready for another reception
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <I2C_IT_Error>:

//Обработчик прерывания ошибок I2C
static void I2C_IT_Error(I2C_IT_t *i2cIt){
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]

	I2C_TypeDef *i2c = i2cIt->i2c;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
	//LedPC13Toggel();
	//------------------------------
	//NACK - Acknowledge failure
	if(i2c->SR1 & I2C_SR1_AF)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <I2C_IT_Error+0x26>
//			i2cIt->txBufIndex = 0;
//		}

//		i2c->SR1 &= ~I2C_SR1_AF; //Сброс AF.
//		i2c->CR1 |= I2C_CR1_STOP;//Формируем Stop
		_i2c_ClearErrFlagAndStop(i2c, I2C_SR1_AF);
 8003794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff ffd7 	bl	800374c <_i2c_ClearErrFlagAndStop>
		return;
 800379e:	e044      	b.n	800382a <I2C_IT_Error+0xb0>
	}
	//------------------------------
	//Bus error
	if(i2c->SR1 & I2C_SR1_BERR)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <I2C_IT_Error+0x3c>
	{
		//i2c->SR1 &= ~I2C_SR1_BERR; //Сброс BERR.
		_i2c_ClearErrFlagAndStop(i2c, I2C_SR1_BERR);
 80037ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff ffcb 	bl	800374c <_i2c_ClearErrFlagAndStop>
	}
	//------------------------------
	//Arbitration loss (Master)
	if(i2c->SR1 & I2C_SR1_ARLO)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <I2C_IT_Error+0x52>
	{
		//i2c->SR1 &= ~I2C_SR1_ARLO; //Сброс ARLO.
		_i2c_ClearErrFlagAndStop(i2c, I2C_SR1_ARLO);
 80037c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff ffc0 	bl	800374c <_i2c_ClearErrFlagAndStop>
	}
	//------------------------------
	//Overrun/Underrun
	if(i2c->SR1 & I2C_SR1_OVR)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <I2C_IT_Error+0x68>
	{
		//i2c->SR1 &= ~I2C_SR1_OVR; //Сброс OVR.
		_i2c_ClearErrFlagAndStop(i2c, I2C_SR1_OVR);
 80037d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7ff ffb5 	bl	800374c <_i2c_ClearErrFlagAndStop>
	}
	//------------------------------
	//PEC error
	if(i2c->SR1 & I2C_SR1_PECERR)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <I2C_IT_Error+0x80>
	{
		i2c->SR1 &= ~I2C_SR1_PECERR; //Сброс PECERR.
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	615a      	str	r2, [r3, #20]
	}
	//------------------------------
	//Timeout/Tlow error
	if(i2c->SR1 & I2C_SR1_TIMEOUT)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <I2C_IT_Error+0x98>
	{
		i2c->SR1 &= ~I2C_SR1_TIMEOUT; //Сброс TIMEOUT.
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	615a      	str	r2, [r3, #20]
	}
	//------------------------------
	//SMBus Alert
	if(i2c->SR1 & I2C_SR1_SMBALERT)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <I2C_IT_Error+0xb0>
	{
		i2c->SR1 &= ~I2C_SR1_SMBALERT; //Сброс SMBALERT.
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	615a      	str	r2, [r3, #20]
	}
	//------------------------------
}
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_IT_ER_Handler>:

	if(i2c == I2C1) I2C_IT_Event(i2c1_IT_Define);
	else			I2C_IT_Event(i2c2_IT_Define);
}
//Обработчик прерывания ошибок I2C
void I2C_IT_ER_Handler(I2C_TypeDef *i2c){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

	if(i2c == I2C1) I2C_IT_Error(i2c1_IT_Define);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <I2C_IT_ER_Handler+0x30>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d105      	bne.n	800384c <I2C_IT_ER_Handler+0x1c>
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <I2C_IT_ER_Handler+0x34>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff98 	bl	800377a <I2C_IT_Error>
	else			I2C_IT_Error(i2c2_IT_Define);
}
 800384a:	e004      	b.n	8003856 <I2C_IT_ER_Handler+0x26>
	else			I2C_IT_Error(i2c2_IT_Define);
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <I2C_IT_ER_Handler+0x38>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff92 	bl	800377a <I2C_IT_Error>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40005400 	.word	0x40005400
 8003864:	20000694 	.word	0x20000694
 8003868:	20000698 	.word	0x20000698

0800386c <I2C_DMA_Init>:
//I2C2_TX -> DMA1_Ch4
//I2C2_RX -> DMA1_Ch5

//static volatile I2C_DMA_State_t I2cDmaStateReg = I2C_DMA_NOT_INIT;
//*******************************************************************************************
void I2C_DMA_Init(I2C_IT_t *i2cIt){
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

	I2C_IT_Init(i2cIt);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff0d 	bl	8003694 <I2C_IT_Init>
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;//Enable the peripheral clock DMA1
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <I2C_DMA_Init+0x28>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <I2C_DMA_Init+0x28>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6153      	str	r3, [r2, #20]
	i2cIt->DMAState = I2C_DMA_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000

08003898 <I2C_DMA_Read>:
	i2cIt->DMAState = I2C_DMA_BUSY;
	__enable_irq();
	return I2C_DMA_BUSY;
}
//**********************************************************
uint32_t I2C_DMA_Read (I2C_IT_t *i2cIt){
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

	DMA_Channel_TypeDef *dma;
	I2C_TypeDef *i2c = i2cIt->i2c;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	613b      	str	r3, [r7, #16]
	//------------------------------
	if(i2cIt->DMAState != I2C_DMA_READY) return I2C_DMA_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_DMA_Read+0x1a>
 80038ae:	2303      	movs	r3, #3
 80038b0:	e05e      	b.n	8003970 <I2C_DMA_Read+0xd8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038b2:	b672      	cpsid	i
}
 80038b4:	bf00      	nop

	__disable_irq();
	//DMA1Channel config
	if(i2c == I2C1) dma = DMA1_Channel7;//I2C1_RX -> DMA1_Ch7
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <I2C_DMA_Read+0xe0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d102      	bne.n	80038c4 <I2C_DMA_Read+0x2c>
 80038be:	4b2f      	ldr	r3, [pc, #188]	; (800397c <I2C_DMA_Read+0xe4>)
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e001      	b.n	80038c8 <I2C_DMA_Read+0x30>
	else			dma = DMA1_Channel5;//I2C2_RX -> DMA1_Ch5
 80038c4:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <I2C_DMA_Read+0xe8>)
 80038c6:	617b      	str	r3, [r7, #20]

	dma->CCR  &= ~DMA_CCR_EN;		  	 	//Channel disable
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 0201 	bic.w	r2, r3, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	601a      	str	r2, [r3, #0]
	dma->CPAR  = (uint32_t)&(i2c->DR);	 	//Peripheral address.
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	3310      	adds	r3, #16
 80038d8:	461a      	mov	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	609a      	str	r2, [r3, #8]
	dma->CMAR  = (uint32_t)i2cIt->pRxBuf; 	//Memory address.
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3368      	adds	r3, #104	; 0x68
 80038e2:	461a      	mov	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	60da      	str	r2, [r3, #12]
	dma->CNDTR = i2cIt->rxBufSize;	  	 	//Data size.
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	605a      	str	r2, [r3, #4]
	dma->CCR   = (3 << DMA_CCR_PL_Pos)   | 	//PL[1:0]: Channel priority level - 11: Very high.
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f243 0282 	movw	r2, #12418	; 0x3082
 80038f8:	601a      	str	r2, [r3, #0]
				 //DMA_CCR_HTIE | 		    //HTIE: Half transfer interrupt enable
				 DMA_CCR_TCIE;// | 		    //TCIE: Transfer complete interrupt enable
				//DMA_CCR_EN;			    //EN: Channel enable

	//NVIC_SetPriority(DMA1_Channel7_IRQn, 1);//Set priority
	NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 80038fa:	f7ff fb2d 	bl	8002f58 <__NVIC_GetPriorityGrouping>
 80038fe:	4603      	mov	r3, r0
 8003900:	2200      	movs	r2, #0
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fb7b 	bl	8003000 <NVIC_EncodePriority>
 800390a:	4603      	mov	r3, r0
 800390c:	4619      	mov	r1, r3
 800390e:	2011      	movs	r0, #17
 8003910:	f7ff fb4c 	bl	8002fac <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);     //Enable DMA1_Channel6_IRQn
 8003914:	2011      	movs	r0, #17
 8003916:	f7ff fb2d 	bl	8002f74 <__NVIC_EnableIRQ>

//	i2c->CR2 |= I2C_CR2_DMAEN | //DMA Requests Enable.
//				I2C_CR2_LAST;	//DMA Last Transfer.
	//Формирование Start + AddrSlave|Write.
	uint32_t err = I2C_StartAndSendDeviceAddr(i2c, i2cIt->slaveAddr|I2C_MODE_READ);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	4619      	mov	r1, r3
 8003928:	6938      	ldr	r0, [r7, #16]
 800392a:	f7ff fbf9 	bl	8003120 <I2C_StartAndSendDeviceAddr>
 800392e:	4603      	mov	r3, r0
 8003930:	60fb      	str	r3, [r7, #12]
	if(err != I2C_OK)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <I2C_DMA_Read+0xa8>
  __ASM volatile ("cpsie i" : : : "memory");
 8003938:	b662      	cpsie	i
}
 800393a:	bf00      	nop
	{
		__enable_irq();
		return I2C_DMA_ERR;
 800393c:	2304      	movs	r3, #4
 800393e:	e017      	b.n	8003970 <I2C_DMA_Read+0xd8>
	}
	i2c->CR2 |= I2C_CR2_DMAEN | //DMA Requests Enable.
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f443 52c0 	orr.w	r2, r3, #6144	; 0x1800
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	605a      	str	r2, [r3, #4]
				I2C_CR2_LAST;	//DMA Last Transfer.
	i2c->CR1 |= I2C_CR1_ACK;    //to be ready for another reception
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	601a      	str	r2, [r3, #0]
	dma->CCR |= DMA_CCR_EN;//DMA Channel enable
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f043 0201 	orr.w	r2, r3, #1
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	601a      	str	r2, [r3, #0]
	i2cIt->DMAState = I2C_DMA_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2203      	movs	r2, #3
 8003968:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 800396a:	b662      	cpsie	i
}
 800396c:	bf00      	nop
	__enable_irq();
	return I2C_DMA_BUSY;
 800396e:	2303      	movs	r3, #3
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40005400 	.word	0x40005400
 800397c:	40020080 	.word	0x40020080
 8003980:	40020058 	.word	0x40020058

08003984 <DMA_ChDisableAndITFlagClear>:

//I2C2_TX -> DMA1_Ch4
//I2C2_RX -> DMA1_Ch5

//**********************************************************
static void DMA_ChDisableAndITFlagClear(DMA_Channel_TypeDef *dma, uint32_t flag){
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]

	DMA1->IFCR |=  flag;      //сбросить флаг окончания обмена.
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <DMA_ChDisableAndITFlagClear+0x2c>)
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4907      	ldr	r1, [pc, #28]	; (80039b0 <DMA_ChDisableAndITFlagClear+0x2c>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
	dma->CCR   &= ~DMA_CCR_EN;//отключение канала DMA.
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	40020000 	.word	0x40020000

080039b4 <I2C_DMA_TX_Handler>:
//**********************************************************
static void I2C_DMA_TX_Handler(I2C_IT_t *i2cIt){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

	//-------------------------
	//Обмен завершен.
	if(DMA1->ISR & DMA_ISR_TCIF6)
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <I2C_DMA_TX_Handler+0x80>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <I2C_DMA_TX_Handler+0x44>
	{
		DMA_ChDisableAndITFlagClear(DMA1_Channel6, DMA_IFCR_CTCIF6);
 80039c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039cc:	481a      	ldr	r0, [pc, #104]	; (8003a38 <I2C_DMA_TX_Handler+0x84>)
 80039ce:	f7ff ffd9 	bl	8003984 <DMA_ChDisableAndITFlagClear>
		//Ожидаем окончания передачи последних байтов.
		while(!(i2cIt->i2c->SR1 & I2C_SR1_BTF)){};//Ждем отпускания флага.
 80039d2:	bf00      	nop
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f8      	beq.n	80039d4 <I2C_DMA_TX_Handler+0x20>
		i2cIt->i2c->CR1 |= I2C_CR1_STOP | //Формируем Stop
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80039f0:	601a      	str	r2, [r3, #0]
					       I2C_CR1_ACK;
		i2cIt->DMAState = I2C_DMA_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
	}
	//-------------------------
	//Передана половина буфера
	if(DMA1->ISR & DMA_ISR_HTIF6)
 80039f8:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <I2C_DMA_TX_Handler+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <I2C_DMA_TX_Handler+0x5c>
	{
		DMA1->IFCR |= DMA_IFCR_CHTIF6;//сбросить флаг.
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <I2C_DMA_TX_Handler+0x80>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <I2C_DMA_TX_Handler+0x80>)
 8003a0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a0e:	6053      	str	r3, [r2, #4]
	}
	//-------------------------
	//Произошла ошибка при обмене
	if(DMA1->ISR & DMA_ISR_TEIF6)
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <I2C_DMA_TX_Handler+0x80>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <I2C_DMA_TX_Handler+0x78>
	{
		DMA_ChDisableAndITFlagClear(DMA1_Channel6 ,DMA_IFCR_CTEIF6);
 8003a1c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003a20:	4805      	ldr	r0, [pc, #20]	; (8003a38 <I2C_DMA_TX_Handler+0x84>)
 8003a22:	f7ff ffaf 	bl	8003984 <DMA_ChDisableAndITFlagClear>
		i2cIt->DMAState = I2C_DMA_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	611a      	str	r2, [r3, #16]
	}
	//-------------------------

}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40020000 	.word	0x40020000
 8003a38:	4002006c 	.word	0x4002006c

08003a3c <I2C_DMA_RX_Handler>:
//**********************************************************
static void I2C_DMA_RX_Handler(I2C_IT_t *i2cIt){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

	//-------------------------
	//Обмен завершен.
	if(DMA1->ISR & DMA_ISR_TCIF7)
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <I2C_DMA_RX_Handler+0x74>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <I2C_DMA_RX_Handler+0x3c>
	{
		DMA_ChDisableAndITFlagClear(DMA1_Channel7, DMA_IFCR_CTCIF7);
 8003a50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a54:	4817      	ldr	r0, [pc, #92]	; (8003ab4 <I2C_DMA_RX_Handler+0x78>)
 8003a56:	f7ff ff95 	bl	8003984 <DMA_ChDisableAndITFlagClear>
//		{
//			I2C1->CR1 |= I2C_CR1_STOP | //Формируем Stop
//					     I2C_CR1_ACK;
//		}

		i2cIt->i2c->CR1 |= I2C_CR1_STOP | //Формируем Stop
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003a68:	601a      	str	r2, [r3, #0]
				           I2C_CR1_ACK;

		i2cIt->i2cSlaveRxCpltCallback();
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a70:	4798      	blx	r3

		i2cIt->DMAState = I2C_DMA_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
	}
	//-------------------------
	//Передана половина буфера
	if(DMA1->ISR & DMA_ISR_HTIF7)
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <I2C_DMA_RX_Handler+0x74>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <I2C_DMA_RX_Handler+0x54>
	{
		DMA1->IFCR |= DMA_IFCR_CHTIF7;//сбросить флаг.
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <I2C_DMA_RX_Handler+0x74>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <I2C_DMA_RX_Handler+0x74>)
 8003a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8e:	6053      	str	r3, [r2, #4]
	}
	//-------------------------
	//Произошла ошибка при обмене
	if(DMA1->ISR & DMA_ISR_TEIF7)
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <I2C_DMA_RX_Handler+0x74>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <I2C_DMA_RX_Handler+0x6a>
	{
		DMA_ChDisableAndITFlagClear(DMA1_Channel7, DMA_IFCR_CTEIF7);
 8003a9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003aa0:	4804      	ldr	r0, [pc, #16]	; (8003ab4 <I2C_DMA_RX_Handler+0x78>)
 8003aa2:	f7ff ff6f 	bl	8003984 <DMA_ChDisableAndITFlagClear>
		//i2cIt->i2cDmaState = I2C_DMA_READY;
	}
	//-------------------------
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40020080 	.word	0x40020080

08003ab8 <I2C1_DMA_IT_TX_Handler>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************//Обработчики прерывания************************************
//I2C1_TX -> DMA1_Ch6
void I2C1_DMA_IT_TX_Handler(void){
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0

	I2C_DMA_TX_Handler(i2c1_IT_Define);
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <I2C1_DMA_IT_TX_Handler+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff77 	bl	80039b4 <I2C_DMA_TX_Handler>
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000694 	.word	0x20000694

08003ad0 <I2C1_DMA_IT_RX_Handler>:
//**********************************************************
//I2C1_RX -> DMA1_Ch7
void I2C1_DMA_IT_RX_Handler(void){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0

	I2C_DMA_RX_Handler(i2c1_IT_Define);
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <I2C1_DMA_IT_RX_Handler+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ffaf 	bl	8003a3c <I2C_DMA_RX_Handler>
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000694 	.word	0x20000694

08003ae8 <SPI_Init>:
	}
	return 0;
}
//*******************************************************************************************
//*******************************************************************************************
void SPI_Init(SPI_TypeDef *spi){
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	if(spi == SPI1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3c      	ldr	r2, [pc, #240]	; (8003be4 <SPI_Init+0xfc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d12f      	bne.n	8003b58 <SPI_Init+0x70>
	{
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;//Включаем тактирование порта A.
 8003af8:	4b3b      	ldr	r3, [pc, #236]	; (8003be8 <SPI_Init+0x100>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	4a3a      	ldr	r2, [pc, #232]	; (8003be8 <SPI_Init+0x100>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6193      	str	r3, [r2, #24]
		GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <SPI_Init+0x104>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a38      	ldr	r2, [pc, #224]	; (8003bec <SPI_Init+0x104>)
 8003b0a:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8003b0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b12:	6013      	str	r3, [r2, #0]
		//SPI1_SCK - PA5
		GPIOA->CRL |= GPIO_CRL_CNF5_1 | //PA5(SPI1_SCK) - выход, альтернативный режим push-pull.
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <SPI_Init+0x104>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a34      	ldr	r2, [pc, #208]	; (8003bec <SPI_Init+0x104>)
 8003b1a:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8003b1e:	6013      	str	r3, [r2, #0]
					  GPIO_CRL_MODE5;	//PA5(SPI1_SCK) - тактирование 50МГц.
		//SPI1_MISO - PA6.
		GPIOA->CRL &= ~GPIO_CRL_MODE6;
 8003b20:	4b32      	ldr	r3, [pc, #200]	; (8003bec <SPI_Init+0x104>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a31      	ldr	r2, [pc, #196]	; (8003bec <SPI_Init+0x104>)
 8003b26:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003b2a:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |=  GPIO_CRL_CNF6_1;//PA6(SPI1_MISO) - вход,
 8003b2c:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <SPI_Init+0x104>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <SPI_Init+0x104>)
 8003b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b36:	6013      	str	r3, [r2, #0]
		GPIOA->BSRR =  GPIO_BSRR_BS6;
 8003b38:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <SPI_Init+0x104>)
 8003b3a:	2240      	movs	r2, #64	; 0x40
 8003b3c:	611a      	str	r2, [r3, #16]
		//SPI1_MOSI - PA7.
		GPIOA->CRL |= GPIO_CRL_CNF7_1 | //PA7(SPI1_MOSI) - выход, альтернативный режим push-pull.
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <SPI_Init+0x104>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <SPI_Init+0x104>)
 8003b44:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8003b48:	6013      	str	r3, [r2, #0]
					  GPIO_CRL_MODE7;	//PA7(SPI1_MOSI) - тактирование 50МГц.

		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;//Включение тактирования SPI1.
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <SPI_Init+0x100>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <SPI_Init+0x100>)
 8003b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b54:	6193      	str	r3, [r2, #24]
 8003b56:	e033      	b.n	8003bc0 <SPI_Init+0xd8>
	}
	else if(spi == SPI2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a25      	ldr	r2, [pc, #148]	; (8003bf0 <SPI_Init+0x108>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d13b      	bne.n	8003bd8 <SPI_Init+0xf0>
	{
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//Включаем тактирование порта B.
 8003b60:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <SPI_Init+0x100>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <SPI_Init+0x100>)
 8003b66:	f043 0308 	orr.w	r3, r3, #8
 8003b6a:	6193      	str	r3, [r2, #24]
		GPIOB->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_CNF14 | GPIO_CRH_CNF15);
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <SPI_Init+0x10c>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <SPI_Init+0x10c>)
 8003b72:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8003b76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b7a:	6053      	str	r3, [r2, #4]
		//SPI2_SCK - PB13.
		GPIOB->CRH |= GPIO_CRH_CNF13_1 | //PB13(SPI2_SCK) - выход, альтернативный режим push-pull.
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <SPI_Init+0x10c>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <SPI_Init+0x10c>)
 8003b82:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8003b86:	6053      	str	r3, [r2, #4]
					  GPIO_CRH_MODE13;	 //PB13(SPI2_SCK) - тактирование 50МГц.
		//SPI2_MISO - PB14.
		GPIOB->CRH &= ~GPIO_CRH_MODE14;
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <SPI_Init+0x10c>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <SPI_Init+0x10c>)
 8003b8e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003b92:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |=  GPIO_CRH_CNF14_1; //PB14(SPI2_MISO) - вход,
 8003b94:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <SPI_Init+0x10c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <SPI_Init+0x10c>)
 8003b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b9e:	6053      	str	r3, [r2, #4]
		GPIOB->BSRR =  GPIO_BSRR_BS14;
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <SPI_Init+0x10c>)
 8003ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ba6:	611a      	str	r2, [r3, #16]
		//SPI2_MOSI - PB15.
		GPIOB->CRH |= GPIO_CRH_CNF15_1 | //PB15(SPI2_MOSI) - выход, альтернативный режим push-pull.
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <SPI_Init+0x10c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <SPI_Init+0x10c>)
 8003bae:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8003bb2:	6053      	str	r3, [r2, #4]
					  GPIO_CRH_MODE15;	 //PB15(SPI2_MOSI) - тактирование 50МГц.

		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;//Включение тактирования SPI2.
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <SPI_Init+0x100>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <SPI_Init+0x100>)
 8003bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bbe:	61d3      	str	r3, [r2, #28]
	}
	else return;
	//--------------------
	spi->CR1  = 0;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
	spi->CR1 |=( SPI_CR1_MSTR         | //режим "мастер".
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 8003bce:	f043 0303 	orr.w	r3, r3, #3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e000      	b.n	8003bda <SPI_Init+0xf2>
	else return;
 8003bd8:	bf00      	nop

// 	SPI2->CR2 |= SPI_CR2_TXEIE;        //разрешить прерывание по окончанию передачи               /
// 	SPI2->CR2 |= SPI_CR2_RXNEIE;       //разрешить прерывание, если принят байт данных
// 	SPI2->CR2 |= SPI_CR2_ERRIE;        //разрешить прерывание при возникновении ошибки
//	NVIC_EnableIRQ (SPI2_IRQn);
}
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40013000 	.word	0x40013000
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40010800 	.word	0x40010800
 8003bf0:	40003800 	.word	0x40003800
 8003bf4:	40010c00 	.word	0x40010c00

08003bf8 <SPI_TxRxByte>:
	spi->DR = byte;
	while( spi->SR & SPI_SR_BSY);  //
}
//************************************************************
//Передача данных(8 бит) в SPI.
uint8_t	SPI_TxRxByte(SPI_TypeDef *spi, uint8_t byte){
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t spiWaitCount = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
	//--------------------
	//Если SPI не проинециализирован ,то выходим.
	//if(!(Spi1StatusReg & SPI_INIT)) return 0;
	//Ожидание освобождения передающего буфера.
	while(!(spi->SR & SPI_SR_TXE))
 8003c08:	e007      	b.n	8003c1a <SPI_TxRxByte+0x22>
	{if(++spiWaitCount > SPI_WAIT) return 0;}
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003c14:	d901      	bls.n	8003c1a <SPI_TxRxByte+0x22>
 8003c16:	2300      	movs	r3, #0
 8003c18:	e01c      	b.n	8003c54 <SPI_TxRxByte+0x5c>
	while(!(spi->SR & SPI_SR_TXE))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f1      	beq.n	8003c0a <SPI_TxRxByte+0x12>
	spiWaitCount = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]

	spi->DR = byte;
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]

	while(spi->SR & SPI_SR_BSY)
 8003c30:	e007      	b.n	8003c42 <SPI_TxRxByte+0x4a>
	{if(++spiWaitCount > SPI_WAIT) return 0;}
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003c3c:	d901      	bls.n	8003c42 <SPI_TxRxByte+0x4a>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e008      	b.n	8003c54 <SPI_TxRxByte+0x5c>
	while(spi->SR & SPI_SR_BSY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f1      	bne.n	8003c32 <SPI_TxRxByte+0x3a>
	//--------------------
	return (uint8_t)spi->DR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	b2db      	uxtb	r3, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
	...

08003c60 <SPI2_IRQHandler>:
//	//--------------------
//	return (uint8_t)SPI2->DR;
//}
//-----------------------------------------------------------------------------
//Прерываени от SPI2.
void SPI2_IRQHandler(void){
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  
  //uint16_t tmp;
  //--------------------
  //причина прерывания - окончание передачи байта
  if(SPI2->SR & SPI_SR_TXE)
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <SPI2_IRQHandler+0x34>)
 8003c66:	689b      	ldr	r3, [r3, #8]

      //LC2SostGreenLedToggel;//Мигаем для отладки          
    }
  //--------------------
  //причина прерывания - принят байт данных
  if(SPI2->SR &= SPI_SR_RXNE)
 8003c68:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <SPI2_IRQHandler+0x34>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <SPI2_IRQHandler+0x34>)
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	6093      	str	r3, [r2, #8]
      //tmp = SPI1->DR;                //прочитать принятые данные
      //выполняем какие-то действия      
    }
  //--------------------
  //причина прерывания - ошибка режима ведущего
  if(SPI2->SR &= SPI_SR_MODF)
 8003c74:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <SPI2_IRQHandler+0x34>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a06      	ldr	r2, [pc, #24]	; (8003c94 <SPI2_IRQHandler+0x34>)
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	6093      	str	r3, [r2, #8]
    {
      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
    }
  //--------------------
  //причина прерывания - переполнение приемника данных
  if(SPI2->SR &= SPI_SR_OVR)
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SPI2_IRQHandler+0x34>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a03      	ldr	r2, [pc, #12]	; (8003c94 <SPI2_IRQHandler+0x34>)
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	6093      	str	r3, [r2, #8]
//  if(SPI2->SR &= SSPI_SR_CRCERR)
//    {
//      //сбрасываем флаг события, которое вызвало прерывание и делаем что-то полезное
//    }
  //--------------------
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	40003800 	.word	0x40003800

08003c98 <SysTick_Handler>:
* Description    : This function handles SysTick Handler.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_Handler(void){
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0

	SysTick_IT_Handler();
 8003c9c:	f7ff f832 	bl	8002d04 <SysTick_IT_Handler>
}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <WWDG_IRQHandler>:
* Description    : This function handles WWDG interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void){
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0

}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <PVD_IRQHandler>:
* Description    : This function handles PVD interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void){
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0

}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <TAMPER_IRQHandler>:
* Description    : This function handles Tamper interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void){
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0

}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <RTC_IRQHandler>:
* Description    : This function handles RTC global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void){
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0

//	RTC_IT_Handler();
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <FLASH_IRQHandler>:
* Description    : This function handles Flash interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void){
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0

}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <RCC_IRQHandler>:
* Description    : This function handles RCC interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void){
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0

}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <EXTI0_IRQHandler>:
* Description    : This function handles External interrupt Line 0 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void){
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0

}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <EXTI1_IRQHandler>:
* Description    : This function handles External interrupt Line 1 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void){
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0

}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <EXTI2_IRQHandler>:
* Description    : This function handles External interrupt Line 2 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void){
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <EXTI3_IRQHandler>:
* Description    : This function handles External interrupt Line 3 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void){
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0

}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <EXTI4_IRQHandler>:
* Description    : This function handles External interrupt Line 4 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void){
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0

}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <DMA1_Channel1_IRQHandler>:
* Description    : This function handles DMA1 Channel 1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void){
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <DMA1_Channel2_IRQHandler>:
* Description    : This function handles DMA1 Channel 2 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void){
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <DMA1_Channel3_IRQHandler>:
* Description    : This function handles DMA1 Channel 3 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void){
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <DMA1_Channel5_IRQHandler>:
* Description    : This function handles DMA1 Channel 5 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void){
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0

}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <DMA1_Channel6_IRQHandler>:
* Description    : This function handles DMA1 Channel 6 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0

	I2C1_DMA_IT_TX_Handler();
 8003d5c:	f7ff feac 	bl	8003ab8 <I2C1_DMA_IT_TX_Handler>
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <DMA1_Channel7_IRQHandler>:
* Description    : This function handles DMA1 Channel 7 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0

	I2C1_DMA_IT_RX_Handler();
 8003d68:	f7ff feb2 	bl	8003ad0 <I2C1_DMA_IT_RX_Handler>
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <ADC1_2_IRQHandler>:
* Description    : This function handles ADC1 and ADC2 global interrupts requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC1_2_IRQHandler(void){
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0

}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <USB_HP_CAN_TX_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void){
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0

}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <USB_LP_CAN_RX0_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void){
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0

}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <CAN_RX1_IRQHandler>:
* Description    : This function handles CAN RX1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void) {}
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <CAN_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{}
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <EXTI9_5_IRQHandler>:
* Description    : This function handles External lines 9 to 5 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void) {}
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <TIM1_BRK_IRQHandler>:
* Description    : This function handles TIM1 Break interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void){
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0

}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <TIM1_UP_IRQHandler>:
*                  request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void){
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0

	TIM1->SR &= ~TIM_SR_UIF;//Сброс флага прерывания.
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <TIM1_UP_IRQHandler+0x18>)
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <TIM1_UP_IRQHandler+0x18>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6113      	str	r3, [r2, #16]
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00

08003de0 <TIM1_TRG_COM_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void){
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0

}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <TIM1_CC_IRQHandler>:
* Description    : This function handles TIM1 capture compare interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void){
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <TIM2_IRQHandler>:
* Description    : This function handles TIM2 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void){
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0

	TIM2->SR &= ~TIM_SR_UIF;//Сброс флага прерывания.
 8003dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	6113      	str	r3, [r2, #16]

}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <TIM3_IRQHandler>:
* Description    : This function handles TIM3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void) {
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0

}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <TIM4_IRQHandler>:
* Description    : This function handles TIM4 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void) {
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0

}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <I2C1_EV_IRQHandler>:
* Description    : This function handles I2C1 Event interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void){
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0

	//	I2C_IT_EV_Handler(I2C1);
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <I2C1_ER_IRQHandler>:
* Description    : This function handles I2C1 Error interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0

	I2C_IT_ER_Handler(I2C1);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <I2C1_ER_IRQHandler+0x10>)
 8003e3e:	f7ff fcf7 	bl	8003830 <I2C_IT_ER_Handler>
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40005400 	.word	0x40005400

08003e4c <I2C2_EV_IRQHandler>:
* Description    : This function handles I2C2 Event interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void){
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0

	//	I2C_IT_EV_Handler(I2C2);
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <I2C2_ER_IRQHandler>:
* Description    : This function handles I2C2 Error interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void){
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

	//	I2C_IT_ER_Handler(I2C2);
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <SPI1_IRQHandler>:
* Description    : This function handles SPI1 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void){
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0

}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <USART2_IRQHandler>:
* Description    : This function handles USART2 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void){
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <USART3_IRQHandler>:
* Description    : This function handles USART3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void){
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0

}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <EXTI15_10_IRQHandler>:
* Description    : This function handles External lines 15 to 10 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void){
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0

}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <RTCAlarm_IRQHandler>:
* Description    : This function handles RTC Alarm interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void){
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0

}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <TIM8_BRK_IRQHandler>:
* Description    : This function handles TIM8 Break interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void){
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0

}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <TIM8_UP_IRQHandler>:
*                  request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void){
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0

}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <TIM8_TRG_COM_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void){
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0

}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <TIM8_CC_IRQHandler>:
* Description    : This function handles TIM8 capture compare interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void){
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <ADC3_IRQHandler>:
* Description    : This function handles ADC3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void){
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0

}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <FSMC_IRQHandler>:
* Description    : This function handles FSMC global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void){
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0

}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <SDIO_IRQHandler>:
* Description    : This function handles SDIO global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void){
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0

}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <TIM5_IRQHandler>:
* Description    : This function handles TIM5 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void){
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0

}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <SPI3_IRQHandler>:
* Description    : This function handles SPI3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void){
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0

}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <UART4_IRQHandler>:
* Description    : This function handles UART4 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void){
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <UART5_IRQHandler>:
* Description    : This function handles UART5 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void){
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <TIM6_IRQHandler>:
* Description    : This function handles TIM6 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void){
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0

}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <TIM7_IRQHandler>:
* Description    : This function handles TIM7 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void){
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <DMA2_Channel1_IRQHandler>:
* Description    : This function handles DMA2 Channel 1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void){
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0

}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <DMA2_Channel2_IRQHandler>:
* Description    : This function handles DMA2 Channel 2 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void){
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0

}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <DMA2_Channel3_IRQHandler>:
* Description    : This function handles DMA2 Channel 3 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void){
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0

}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <DMA2_Channel4_5_IRQHandler>:
*                  interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void){
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0

}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <Init_RCC>:
#include "sys_ST.h"

//**********************************************************************************************
//**********************************************************************************************
//Настройка тактирования 72МГц. Внешний кварц 8 МГц.
static uint32_t Init_RCC(void){
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
	
	uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	2300      	movs	r3, #0
 8003f78:	603b      	str	r3, [r7, #0]
	//--------------------
	//SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/        
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);//Enable HSE.
 8003f7a:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <Init_RCC+0xf8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	; (8004064 <Init_RCC+0xf8>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do{
			HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <Init_RCC+0xf8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	603b      	str	r3, [r7, #0]
			StartUpCounter++;  
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3301      	adds	r3, #1
 8003f94:	607b      	str	r3, [r7, #4]
	  }
	while((HSEStatus == 0) && (StartUpCounter != 0xFFFF));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <Init_RCC+0x3a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d1ef      	bne.n	8003f86 <Init_RCC+0x1a>
	//--------------------
	if ((RCC->CR & RCC_CR_HSERDY) != 0) HSEStatus = (uint32_t)0x01;
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <Init_RCC+0xf8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <Init_RCC+0x4c>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	e001      	b.n	8003fbc <Init_RCC+0x50>
	else                                HSEStatus = (uint32_t)0x00;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	603b      	str	r3, [r7, #0]
	//--------------------
	if(HSEStatus == (uint32_t)0x01)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d149      	bne.n	8004056 <Init_RCC+0xea>
	{
		/* Enable Prefetch Buffer */
		FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003fc2:	4b29      	ldr	r3, [pc, #164]	; (8004068 <Init_RCC+0xfc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a28      	ldr	r2, [pc, #160]	; (8004068 <Init_RCC+0xfc>)
 8003fc8:	f043 0310 	orr.w	r3, r3, #16
 8003fcc:	6013      	str	r3, [r2, #0]
		/* Flash 2 wait state */
		FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003fce:	4b26      	ldr	r3, [pc, #152]	; (8004068 <Init_RCC+0xfc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a25      	ldr	r2, [pc, #148]	; (8004068 <Init_RCC+0xfc>)
 8003fd4:	f023 0307 	bic.w	r3, r3, #7
 8003fd8:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <Init_RCC+0xfc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a22      	ldr	r2, [pc, #136]	; (8004068 <Init_RCC+0xfc>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6013      	str	r3, [r2, #0]
		//--------------------
		//Настройка тактирования шин AHB, APB1 и APB2.
		RCC->CFGR |= (uint32_t)(RCC_CFGR_HPRE_DIV1  | // AHB prescaler. SYSCLK not divided
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <Init_RCC+0xf8>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <Init_RCC+0xf8>)
 8003fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ff0:	6053      	str	r3, [r2, #4]
								RCC_CFGR_PPRE2_DIV1 | // APB2 = AHB.       APB2 Fmax = 72MHz.
								RCC_CFGR_PPRE1_DIV2); // APB1 = (AHB / 2). APB1 Fmax = 36MHz.
		//--------------------
		//PLL configuration: = HSE * 9 = 72 MHz */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <Init_RCC+0xf8>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <Init_RCC+0xf8>)
 8003ff8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003ffc:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_Msk        |  // HSE oscillator clock selected as PLL input clock
 8003ffe:	4b19      	ldr	r3, [pc, #100]	; (8004064 <Init_RCC+0xf8>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4a18      	ldr	r2, [pc, #96]	; (8004064 <Init_RCC+0xf8>)
 8004004:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8004008:	6053      	str	r3, [r2, #4]
														//RCC_CFGR_PLLXTPRE_HSE_Div2 |  // HSE clock divided by 2
														RCC_CFGR_PLLMULL9);
		/* Enable PLL */
		RCC->CR |= RCC_CR_PLLON;
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <Init_RCC+0xf8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a15      	ldr	r2, [pc, #84]	; (8004064 <Init_RCC+0xf8>)
 8004010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004014:	6013      	str	r3, [r2, #0]
		/* Wait till PLL is ready */
		while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8004016:	bf00      	nop
 8004018:	4b12      	ldr	r3, [pc, #72]	; (8004064 <Init_RCC+0xf8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f9      	beq.n	8004018 <Init_RCC+0xac>
		/* Select PLL as system clock source */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <Init_RCC+0xf8>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <Init_RCC+0xf8>)
 800402a:	f023 0303 	bic.w	r3, r3, #3
 800402e:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <Init_RCC+0xf8>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <Init_RCC+0xf8>)
 8004036:	f043 0302 	orr.w	r3, r3, #2
 800403a:	6053      	str	r3, [r2, #4]
		/* Wait till PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)  {}
 800403c:	bf00      	nop
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <Init_RCC+0xf8>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b08      	cmp	r3, #8
 8004048:	d1f9      	bne.n	800403e <Init_RCC+0xd2>
		RCC->CR |= RCC_CR_CSSON; //Включаем защиту HSE от сбоев - CSS.
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <Init_RCC+0xf8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a05      	ldr	r2, [pc, #20]	; (8004064 <Init_RCC+0xf8>)
 8004050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004054:	6013      	str	r3, [r2, #0]
	else
	{
			/* If HSE fails to start-up, the application will have wrong clock
			 configuration. User can add here some code to deal with this error */
	}
	return HSEStatus;
 8004056:	683b      	ldr	r3, [r7, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40022000 	.word	0x40022000

0800406c <Sys_Init>:
//*****************************************************************************
void Sys_Init(void){
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
	
	//Reset the RCC clock configuration to the default reset state(for debug purpose).
	RCC->CR   |= (uint32_t)0x00000001; /* Set HSION bit */
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <Sys_Init+0x54>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <Sys_Init+0x54>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= (uint32_t)0xF0FF0000; /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 800407c:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <Sys_Init+0x54>)
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	490f      	ldr	r1, [pc, #60]	; (80040c0 <Sys_Init+0x54>)
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <Sys_Init+0x58>)
 8004084:	4013      	ands	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
	RCC->CR   &= (uint32_t)0xFEF6FFFF; /* Reset HSEON, CSSON and PLLON bits */
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <Sys_Init+0x54>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <Sys_Init+0x54>)
 800408e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004096:	6013      	str	r3, [r2, #0]
	RCC->CR   &= (uint32_t)0xFFFBFFFF; /* Reset HSEBYP bit */
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <Sys_Init+0x54>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <Sys_Init+0x54>)
 800409e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a2:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= (uint32_t)0xFF80FFFF; /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <Sys_Init+0x54>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <Sys_Init+0x54>)
 80040aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80040ae:	6053      	str	r3, [r2, #4]
	RCC->CIR   = 0x009F0000;  		   /* Disable all interrupts and clear pending bits  */
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <Sys_Init+0x54>)
 80040b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80040b6:	609a      	str	r2, [r3, #8]
	//RCC->CFGR2 = 0x00000000;         /* Reset CFGR2 register */
	
	Init_RCC();//Настройка тактирования микроконтроллера. Внешний кварц 8 МГц.
 80040b8:	f7ff ff58 	bl	8003f6c <Init_RCC>
}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	f0ff0000 	.word	0xf0ff0000

080040c8 <NMI_Handler>:
//**********************************************************************************************
//**********************************************************************************************
//**********************************************************************************************
//**********************************************************************************************
//Прерываени блока CSS. Возникает при сбое тактирования HSE.
void NMI_Handler( void){
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0

  //RCC->CIR |= RCC_CIR_CSSC;//Очищаем флаг прерывания CSS иначе прерывание будет генерироваться бесконечно.
	//NVIC_SystemReset();
  //LC1SostRedLedOn;
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <HardFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void HardFault_Handler( void){
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0

	Lcd_ClearVideoBuffer();
 80040d8:	f7fd fcec 	bl	8001ab4 <Lcd_ClearVideoBuffer>
	Lcd_SetCursor(1, 1);
 80040dc:	2101      	movs	r1, #1
 80040de:	2001      	movs	r0, #1
 80040e0:	f7fd fe7a 	bl	8001dd8 <Lcd_SetCursor>
	Lcd_Print("HardFault");
 80040e4:	4803      	ldr	r0, [pc, #12]	; (80040f4 <HardFault_Handler+0x20>)
 80040e6:	f7fe f827 	bl	8002138 <Lcd_Print>
	Lcd_Update();
 80040ea:	f7fd fcd9 	bl	8001aa0 <Lcd_Update>
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	08005504 	.word	0x08005504

080040f8 <MemManage_Handler>:
//*****************************************************************************
//*****************************************************************************
void MemManage_Handler( void){
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0

//  LC2SostRedLedOn();
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <BusFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void BusFault_Handler( void){
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0

//  LC2SostGreenLedOn();
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <UsageFault_Handler>:
//*****************************************************************************
//*****************************************************************************
void UsageFault_Handler( void){
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <SVC_Handler>:
//*****************************************************************************
//*****************************************************************************
void SVC_Handler( void){
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0

  //LC2SostRedLedOn;
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <__NVIC_GetPriorityGrouping>:
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <__NVIC_GetPriorityGrouping+0x18>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 0307 	and.w	r3, r3, #7
}
 8004136:	4618      	mov	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <__NVIC_EnableIRQ>:
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	2b00      	cmp	r3, #0
 8004154:	db0b      	blt.n	800416e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	4906      	ldr	r1, [pc, #24]	; (8004178 <__NVIC_EnableIRQ+0x34>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2001      	movs	r0, #1
 8004166:	fa00 f202 	lsl.w	r2, r0, r2
 800416a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_SetPriority>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	2b00      	cmp	r3, #0
 800418e:	db0a      	blt.n	80041a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	490c      	ldr	r1, [pc, #48]	; (80041c8 <__NVIC_SetPriority+0x4c>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	0112      	lsls	r2, r2, #4
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	440b      	add	r3, r1
 80041a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041a4:	e00a      	b.n	80041bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4908      	ldr	r1, [pc, #32]	; (80041cc <__NVIC_SetPriority+0x50>)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3b04      	subs	r3, #4
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	440b      	add	r3, r1
 80041ba:	761a      	strb	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000e100 	.word	0xe000e100
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <NVIC_EncodePriority>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	; 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f1c3 0307 	rsb	r3, r3, #7
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	bf28      	it	cs
 80041ee:	2304      	movcs	r3, #4
 80041f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3304      	adds	r3, #4
 80041f6:	2b06      	cmp	r3, #6
 80041f8:	d902      	bls.n	8004200 <NVIC_EncodePriority+0x30>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3b03      	subs	r3, #3
 80041fe:	e000      	b.n	8004202 <NVIC_EncodePriority+0x32>
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	401a      	ands	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004218:	f04f 31ff 	mov.w	r1, #4294967295
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43d9      	mvns	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	4313      	orrs	r3, r2
}
 800422a:	4618      	mov	r0, r3
 800422c:	3724      	adds	r7, #36	; 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <SysTick_Init>:

#include "sys_tick_ST.h"

//-----------------------------------------------------------------------------
//Инициализация системного таймера SysTick.
void SysTick_Init(void){
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0

	SysTick->LOAD = TimerTick;	//Загрузка значения.
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <SysTick_Init+0x40>)
 800423a:	4a0f      	ldr	r2, [pc, #60]	; (8004278 <SysTick_Init+0x44>)
 800423c:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = TimerTick;	//Обнуление таймера. 
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <SysTick_Init+0x40>)
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <SysTick_Init+0x44>)
 8004242:	609a      	str	r2, [r3, #8]
                              //При записи любого значения этот регист обнуляется, с обнулением флага COUNTFLAG. 

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | //Тактирование частотой процессора (72МГц).
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <SysTick_Init+0x40>)
 8004246:	2207      	movs	r2, #7
 8004248:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk   | //Рразрешение прерывания.
					SysTick_CTRL_ENABLE_Msk;     //Резрешение таймеру считать.

	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 3, 0));
 800424a:	f7ff ff6d 	bl	8004128 <__NVIC_GetPriorityGrouping>
 800424e:	4603      	mov	r3, r0
 8004250:	2200      	movs	r2, #0
 8004252:	2103      	movs	r1, #3
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ffbb 	bl	80041d0 <NVIC_EncodePriority>
 800425a:	4603      	mov	r3, r0
 800425c:	4619      	mov	r1, r3
 800425e:	f04f 30ff 	mov.w	r0, #4294967295
 8004262:	f7ff ff8b 	bl	800417c <__NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);
 8004266:	f04f 30ff 	mov.w	r0, #4294967295
 800426a:	f7ff ff6b 	bl	8004144 <__NVIC_EnableIRQ>
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	e000e010 	.word	0xe000e010
 8004278:	0001193f 	.word	0x0001193f

0800427c <__NVIC_EnableIRQ>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	2b00      	cmp	r3, #0
 800428c:	db0b      	blt.n	80042a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4906      	ldr	r1, [pc, #24]	; (80042b0 <__NVIC_EnableIRQ+0x34>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2001      	movs	r0, #1
 800429e:	fa00 f202 	lsl.w	r2, r0, r2
 80042a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_SetPriority>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db0a      	blt.n	80042de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	490c      	ldr	r1, [pc, #48]	; (8004300 <__NVIC_SetPriority+0x4c>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042dc:	e00a      	b.n	80042f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4908      	ldr	r1, [pc, #32]	; (8004304 <__NVIC_SetPriority+0x50>)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	3b04      	subs	r3, #4
 80042ec:	0112      	lsls	r2, r2, #4
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	440b      	add	r3, r1
 80042f2:	761a      	strb	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e100 	.word	0xe000e100
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <Usart1ClrErrFlag>:
	
	return &U1Handlers;
}
//**********************************************************
//сброс флагов ошибки 
static void Usart1ClrErrFlag(void){
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0

	USART1->SR;//Такая последовательность сбрасывает флаги ошибки 
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <Usart1ClrErrFlag+0x14>)
 800430e:	681b      	ldr	r3, [r3, #0]
	USART1->DR;//
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <Usart1ClrErrFlag+0x14>)
 8004312:	685b      	ldr	r3, [r3, #4]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40013800 	.word	0x40013800

08004320 <USART1_IRQHandler>:
//**********************************************************
//Прерывание от USART1.
void USART1_IRQHandler(void){
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0

	//--------------------
	/*!< Read Data Register Not Empty */
	if(USART1->SR & USART_SR_RXNE)
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <USART1_IRQHandler+0x50>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <USART1_IRQHandler+0x20>
		{
		  //проверяем нет ли ошибок при приеме байта.
		  if((USART1->SR & (USART_SR_NE | USART_SR_FE | USART_SR_PE | USART_SR_ORE)) == 0)
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <USART1_IRQHandler+0x50>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <USART1_IRQHandler+0x20>
		  //--------------------
		  //Если байт битый, то пропускаем его и
		  //очищаем приемный буфер для запуска приема нового пакета.
		  else
			{
			  Usart1ClrErrFlag();
 800433c:	f7ff ffe4 	bl	8004308 <Usart1ClrErrFlag>
			}
		  //--------------------
		}
	//--------------------
	/*!< Overrun error */
	if(USART1->SR & USART_SR_ORE)
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <USART1_IRQHandler+0x50>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <USART1_IRQHandler+0x30>
		{
			Usart1ClrErrFlag();
 800434c:	f7ff ffdc 	bl	8004308 <Usart1ClrErrFlag>
			//U1Handlers.ReceiveByteBroken();
		}
	//--------------------
	/*!< Transmission Complete */
	if(USART1->SR & USART_SR_TC)
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <USART1_IRQHandler+0x50>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <USART1_IRQHandler+0x48>
		//      //Передача очередного байта.
		//      else USART1->DR = *(U1WorkReg.BufPtr + U1WorkReg.CounterByte);
			//---------
			//Работа с ДМА1 канал 4.
			//U1Handlers.BufTransferComplete();//Обработка окнчания предачи буфера.
			USART1->CR1 &= ~USART_CR1_TCIE;  //Отлючение прерывания по окончанию передачи		
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <USART1_IRQHandler+0x50>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <USART1_IRQHandler+0x50>)
 8004362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004366:	60d3      	str	r3, [r2, #12]
			//---------
		}
	//--------------------
	/*!< Transmit Data Register Empty */
	if(USART1->SR & USART_SR_TXE)
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <USART1_IRQHandler+0x50>)
 800436a:	681b      	ldr	r3, [r3, #0]
		{
		  //USART1->SR &= ~USART_SR_TXE; //Сброс флага прерывания.
		  //---------
		}
	//--------------------
}
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40013800 	.word	0x40013800

08004374 <USART_Init>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void USART_Init(USART_TypeDef *usart, uint16_t usartBrr){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]

	//--------------------
	//Инициализация портов.
	if(usart == USART1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a38      	ldr	r2, [pc, #224]	; (8004464 <USART_Init+0xf0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d112      	bne.n	80043ae <USART_Init+0x3a>
	{
		//PA9(U1TX), PA10(U1RX).
		GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_CNF10);
 8004388:	4b37      	ldr	r3, [pc, #220]	; (8004468 <USART_Init+0xf4>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4a36      	ldr	r2, [pc, #216]	; (8004468 <USART_Init+0xf4>)
 800438e:	f423 634c 	bic.w	r3, r3, #3264	; 0xcc0
 8004392:	6053      	str	r3, [r2, #4]
		GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9 | //PA9(U1TX)  - выход, альтернативный режим push-pull.																							 //PA9(U1TX) - тактирование 50МГц.
 8004394:	4b34      	ldr	r3, [pc, #208]	; (8004468 <USART_Init+0xf4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a33      	ldr	r2, [pc, #204]	; (8004468 <USART_Init+0xf4>)
 800439a:	f443 6396 	orr.w	r3, r3, #1200	; 0x4b0
 800439e:	6053      	str	r3, [r2, #4]
					  GPIO_CRH_CNF10_0;				     //PA10(U1RX) - Floating input.
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;			 //Включение тактирование USART1.
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <USART_Init+0xf8>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	4a31      	ldr	r2, [pc, #196]	; (800446c <USART_Init+0xf8>)
 80043a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043aa:	6193      	str	r3, [r2, #24]
 80043ac:	e02c      	b.n	8004408 <USART_Init+0x94>
	}
	else if(usart == USART2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2f      	ldr	r2, [pc, #188]	; (8004470 <USART_Init+0xfc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d112      	bne.n	80043dc <USART_Init+0x68>
	{
		//PA2(U2TX), PA3(U2RX).
		GPIOA->CRL &= ~(GPIO_CRL_CNF2 | GPIO_CRL_CNF3);
 80043b6:	4b2c      	ldr	r3, [pc, #176]	; (8004468 <USART_Init+0xf4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <USART_Init+0xf4>)
 80043bc:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 80043c0:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |= GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2 | //PA2(U2TX) - выход, альтернативный режим push-pull.																							 //PA9(U1TX) - тактирование 50МГц.
 80043c2:	4b29      	ldr	r3, [pc, #164]	; (8004468 <USART_Init+0xf4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a28      	ldr	r2, [pc, #160]	; (8004468 <USART_Init+0xf4>)
 80043c8:	f443 4396 	orr.w	r3, r3, #19200	; 0x4b00
 80043cc:	6013      	str	r3, [r2, #0]
				  	  GPIO_CRL_CNF3_0;				     //PA3(U2RX) - Floating input.
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			 //Включение тактирование USART2.
 80043ce:	4b27      	ldr	r3, [pc, #156]	; (800446c <USART_Init+0xf8>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	4a26      	ldr	r2, [pc, #152]	; (800446c <USART_Init+0xf8>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d8:	61d3      	str	r3, [r2, #28]
 80043da:	e015      	b.n	8004408 <USART_Init+0x94>
	}
	else if(usart == USART3)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a25      	ldr	r2, [pc, #148]	; (8004474 <USART_Init+0x100>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d13b      	bne.n	800445c <USART_Init+0xe8>
	{
		//PB10(U3TX), PB11(U3RX).
		GPIOB->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_CNF11);
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <USART_Init+0x104>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <USART_Init+0x104>)
 80043ea:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 80043ee:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |= GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10 | //PB10(U3TX) - выход, альтернативный режим push-pull.																							 //PA9(U1TX) - тактирование 50МГц.
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <USART_Init+0x104>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a20      	ldr	r2, [pc, #128]	; (8004478 <USART_Init+0x104>)
 80043f6:	f443 4396 	orr.w	r3, r3, #19200	; 0x4b00
 80043fa:	6053      	str	r3, [r2, #4]
					  GPIO_CRH_CNF11_0;				       //PB11(U3RX) - Floating input.
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;			   //Включение тактирование USART3.
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <USART_Init+0xf8>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4a1a      	ldr	r2, [pc, #104]	; (800446c <USART_Init+0xf8>)
 8004402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004406:	61d3      	str	r3, [r2, #28]
	}
	else return;
	//--------------------
	//Инициализация USARTx.
	usart->BRR  = usartBrr;  	    //Set baudrate
 8004408:	887a      	ldrh	r2, [r7, #2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	609a      	str	r2, [r3, #8]
	usart->CR1 &= ~USART_CR1_M; 	//8 бит данных.
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60da      	str	r2, [r3, #12]
	usart->CR2 &= ~USART_CR2_STOP;  //1 стоп-бит.
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]
	usart->CR1 =  USART_CR1_RE    | //Включение RX USART1.
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f242 022c 	movw	r2, #8236	; 0x202c
 800442c:	60da      	str	r2, [r3, #12]
				  USART_CR1_TE    | //Включение TX USART1.
				  USART_CR1_RXNEIE| //Включение прерывания от приемника USART1.
				  USART_CR1_UE;     //Включение USART1.
	usart->CR3 |= USART_CR3_DMAT;   //Подключение TX USART1 к DMA.
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	615a      	str	r2, [r3, #20]


	NVIC_SetPriority(USART1_IRQn, 15);//Приоритет прерывания USART1.
 800443a:	210f      	movs	r1, #15
 800443c:	2025      	movs	r0, #37	; 0x25
 800443e:	f7ff ff39 	bl	80042b4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);      //Разрешаем прерывание от приемника USART1.
 8004442:	2025      	movs	r0, #37	; 0x25
 8004444:	f7ff ff1a 	bl	800427c <__NVIC_EnableIRQ>
	//--------------------
	//Инициализация DMA. TX USART1 работает с DMA1 Ch4.
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;//Включить тактирование DMA1
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <USART_Init+0xf8>)
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4a07      	ldr	r2, [pc, #28]	; (800446c <USART_Init+0xf8>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6153      	str	r3, [r2, #20]
	DMA1Ch4InitForTx(USART1);
 8004454:	4803      	ldr	r0, [pc, #12]	; (8004464 <USART_Init+0xf0>)
 8004456:	f000 f811 	bl	800447c <DMA1Ch4InitForTx>
 800445a:	e000      	b.n	800445e <USART_Init+0xea>
	else return;
 800445c:	bf00      	nop
}
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40013800 	.word	0x40013800
 8004468:	40010800 	.word	0x40010800
 800446c:	40021000 	.word	0x40021000
 8004470:	40004400 	.word	0x40004400
 8004474:	40004800 	.word	0x40004800
 8004478:	40010c00 	.word	0x40010c00

0800447c <DMA1Ch4InitForTx>:
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//Инициализация канала 4 DMA1 передачи данных через USART1.   
void DMA1Ch4InitForTx(USART_TypeDef *usart){
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  
	//Задать адрес источника и приемника и количество данных для обмена
	DMA1_Channel4->CPAR = (uint32_t)&usart->DR;//адрес регистра перефирии
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	1d1a      	adds	r2, r3, #4
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <DMA1Ch4InitForTx+0x34>)
 800448a:	609a      	str	r2, [r3, #8]
	//----------------- Манипуляции с регистром конфигурации  ----------------
	//Следующие действия можно обьединить в одну команду (разбито для наглядности)
	//После сброса значение CCR = 0.
	//DMA1_Channel4->CCR  =  0;            //предочистка регистра конфигурации
	//DMA1_Channel4->CCR &= ~DMA_CCR4_CIRC;//выключить циклический режим
	DMA1_Channel4->CCR |= DMA_CCR_DIR;     //направление: чтение из памяти
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <DMA1Ch4InitForTx+0x34>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <DMA1Ch4InitForTx+0x34>)
 8004492:	f043 0310 	orr.w	r3, r3, #16
 8004496:	6013      	str	r3, [r2, #0]
	//Настроить работу с переферийным устройством
	//DMA1_Channel4->CCR &= ~DMA_CCR4_PSIZE;//размерность данных 8 бит
	//DMA1_Channel4->CCR &= ~DMA_CCR4_PINC; //неиспользовать инкремент указателя
	//Настроить работу с памятью
	//DMA1_Channel4->CCR &= ~DMA_CCR4_MSIZE;//размерность данных 8 бит
	DMA1_Channel4->CCR |= DMA_CCR_MINC;    //использовать инкремент указателя
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <DMA1Ch4InitForTx+0x34>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <DMA1Ch4InitForTx+0x34>)
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	6013      	str	r3, [r2, #0]

//	DMA1_Channel4->CCR |= DMA_CCR_TCIE;  //Разрешить прерывание по завершении обмена
//	NVIC_EnableIRQ (DMA1_Channel4_IRQn); //Разрешить прерывания от DMA канал №4
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40020044 	.word	0x40020044

080044b4 <DMA1_Channel4_IRQHandler>:
	DMA1_Channel4->CNDTR = size;         //загрузить количество данных для обмена
	DMA1_Channel4->CCR  |= DMA_CCR_EN;   //разрешить работу канала
}
//**********************************************************
//Прерываение от DMA1_Ch4.
void DMA1_Channel4_IRQHandler(void){
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  
	//-------------------------
	//Если обмен завершен
	if(DMA1->ISR & DMA_ISR_TCIF4)
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <DMA1_Channel4_IRQHandler+0x3c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <DMA1_Channel4_IRQHandler+0x34>
		{
			DMA1->IFCR |= DMA_IFCR_CTCIF4;    //сбросить флаг окончания обмена.
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <DMA1_Channel4_IRQHandler+0x3c>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <DMA1_Channel4_IRQHandler+0x3c>)
 80044ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044ce:	6053      	str	r3, [r2, #4]
			DMA1_Channel4->CCR &= ~DMA_CCR_EN;//запретить работу канала.
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <DMA1_Channel4_IRQHandler+0x40>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <DMA1_Channel4_IRQHandler+0x40>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6013      	str	r3, [r2, #0]
			//Это нужно что бы дождаться завершения передачи последнего байта.
			USART1->CR1 |= USART_CR1_TCIE;	  //Включение прерывания по окончанию передачи USART1.
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <DMA1_Channel4_IRQHandler+0x44>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <DMA1_Channel4_IRQHandler+0x44>)
 80044e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e6:	60d3      	str	r3, [r2, #12]
//  if(DMA1->ISR & DMA_ISR_TEIF4)
//    {

//    }   
//  //-------------------------
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	40020000 	.word	0x40020000
 80044f4:	40020044 	.word	0x40020044
 80044f8:	40013800 	.word	0x40013800

080044fc <_disableInterrupt>:
static volatile uint32_t tickCount = 0;		  //

//*******************************************************************************************
//*******************************************************************************************
//Глобальное запрещение прерываний.
__INLINE static void _disableInterrupt(void){
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0

	//__disable_irq();
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <_enableInterrupt>:
//**********************************************************
//Глобальное разрешение рерываний.
__INLINE static void _enableInterrupt(void){
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0

	//__enable_irq();
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <RTOS_Init>:
//*******************************************************************************************
//*******************************************************************************************
/* Инициализация РТОС.
 *
 */
void RTOS_Init(void){
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
//   TCCR0        |= (1<<CS01)|(1<<CS00);         // прескалер - 64
//   TIFR         = (1<<TOV0);                   // очищаем флаг прерывания таймера Т0
//   TIMSK        |= (1<<TOIE0);                  // разрешаем прерывание по переполнению
//   TIMER_COUNTER = TIMER_START;                 // загружаем начальное зн. в счетный регистр

	arrayTail = 0;//"хвост" в 0
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <RTOS_Init+0x14>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	2000073c 	.word	0x2000073c

0800452c <RTOS_SetTask>:
//**********************************************************
/* Добавление задачи в список
 *
 */
void RTOS_SetTask(void(*taskFunc)(void), uint32_t taskDelay, uint32_t taskPeriod){
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
   
	volatile task_t *task = &taskArray[0];
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <RTOS_SetTask+0xa0>)
 800453a:	617b      	str	r3, [r7, #20]
	//-----------------------------
	if(!taskFunc) return;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d040      	beq.n	80045c4 <RTOS_SetTask+0x98>
	//Поиск задачи в текущем списке
	for(uint32_t i = 0; i < arrayTail; i++)
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e018      	b.n	800457a <RTOS_SetTask+0x4e>
	{
		if(task->pFunc == taskFunc)// если нашли, то обновляем переменные
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	429a      	cmp	r2, r3
 8004550:	d10d      	bne.n	800456e <RTOS_SetTask+0x42>
		{
			_disableInterrupt();//Глобальное запрещение прерываний.
 8004552:	f7ff ffd3 	bl	80044fc <_disableInterrupt>
			task->delay  = taskDelay;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	605a      	str	r2, [r3, #4]
			task->period = taskPeriod;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]
			task->state  = TASK_STOP;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	731a      	strb	r2, [r3, #12]
			_enableInterrupt();//Глобальное разрешение рерываний.
 8004568:	f7ff ffce 	bl	8004508 <_enableInterrupt>
			return;
 800456c:	e02b      	b.n	80045c6 <RTOS_SetTask+0x9a>
		}
		task++;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	3310      	adds	r3, #16
 8004572:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < arrayTail; i++)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	3301      	adds	r3, #1
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <RTOS_SetTask+0xa4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d3e1      	bcc.n	8004548 <RTOS_SetTask+0x1c>
	}
	//Если такой задачи в списке нет и есть место, то добавляем в конец массива
	if(arrayTail < MAX_TASKS)
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <RTOS_SetTask+0xa4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b09      	cmp	r3, #9
 800458a:	d81c      	bhi.n	80045c6 <RTOS_SetTask+0x9a>
	{
		_disableInterrupt();//Глобальное запрещение прерываний.
 800458c:	f7ff ffb6 	bl	80044fc <_disableInterrupt>
		task 		 = &taskArray[arrayTail];
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <RTOS_SetTask+0xa4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <RTOS_SetTask+0xa0>)
 8004598:	4413      	add	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
		task->pFunc  = taskFunc;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]
		task->delay  = taskDelay;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	605a      	str	r2, [r3, #4]
		task->period = taskPeriod;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	609a      	str	r2, [r3, #8]
		task->state  = TASK_STOP;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	731a      	strb	r2, [r3, #12]
		arrayTail++;	   // увеличиваем "хвост"
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <RTOS_SetTask+0xa4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <RTOS_SetTask+0xa4>)
 80045bc:	6013      	str	r3, [r2, #0]
		_enableInterrupt();//Глобальное разрешение рерываний.
 80045be:	f7ff ffa3 	bl	8004508 <_enableInterrupt>
 80045c2:	e000      	b.n	80045c6 <RTOS_SetTask+0x9a>
	if(!taskFunc) return;
 80045c4:	bf00      	nop
	}
}
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	2000069c 	.word	0x2000069c
 80045d0:	2000073c 	.word	0x2000073c

080045d4 <RTOS_DeleteTask>:
//**********************************************************
/* Удаление задачи из списка
 *
 */
void RTOS_DeleteTask(void(*taskFunc)(void)){
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

	for(uint32_t i=0; i < arrayTail; i++)  //проходим по списку задач
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e028      	b.n	8004634 <RTOS_DeleteTask+0x60>
	{
		if(taskArray[i].pFunc == taskFunc) //если задача в списке найдена
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <RTOS_DeleteTask+0x70>)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d11d      	bne.n	800462e <RTOS_DeleteTask+0x5a>
		{
			_disableInterrupt();  //Глобальное запрещение прерываний.
 80045f2:	f7ff ff83 	bl	80044fc <_disableInterrupt>
			if(i != (arrayTail-1))//переносим последнюю задачу на место удаляемой
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <RTOS_DeleteTask+0x74>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d00d      	beq.n	800461e <RTOS_DeleteTask+0x4a>
			{
				taskArray[i] = taskArray[arrayTail-1];
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <RTOS_DeleteTask+0x74>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <RTOS_DeleteTask+0x70>)
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	0112      	lsls	r2, r2, #4
 800460e:	4411      	add	r1, r2
 8004610:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <RTOS_DeleteTask+0x70>)
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	4413      	add	r3, r2
 8004616:	460c      	mov	r4, r1
 8004618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800461a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
			arrayTail--;	   //уменьшаем указатель "хвоста"
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <RTOS_DeleteTask+0x74>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3b01      	subs	r3, #1
 8004624:	4a08      	ldr	r2, [pc, #32]	; (8004648 <RTOS_DeleteTask+0x74>)
 8004626:	6013      	str	r3, [r2, #0]
			_enableInterrupt();//Глобальное разрешение рерываний.
 8004628:	f7ff ff6e 	bl	8004508 <_enableInterrupt>
			return;
 800462c:	e007      	b.n	800463e <RTOS_DeleteTask+0x6a>
	for(uint32_t i=0; i < arrayTail; i++)  //проходим по списку задач
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <RTOS_DeleteTask+0x74>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	429a      	cmp	r2, r3
 800463c:	d3d1      	bcc.n	80045e2 <RTOS_DeleteTask+0xe>
		}
	}
}
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bd90      	pop	{r4, r7, pc}
 8004644:	2000069c 	.word	0x2000069c
 8004648:	2000073c 	.word	0x2000073c

0800464c <RTOS_DispatchLoop>:
//**********************************************************
/* Диспетчер РТОС, вызывается в main
 *
 */
void RTOS_DispatchLoop(void){
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0

	void(*function)(void);
	volatile task_t *task = &taskArray[0];
 8004652:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <RTOS_DispatchLoop+0x78>)
 8004654:	60fb      	str	r3, [r7, #12]
	//-----------------------------
	//проходим по списку задач
	for(uint32_t i=0; i< arrayTail; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	e029      	b.n	80046b0 <RTOS_DispatchLoop+0x64>
	{
		//если флаг на выполнение взведен,
		if(task->state == TASK_RUN)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	7b1b      	ldrb	r3, [r3, #12]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d11e      	bne.n	80046a4 <RTOS_DispatchLoop+0x58>
		{
			_disableInterrupt();   //Глобальное запрещение прерываний.
 8004666:	f7ff ff49 	bl	80044fc <_disableInterrupt>
			function = task->pFunc;// запоминаем задачу, т.к. во время выполнения может измениться индекс
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	607b      	str	r3, [r7, #4]
			if(task->period == 0) RTOS_DeleteTask(task->pFunc);//если период = 0 - удаляем задачу.
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <RTOS_DispatchLoop+0x38>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ffa9 	bl	80045d4 <RTOS_DeleteTask>
 8004682:	e00b      	b.n	800469c <RTOS_DispatchLoop+0x50>
			else
			{
				task->state = TASK_STOP;						  //иначе снимаем флаг запуска
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	731a      	strb	r2, [r3, #12]
				if(task->delay == 0) task->delay = task->period-1;//если задача не изменила задержку задаем ее
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d104      	bne.n	800469c <RTOS_DispatchLoop+0x50>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	1e5a      	subs	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	605a      	str	r2, [r3, #4]
															      //задача для себя может сделать паузу   ????????? не понятно
			}
			_enableInterrupt();//Глобальное разрешение рерываний.
 800469c:	f7ff ff34 	bl	8004508 <_enableInterrupt>
			//выполняем задачу
			(*function)();
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4798      	blx	r3
		}
		task++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3310      	adds	r3, #16
 80046a8:	60fb      	str	r3, [r7, #12]
	for(uint32_t i=0; i< arrayTail; i++)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <RTOS_DispatchLoop+0x7c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3d0      	bcc.n	800465c <RTOS_DispatchLoop+0x10>
	}
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	2000069c 	.word	0x2000069c
 80046c8:	2000073c 	.word	0x2000073c

080046cc <RTOS_TimerServiceLoop>:
//           TaskArray[i].run = 1;                      // взводим флаг запуска,
//      else TaskArray[i].delay--;                      // иначе уменьшаем время
//   }
//}

void RTOS_TimerServiceLoop(void){
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0

	volatile task_t *task = &taskArray[0];
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <RTOS_TimerServiceLoop+0x58>)
 80046d4:	607b      	str	r3, [r7, #4]
	//-----------------------------
	tickCount++;
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <RTOS_TimerServiceLoop+0x5c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3301      	adds	r3, #1
 80046dc:	4a12      	ldr	r2, [pc, #72]	; (8004728 <RTOS_TimerServiceLoop+0x5c>)
 80046de:	6013      	str	r3, [r2, #0]
	for(uint32_t i=0; i < arrayTail; i++)//проходим по списку задач
 80046e0:	2300      	movs	r3, #0
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	e012      	b.n	800470c <RTOS_TimerServiceLoop+0x40>
	{
	      if(task->delay == 0) task->state = TASK_RUN;//если время до выполнения истекло взводим флаг запуска,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <RTOS_TimerServiceLoop+0x2a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	731a      	strb	r2, [r3, #12]
 80046f4:	e004      	b.n	8004700 <RTOS_TimerServiceLoop+0x34>
	    else task->delay--;                           //иначе уменьшаем время
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]
	    task++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3310      	adds	r3, #16
 8004704:	607b      	str	r3, [r7, #4]
	for(uint32_t i=0; i < arrayTail; i++)//проходим по списку задач
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <RTOS_TimerServiceLoop+0x60>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d3e7      	bcc.n	80046e6 <RTOS_TimerServiceLoop+0x1a>

	    //Такая реализация занимает больше места.
//		if(TaskArray[i].delay == 0) TaskArray[i].state = TASK_RUN;
//		else TaskArray[i].delay--;
	}
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	2000069c 	.word	0x2000069c
 8004728:	20000740 	.word	0x20000740
 800472c:	2000073c 	.word	0x2000073c

08004730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004730:	480d      	ldr	r0, [pc, #52]	; (8004768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004732:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004734:	f7fd f85e 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004738:	480c      	ldr	r0, [pc, #48]	; (800476c <LoopForever+0x6>)
  ldr r1, =_edata
 800473a:	490d      	ldr	r1, [pc, #52]	; (8004770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800473c:	4a0d      	ldr	r2, [pc, #52]	; (8004774 <LoopForever+0xe>)
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004740:	e002      	b.n	8004748 <LoopCopyDataInit>

08004742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004746:	3304      	adds	r3, #4

08004748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800474a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800474c:	d3f9      	bcc.n	8004742 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004750:	4c0a      	ldr	r4, [pc, #40]	; (800477c <LoopForever+0x16>)
  movs r3, #0
 8004752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004754:	e001      	b.n	800475a <LoopFillZerobss>

08004756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004758:	3204      	adds	r2, #4

0800475a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800475a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800475c:	d3fb      	bcc.n	8004756 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800475e:	f000 f811 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004762:	f7fe fa77 	bl	8002c54 <main>

08004766 <LoopForever>:

LoopForever:
    b LoopForever
 8004766:	e7fe      	b.n	8004766 <LoopForever>
  ldr   r0, =_estack
 8004768:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800476c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004770:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8004774:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 8004778:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800477c:	20000744 	.word	0x20000744

08004780 <DebugMon_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004780:	e7fe      	b.n	8004780 <DebugMon_Handler>
	...

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	2600      	movs	r6, #0
 8004788:	4d0c      	ldr	r5, [pc, #48]	; (80047bc <__libc_init_array+0x38>)
 800478a:	4c0d      	ldr	r4, [pc, #52]	; (80047c0 <__libc_init_array+0x3c>)
 800478c:	1b64      	subs	r4, r4, r5
 800478e:	10a4      	asrs	r4, r4, #2
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	f000 fe24 	bl	80053e0 <_init>
 8004798:	2600      	movs	r6, #0
 800479a:	4d0a      	ldr	r5, [pc, #40]	; (80047c4 <__libc_init_array+0x40>)
 800479c:	4c0a      	ldr	r4, [pc, #40]	; (80047c8 <__libc_init_array+0x44>)
 800479e:	1b64      	subs	r4, r4, r5
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08005ee0 	.word	0x08005ee0
 80047c0:	08005ee0 	.word	0x08005ee0
 80047c4:	08005ee0 	.word	0x08005ee0
 80047c8:	08005ee4 	.word	0x08005ee4

080047cc <cosf>:
 80047cc:	b507      	push	{r0, r1, r2, lr}
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <cosf+0x6c>)
 80047d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80047d4:	4293      	cmp	r3, r2
 80047d6:	4601      	mov	r1, r0
 80047d8:	dc05      	bgt.n	80047e6 <cosf+0x1a>
 80047da:	2100      	movs	r1, #0
 80047dc:	b003      	add	sp, #12
 80047de:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e2:	f000 b865 	b.w	80048b0 <__kernel_cosf>
 80047e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80047ea:	db04      	blt.n	80047f6 <cosf+0x2a>
 80047ec:	f7fc f80c 	bl	8000808 <__aeabi_fsub>
 80047f0:	b003      	add	sp, #12
 80047f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80047f6:	4669      	mov	r1, sp
 80047f8:	f000 f950 	bl	8004a9c <__ieee754_rem_pio2f>
 80047fc:	f000 0203 	and.w	r2, r0, #3
 8004800:	2a01      	cmp	r2, #1
 8004802:	d007      	beq.n	8004814 <cosf+0x48>
 8004804:	2a02      	cmp	r2, #2
 8004806:	d00c      	beq.n	8004822 <cosf+0x56>
 8004808:	b982      	cbnz	r2, 800482c <cosf+0x60>
 800480a:	9901      	ldr	r1, [sp, #4]
 800480c:	9800      	ldr	r0, [sp, #0]
 800480e:	f000 f84f 	bl	80048b0 <__kernel_cosf>
 8004812:	e7ed      	b.n	80047f0 <cosf+0x24>
 8004814:	9901      	ldr	r1, [sp, #4]
 8004816:	9800      	ldr	r0, [sp, #0]
 8004818:	f000 f8ca 	bl	80049b0 <__kernel_sinf>
 800481c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004820:	e7e6      	b.n	80047f0 <cosf+0x24>
 8004822:	9901      	ldr	r1, [sp, #4]
 8004824:	9800      	ldr	r0, [sp, #0]
 8004826:	f000 f843 	bl	80048b0 <__kernel_cosf>
 800482a:	e7f7      	b.n	800481c <cosf+0x50>
 800482c:	2201      	movs	r2, #1
 800482e:	9901      	ldr	r1, [sp, #4]
 8004830:	9800      	ldr	r0, [sp, #0]
 8004832:	f000 f8bd 	bl	80049b0 <__kernel_sinf>
 8004836:	e7db      	b.n	80047f0 <cosf+0x24>
 8004838:	3f490fd8 	.word	0x3f490fd8

0800483c <sinf>:
 800483c:	b507      	push	{r0, r1, r2, lr}
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <sinf+0x70>)
 8004840:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004844:	4293      	cmp	r3, r2
 8004846:	4601      	mov	r1, r0
 8004848:	dc06      	bgt.n	8004858 <sinf+0x1c>
 800484a:	2200      	movs	r2, #0
 800484c:	2100      	movs	r1, #0
 800484e:	b003      	add	sp, #12
 8004850:	f85d eb04 	ldr.w	lr, [sp], #4
 8004854:	f000 b8ac 	b.w	80049b0 <__kernel_sinf>
 8004858:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800485c:	db04      	blt.n	8004868 <sinf+0x2c>
 800485e:	f7fb ffd3 	bl	8000808 <__aeabi_fsub>
 8004862:	b003      	add	sp, #12
 8004864:	f85d fb04 	ldr.w	pc, [sp], #4
 8004868:	4669      	mov	r1, sp
 800486a:	f000 f917 	bl	8004a9c <__ieee754_rem_pio2f>
 800486e:	f000 0003 	and.w	r0, r0, #3
 8004872:	2801      	cmp	r0, #1
 8004874:	d008      	beq.n	8004888 <sinf+0x4c>
 8004876:	2802      	cmp	r0, #2
 8004878:	d00b      	beq.n	8004892 <sinf+0x56>
 800487a:	b990      	cbnz	r0, 80048a2 <sinf+0x66>
 800487c:	2201      	movs	r2, #1
 800487e:	9901      	ldr	r1, [sp, #4]
 8004880:	9800      	ldr	r0, [sp, #0]
 8004882:	f000 f895 	bl	80049b0 <__kernel_sinf>
 8004886:	e7ec      	b.n	8004862 <sinf+0x26>
 8004888:	9901      	ldr	r1, [sp, #4]
 800488a:	9800      	ldr	r0, [sp, #0]
 800488c:	f000 f810 	bl	80048b0 <__kernel_cosf>
 8004890:	e7e7      	b.n	8004862 <sinf+0x26>
 8004892:	2201      	movs	r2, #1
 8004894:	9901      	ldr	r1, [sp, #4]
 8004896:	9800      	ldr	r0, [sp, #0]
 8004898:	f000 f88a 	bl	80049b0 <__kernel_sinf>
 800489c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80048a0:	e7df      	b.n	8004862 <sinf+0x26>
 80048a2:	9901      	ldr	r1, [sp, #4]
 80048a4:	9800      	ldr	r0, [sp, #0]
 80048a6:	f000 f803 	bl	80048b0 <__kernel_cosf>
 80048aa:	e7f7      	b.n	800489c <sinf+0x60>
 80048ac:	3f490fd8 	.word	0x3f490fd8

080048b0 <__kernel_cosf>:
 80048b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80048b8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80048bc:	4606      	mov	r6, r0
 80048be:	4688      	mov	r8, r1
 80048c0:	da03      	bge.n	80048ca <__kernel_cosf+0x1a>
 80048c2:	f7fc f921 	bl	8000b08 <__aeabi_f2iz>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d05c      	beq.n	8004984 <__kernel_cosf+0xd4>
 80048ca:	4631      	mov	r1, r6
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7fb fc4f 	bl	8000170 <__aeabi_fmul>
 80048d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80048d6:	4605      	mov	r5, r0
 80048d8:	f7fb fc4a 	bl	8000170 <__aeabi_fmul>
 80048dc:	492b      	ldr	r1, [pc, #172]	; (800498c <__kernel_cosf+0xdc>)
 80048de:	4607      	mov	r7, r0
 80048e0:	4628      	mov	r0, r5
 80048e2:	f7fb fc45 	bl	8000170 <__aeabi_fmul>
 80048e6:	492a      	ldr	r1, [pc, #168]	; (8004990 <__kernel_cosf+0xe0>)
 80048e8:	f7fb ff90 	bl	800080c <__addsf3>
 80048ec:	4629      	mov	r1, r5
 80048ee:	f7fb fc3f 	bl	8000170 <__aeabi_fmul>
 80048f2:	4928      	ldr	r1, [pc, #160]	; (8004994 <__kernel_cosf+0xe4>)
 80048f4:	f7fb ff88 	bl	8000808 <__aeabi_fsub>
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fc39 	bl	8000170 <__aeabi_fmul>
 80048fe:	4926      	ldr	r1, [pc, #152]	; (8004998 <__kernel_cosf+0xe8>)
 8004900:	f7fb ff84 	bl	800080c <__addsf3>
 8004904:	4629      	mov	r1, r5
 8004906:	f7fb fc33 	bl	8000170 <__aeabi_fmul>
 800490a:	4924      	ldr	r1, [pc, #144]	; (800499c <__kernel_cosf+0xec>)
 800490c:	f7fb ff7c 	bl	8000808 <__aeabi_fsub>
 8004910:	4629      	mov	r1, r5
 8004912:	f7fb fc2d 	bl	8000170 <__aeabi_fmul>
 8004916:	4922      	ldr	r1, [pc, #136]	; (80049a0 <__kernel_cosf+0xf0>)
 8004918:	f7fb ff78 	bl	800080c <__addsf3>
 800491c:	4629      	mov	r1, r5
 800491e:	f7fb fc27 	bl	8000170 <__aeabi_fmul>
 8004922:	4629      	mov	r1, r5
 8004924:	f7fb fc24 	bl	8000170 <__aeabi_fmul>
 8004928:	4641      	mov	r1, r8
 800492a:	4605      	mov	r5, r0
 800492c:	4630      	mov	r0, r6
 800492e:	f7fb fc1f 	bl	8000170 <__aeabi_fmul>
 8004932:	4601      	mov	r1, r0
 8004934:	4628      	mov	r0, r5
 8004936:	f7fb ff67 	bl	8000808 <__aeabi_fsub>
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <__kernel_cosf+0xf4>)
 800493c:	4605      	mov	r5, r0
 800493e:	429c      	cmp	r4, r3
 8004940:	dc0a      	bgt.n	8004958 <__kernel_cosf+0xa8>
 8004942:	4601      	mov	r1, r0
 8004944:	4638      	mov	r0, r7
 8004946:	f7fb ff5f 	bl	8000808 <__aeabi_fsub>
 800494a:	4601      	mov	r1, r0
 800494c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004950:	f7fb ff5a 	bl	8000808 <__aeabi_fsub>
 8004954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <__kernel_cosf+0xf8>)
 800495a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800495e:	429c      	cmp	r4, r3
 8004960:	bfcc      	ite	gt
 8004962:	4c12      	ldrgt	r4, [pc, #72]	; (80049ac <__kernel_cosf+0xfc>)
 8004964:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8004968:	4621      	mov	r1, r4
 800496a:	f7fb ff4d 	bl	8000808 <__aeabi_fsub>
 800496e:	4621      	mov	r1, r4
 8004970:	4606      	mov	r6, r0
 8004972:	4638      	mov	r0, r7
 8004974:	f7fb ff48 	bl	8000808 <__aeabi_fsub>
 8004978:	4629      	mov	r1, r5
 800497a:	f7fb ff45 	bl	8000808 <__aeabi_fsub>
 800497e:	4601      	mov	r1, r0
 8004980:	4630      	mov	r0, r6
 8004982:	e7e5      	b.n	8004950 <__kernel_cosf+0xa0>
 8004984:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004988:	e7e4      	b.n	8004954 <__kernel_cosf+0xa4>
 800498a:	bf00      	nop
 800498c:	ad47d74e 	.word	0xad47d74e
 8004990:	310f74f6 	.word	0x310f74f6
 8004994:	3493f27c 	.word	0x3493f27c
 8004998:	37d00d01 	.word	0x37d00d01
 800499c:	3ab60b61 	.word	0x3ab60b61
 80049a0:	3d2aaaab 	.word	0x3d2aaaab
 80049a4:	3e999999 	.word	0x3e999999
 80049a8:	3f480000 	.word	0x3f480000
 80049ac:	3e900000 	.word	0x3e900000

080049b0 <__kernel_sinf>:
 80049b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80049b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80049bc:	4604      	mov	r4, r0
 80049be:	460f      	mov	r7, r1
 80049c0:	4691      	mov	r9, r2
 80049c2:	da03      	bge.n	80049cc <__kernel_sinf+0x1c>
 80049c4:	f7fc f8a0 	bl	8000b08 <__aeabi_f2iz>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d035      	beq.n	8004a38 <__kernel_sinf+0x88>
 80049cc:	4621      	mov	r1, r4
 80049ce:	4620      	mov	r0, r4
 80049d0:	f7fb fbce 	bl	8000170 <__aeabi_fmul>
 80049d4:	4605      	mov	r5, r0
 80049d6:	4601      	mov	r1, r0
 80049d8:	4620      	mov	r0, r4
 80049da:	f7fb fbc9 	bl	8000170 <__aeabi_fmul>
 80049de:	4929      	ldr	r1, [pc, #164]	; (8004a84 <__kernel_sinf+0xd4>)
 80049e0:	4606      	mov	r6, r0
 80049e2:	4628      	mov	r0, r5
 80049e4:	f7fb fbc4 	bl	8000170 <__aeabi_fmul>
 80049e8:	4927      	ldr	r1, [pc, #156]	; (8004a88 <__kernel_sinf+0xd8>)
 80049ea:	f7fb ff0d 	bl	8000808 <__aeabi_fsub>
 80049ee:	4629      	mov	r1, r5
 80049f0:	f7fb fbbe 	bl	8000170 <__aeabi_fmul>
 80049f4:	4925      	ldr	r1, [pc, #148]	; (8004a8c <__kernel_sinf+0xdc>)
 80049f6:	f7fb ff09 	bl	800080c <__addsf3>
 80049fa:	4629      	mov	r1, r5
 80049fc:	f7fb fbb8 	bl	8000170 <__aeabi_fmul>
 8004a00:	4923      	ldr	r1, [pc, #140]	; (8004a90 <__kernel_sinf+0xe0>)
 8004a02:	f7fb ff01 	bl	8000808 <__aeabi_fsub>
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fbb2 	bl	8000170 <__aeabi_fmul>
 8004a0c:	4921      	ldr	r1, [pc, #132]	; (8004a94 <__kernel_sinf+0xe4>)
 8004a0e:	f7fb fefd 	bl	800080c <__addsf3>
 8004a12:	4680      	mov	r8, r0
 8004a14:	f1b9 0f00 	cmp.w	r9, #0
 8004a18:	d111      	bne.n	8004a3e <__kernel_sinf+0x8e>
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7fb fba7 	bl	8000170 <__aeabi_fmul>
 8004a22:	491d      	ldr	r1, [pc, #116]	; (8004a98 <__kernel_sinf+0xe8>)
 8004a24:	f7fb fef0 	bl	8000808 <__aeabi_fsub>
 8004a28:	4631      	mov	r1, r6
 8004a2a:	f7fb fba1 	bl	8000170 <__aeabi_fmul>
 8004a2e:	4601      	mov	r1, r0
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7fb feeb 	bl	800080c <__addsf3>
 8004a36:	4604      	mov	r4, r0
 8004a38:	4620      	mov	r0, r4
 8004a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a42:	4638      	mov	r0, r7
 8004a44:	f7fb fb94 	bl	8000170 <__aeabi_fmul>
 8004a48:	4641      	mov	r1, r8
 8004a4a:	4681      	mov	r9, r0
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7fb fb8f 	bl	8000170 <__aeabi_fmul>
 8004a52:	4601      	mov	r1, r0
 8004a54:	4648      	mov	r0, r9
 8004a56:	f7fb fed7 	bl	8000808 <__aeabi_fsub>
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fb88 	bl	8000170 <__aeabi_fmul>
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fb fed1 	bl	8000808 <__aeabi_fsub>
 8004a66:	490c      	ldr	r1, [pc, #48]	; (8004a98 <__kernel_sinf+0xe8>)
 8004a68:	4605      	mov	r5, r0
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f7fb fb80 	bl	8000170 <__aeabi_fmul>
 8004a70:	4601      	mov	r1, r0
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7fb feca 	bl	800080c <__addsf3>
 8004a78:	4601      	mov	r1, r0
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7fb fec4 	bl	8000808 <__aeabi_fsub>
 8004a80:	e7d9      	b.n	8004a36 <__kernel_sinf+0x86>
 8004a82:	bf00      	nop
 8004a84:	2f2ec9d3 	.word	0x2f2ec9d3
 8004a88:	32d72f34 	.word	0x32d72f34
 8004a8c:	3638ef1b 	.word	0x3638ef1b
 8004a90:	39500d01 	.word	0x39500d01
 8004a94:	3c088889 	.word	0x3c088889
 8004a98:	3e2aaaab 	.word	0x3e2aaaab

08004a9c <__ieee754_rem_pio2f>:
 8004a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa0:	4aa0      	ldr	r2, [pc, #640]	; (8004d24 <__ieee754_rem_pio2f+0x288>)
 8004aa2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004aa6:	4296      	cmp	r6, r2
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	4682      	mov	sl, r0
 8004aac:	b087      	sub	sp, #28
 8004aae:	dc04      	bgt.n	8004aba <__ieee754_rem_pio2f+0x1e>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6008      	str	r0, [r1, #0]
 8004ab4:	604b      	str	r3, [r1, #4]
 8004ab6:	2500      	movs	r5, #0
 8004ab8:	e01a      	b.n	8004af0 <__ieee754_rem_pio2f+0x54>
 8004aba:	4a9b      	ldr	r2, [pc, #620]	; (8004d28 <__ieee754_rem_pio2f+0x28c>)
 8004abc:	4296      	cmp	r6, r2
 8004abe:	dc4b      	bgt.n	8004b58 <__ieee754_rem_pio2f+0xbc>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	499a      	ldr	r1, [pc, #616]	; (8004d2c <__ieee754_rem_pio2f+0x290>)
 8004ac4:	4f9a      	ldr	r7, [pc, #616]	; (8004d30 <__ieee754_rem_pio2f+0x294>)
 8004ac6:	f026 060f 	bic.w	r6, r6, #15
 8004aca:	dd23      	ble.n	8004b14 <__ieee754_rem_pio2f+0x78>
 8004acc:	f7fb fe9c 	bl	8000808 <__aeabi_fsub>
 8004ad0:	42be      	cmp	r6, r7
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	d010      	beq.n	8004af8 <__ieee754_rem_pio2f+0x5c>
 8004ad6:	4997      	ldr	r1, [pc, #604]	; (8004d34 <__ieee754_rem_pio2f+0x298>)
 8004ad8:	f7fb fe96 	bl	8000808 <__aeabi_fsub>
 8004adc:	4601      	mov	r1, r0
 8004ade:	6020      	str	r0, [r4, #0]
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f7fb fe91 	bl	8000808 <__aeabi_fsub>
 8004ae6:	4993      	ldr	r1, [pc, #588]	; (8004d34 <__ieee754_rem_pio2f+0x298>)
 8004ae8:	f7fb fe8e 	bl	8000808 <__aeabi_fsub>
 8004aec:	2501      	movs	r5, #1
 8004aee:	6060      	str	r0, [r4, #4]
 8004af0:	4628      	mov	r0, r5
 8004af2:	b007      	add	sp, #28
 8004af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af8:	498f      	ldr	r1, [pc, #572]	; (8004d38 <__ieee754_rem_pio2f+0x29c>)
 8004afa:	f7fb fe85 	bl	8000808 <__aeabi_fsub>
 8004afe:	498f      	ldr	r1, [pc, #572]	; (8004d3c <__ieee754_rem_pio2f+0x2a0>)
 8004b00:	4605      	mov	r5, r0
 8004b02:	f7fb fe81 	bl	8000808 <__aeabi_fsub>
 8004b06:	4601      	mov	r1, r0
 8004b08:	6020      	str	r0, [r4, #0]
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7fb fe7c 	bl	8000808 <__aeabi_fsub>
 8004b10:	498a      	ldr	r1, [pc, #552]	; (8004d3c <__ieee754_rem_pio2f+0x2a0>)
 8004b12:	e7e9      	b.n	8004ae8 <__ieee754_rem_pio2f+0x4c>
 8004b14:	f7fb fe7a 	bl	800080c <__addsf3>
 8004b18:	42be      	cmp	r6, r7
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	d00e      	beq.n	8004b3c <__ieee754_rem_pio2f+0xa0>
 8004b1e:	4985      	ldr	r1, [pc, #532]	; (8004d34 <__ieee754_rem_pio2f+0x298>)
 8004b20:	f7fb fe74 	bl	800080c <__addsf3>
 8004b24:	4601      	mov	r1, r0
 8004b26:	6020      	str	r0, [r4, #0]
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7fb fe6d 	bl	8000808 <__aeabi_fsub>
 8004b2e:	4981      	ldr	r1, [pc, #516]	; (8004d34 <__ieee754_rem_pio2f+0x298>)
 8004b30:	f7fb fe6c 	bl	800080c <__addsf3>
 8004b34:	f04f 35ff 	mov.w	r5, #4294967295
 8004b38:	6060      	str	r0, [r4, #4]
 8004b3a:	e7d9      	b.n	8004af0 <__ieee754_rem_pio2f+0x54>
 8004b3c:	497e      	ldr	r1, [pc, #504]	; (8004d38 <__ieee754_rem_pio2f+0x29c>)
 8004b3e:	f7fb fe65 	bl	800080c <__addsf3>
 8004b42:	497e      	ldr	r1, [pc, #504]	; (8004d3c <__ieee754_rem_pio2f+0x2a0>)
 8004b44:	4605      	mov	r5, r0
 8004b46:	f7fb fe61 	bl	800080c <__addsf3>
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	6020      	str	r0, [r4, #0]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7fb fe5a 	bl	8000808 <__aeabi_fsub>
 8004b54:	4979      	ldr	r1, [pc, #484]	; (8004d3c <__ieee754_rem_pio2f+0x2a0>)
 8004b56:	e7eb      	b.n	8004b30 <__ieee754_rem_pio2f+0x94>
 8004b58:	4a79      	ldr	r2, [pc, #484]	; (8004d40 <__ieee754_rem_pio2f+0x2a4>)
 8004b5a:	4296      	cmp	r6, r2
 8004b5c:	f300 8091 	bgt.w	8004c82 <__ieee754_rem_pio2f+0x1e6>
 8004b60:	f000 f8fa 	bl	8004d58 <fabsf>
 8004b64:	4977      	ldr	r1, [pc, #476]	; (8004d44 <__ieee754_rem_pio2f+0x2a8>)
 8004b66:	4607      	mov	r7, r0
 8004b68:	f7fb fb02 	bl	8000170 <__aeabi_fmul>
 8004b6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004b70:	f7fb fe4c 	bl	800080c <__addsf3>
 8004b74:	f7fb ffc8 	bl	8000b08 <__aeabi_f2iz>
 8004b78:	4605      	mov	r5, r0
 8004b7a:	f7fb fefb 	bl	8000974 <__aeabi_i2f>
 8004b7e:	496b      	ldr	r1, [pc, #428]	; (8004d2c <__ieee754_rem_pio2f+0x290>)
 8004b80:	4681      	mov	r9, r0
 8004b82:	f7fb faf5 	bl	8000170 <__aeabi_fmul>
 8004b86:	4601      	mov	r1, r0
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f7fb fe3d 	bl	8000808 <__aeabi_fsub>
 8004b8e:	4969      	ldr	r1, [pc, #420]	; (8004d34 <__ieee754_rem_pio2f+0x298>)
 8004b90:	4680      	mov	r8, r0
 8004b92:	4648      	mov	r0, r9
 8004b94:	f7fb faec 	bl	8000170 <__aeabi_fmul>
 8004b98:	2d1f      	cmp	r5, #31
 8004b9a:	4607      	mov	r7, r0
 8004b9c:	dc0c      	bgt.n	8004bb8 <__ieee754_rem_pio2f+0x11c>
 8004b9e:	4a6a      	ldr	r2, [pc, #424]	; (8004d48 <__ieee754_rem_pio2f+0x2ac>)
 8004ba0:	1e69      	subs	r1, r5, #1
 8004ba2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004ba6:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <__ieee754_rem_pio2f+0x11c>
 8004bae:	4639      	mov	r1, r7
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	f7fb fe29 	bl	8000808 <__aeabi_fsub>
 8004bb6:	e00b      	b.n	8004bd0 <__ieee754_rem_pio2f+0x134>
 8004bb8:	4639      	mov	r1, r7
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f7fb fe24 	bl	8000808 <__aeabi_fsub>
 8004bc0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004bc4:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8004bce:	dc01      	bgt.n	8004bd4 <__ieee754_rem_pio2f+0x138>
 8004bd0:	6020      	str	r0, [r4, #0]
 8004bd2:	e026      	b.n	8004c22 <__ieee754_rem_pio2f+0x186>
 8004bd4:	4958      	ldr	r1, [pc, #352]	; (8004d38 <__ieee754_rem_pio2f+0x29c>)
 8004bd6:	4648      	mov	r0, r9
 8004bd8:	f7fb faca 	bl	8000170 <__aeabi_fmul>
 8004bdc:	4607      	mov	r7, r0
 8004bde:	4601      	mov	r1, r0
 8004be0:	4640      	mov	r0, r8
 8004be2:	f7fb fe11 	bl	8000808 <__aeabi_fsub>
 8004be6:	4601      	mov	r1, r0
 8004be8:	4606      	mov	r6, r0
 8004bea:	4640      	mov	r0, r8
 8004bec:	f7fb fe0c 	bl	8000808 <__aeabi_fsub>
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	f7fb fe09 	bl	8000808 <__aeabi_fsub>
 8004bf6:	4607      	mov	r7, r0
 8004bf8:	4950      	ldr	r1, [pc, #320]	; (8004d3c <__ieee754_rem_pio2f+0x2a0>)
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	f7fb fab8 	bl	8000170 <__aeabi_fmul>
 8004c00:	4639      	mov	r1, r7
 8004c02:	f7fb fe01 	bl	8000808 <__aeabi_fsub>
 8004c06:	4601      	mov	r1, r0
 8004c08:	4607      	mov	r7, r0
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7fb fdfc 	bl	8000808 <__aeabi_fsub>
 8004c10:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004c14:	ebab 0b03 	sub.w	fp, fp, r3
 8004c18:	f1bb 0f19 	cmp.w	fp, #25
 8004c1c:	dc16      	bgt.n	8004c4c <__ieee754_rem_pio2f+0x1b0>
 8004c1e:	46b0      	mov	r8, r6
 8004c20:	6020      	str	r0, [r4, #0]
 8004c22:	6826      	ldr	r6, [r4, #0]
 8004c24:	4640      	mov	r0, r8
 8004c26:	4631      	mov	r1, r6
 8004c28:	f7fb fdee 	bl	8000808 <__aeabi_fsub>
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	f7fb fdeb 	bl	8000808 <__aeabi_fsub>
 8004c32:	f1ba 0f00 	cmp.w	sl, #0
 8004c36:	6060      	str	r0, [r4, #4]
 8004c38:	f6bf af5a 	bge.w	8004af0 <__ieee754_rem_pio2f+0x54>
 8004c3c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004c40:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004c44:	6026      	str	r6, [r4, #0]
 8004c46:	6060      	str	r0, [r4, #4]
 8004c48:	426d      	negs	r5, r5
 8004c4a:	e751      	b.n	8004af0 <__ieee754_rem_pio2f+0x54>
 8004c4c:	493f      	ldr	r1, [pc, #252]	; (8004d4c <__ieee754_rem_pio2f+0x2b0>)
 8004c4e:	4648      	mov	r0, r9
 8004c50:	f7fb fa8e 	bl	8000170 <__aeabi_fmul>
 8004c54:	4607      	mov	r7, r0
 8004c56:	4601      	mov	r1, r0
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f7fb fdd5 	bl	8000808 <__aeabi_fsub>
 8004c5e:	4601      	mov	r1, r0
 8004c60:	4680      	mov	r8, r0
 8004c62:	4630      	mov	r0, r6
 8004c64:	f7fb fdd0 	bl	8000808 <__aeabi_fsub>
 8004c68:	4639      	mov	r1, r7
 8004c6a:	f7fb fdcd 	bl	8000808 <__aeabi_fsub>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	4937      	ldr	r1, [pc, #220]	; (8004d50 <__ieee754_rem_pio2f+0x2b4>)
 8004c72:	4648      	mov	r0, r9
 8004c74:	f7fb fa7c 	bl	8000170 <__aeabi_fmul>
 8004c78:	4631      	mov	r1, r6
 8004c7a:	f7fb fdc5 	bl	8000808 <__aeabi_fsub>
 8004c7e:	4607      	mov	r7, r0
 8004c80:	e795      	b.n	8004bae <__ieee754_rem_pio2f+0x112>
 8004c82:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004c86:	db05      	blt.n	8004c94 <__ieee754_rem_pio2f+0x1f8>
 8004c88:	4601      	mov	r1, r0
 8004c8a:	f7fb fdbd 	bl	8000808 <__aeabi_fsub>
 8004c8e:	6060      	str	r0, [r4, #4]
 8004c90:	6020      	str	r0, [r4, #0]
 8004c92:	e710      	b.n	8004ab6 <__ieee754_rem_pio2f+0x1a>
 8004c94:	15f7      	asrs	r7, r6, #23
 8004c96:	3f86      	subs	r7, #134	; 0x86
 8004c98:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f7fb ff33 	bl	8000b08 <__aeabi_f2iz>
 8004ca2:	f7fb fe67 	bl	8000974 <__aeabi_i2f>
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	9003      	str	r0, [sp, #12]
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7fb fdac 	bl	8000808 <__aeabi_fsub>
 8004cb0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004cb4:	f7fb fa5c 	bl	8000170 <__aeabi_fmul>
 8004cb8:	4606      	mov	r6, r0
 8004cba:	f7fb ff25 	bl	8000b08 <__aeabi_f2iz>
 8004cbe:	f7fb fe59 	bl	8000974 <__aeabi_i2f>
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	9004      	str	r0, [sp, #16]
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7fb fd9d 	bl	8000808 <__aeabi_fsub>
 8004cce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004cd2:	f7fb fa4d 	bl	8000170 <__aeabi_fmul>
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	9005      	str	r0, [sp, #20]
 8004cda:	f7fb fee3 	bl	8000aa4 <__aeabi_fcmpeq>
 8004cde:	b1f0      	cbz	r0, 8004d1e <__ieee754_rem_pio2f+0x282>
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f7fb fede 	bl	8000aa4 <__aeabi_fcmpeq>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2302      	moveq	r3, #2
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <__ieee754_rem_pio2f+0x2b8>)
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	9201      	str	r2, [sp, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	a803      	add	r0, sp, #12
 8004cfa:	9200      	str	r2, [sp, #0]
 8004cfc:	463a      	mov	r2, r7
 8004cfe:	f000 f82f 	bl	8004d60 <__kernel_rem_pio2f>
 8004d02:	f1ba 0f00 	cmp.w	sl, #0
 8004d06:	4605      	mov	r5, r0
 8004d08:	f6bf aef2 	bge.w	8004af0 <__ieee754_rem_pio2f+0x54>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	6863      	ldr	r3, [r4, #4]
 8004d16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	e794      	b.n	8004c48 <__ieee754_rem_pio2f+0x1ac>
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e7e6      	b.n	8004cf0 <__ieee754_rem_pio2f+0x254>
 8004d22:	bf00      	nop
 8004d24:	3f490fd8 	.word	0x3f490fd8
 8004d28:	4016cbe3 	.word	0x4016cbe3
 8004d2c:	3fc90f80 	.word	0x3fc90f80
 8004d30:	3fc90fd0 	.word	0x3fc90fd0
 8004d34:	37354443 	.word	0x37354443
 8004d38:	37354400 	.word	0x37354400
 8004d3c:	2e85a308 	.word	0x2e85a308
 8004d40:	43490f80 	.word	0x43490f80
 8004d44:	3f22f984 	.word	0x3f22f984
 8004d48:	08005b10 	.word	0x08005b10
 8004d4c:	2e85a300 	.word	0x2e85a300
 8004d50:	248d3132 	.word	0x248d3132
 8004d54:	08005b90 	.word	0x08005b90

08004d58 <fabsf>:
 8004d58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004d5c:	4770      	bx	lr
	...

08004d60 <__kernel_rem_pio2f>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	b0db      	sub	sp, #364	; 0x16c
 8004d66:	9202      	str	r2, [sp, #8]
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004d6c:	4bbb      	ldr	r3, [pc, #748]	; (800505c <__kernel_rem_pio2f+0x2fc>)
 8004d6e:	9005      	str	r0, [sp, #20]
 8004d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d74:	9100      	str	r1, [sp, #0]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	9b04      	ldr	r3, [sp, #16]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	9303      	str	r3, [sp, #12]
 8004d7e:	9b02      	ldr	r3, [sp, #8]
 8004d80:	1d1a      	adds	r2, r3, #4
 8004d82:	f2c0 809b 	blt.w	8004ebc <__kernel_rem_pio2f+0x15c>
 8004d86:	1edc      	subs	r4, r3, #3
 8004d88:	bf48      	it	mi
 8004d8a:	1d1c      	addmi	r4, r3, #4
 8004d8c:	10e4      	asrs	r4, r4, #3
 8004d8e:	2500      	movs	r5, #0
 8004d90:	f04f 0b00 	mov.w	fp, #0
 8004d94:	1c67      	adds	r7, r4, #1
 8004d96:	00fb      	lsls	r3, r7, #3
 8004d98:	9306      	str	r3, [sp, #24]
 8004d9a:	9b02      	ldr	r3, [sp, #8]
 8004d9c:	9a03      	ldr	r2, [sp, #12]
 8004d9e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8004da2:	9b01      	ldr	r3, [sp, #4]
 8004da4:	eba4 0802 	sub.w	r8, r4, r2
 8004da8:	eb03 0902 	add.w	r9, r3, r2
 8004dac:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004dae:	ae1e      	add	r6, sp, #120	; 0x78
 8004db0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004db4:	454d      	cmp	r5, r9
 8004db6:	f340 8083 	ble.w	8004ec0 <__kernel_rem_pio2f+0x160>
 8004dba:	9a04      	ldr	r2, [sp, #16]
 8004dbc:	ab1e      	add	r3, sp, #120	; 0x78
 8004dbe:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8004dc2:	f04f 0900 	mov.w	r9, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8004dcc:	9a01      	ldr	r2, [sp, #4]
 8004dce:	4591      	cmp	r9, r2
 8004dd0:	f340 809e 	ble.w	8004f10 <__kernel_rem_pio2f+0x1b0>
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	aa0a      	add	r2, sp, #40	; 0x28
 8004dd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ddc:	9308      	str	r3, [sp, #32]
 8004dde:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004de0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004de4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004de8:	9307      	str	r3, [sp, #28]
 8004dea:	ac0a      	add	r4, sp, #40	; 0x28
 8004dec:	4626      	mov	r6, r4
 8004dee:	46c3      	mov	fp, r8
 8004df0:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8004df4:	ab5a      	add	r3, sp, #360	; 0x168
 8004df6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8004dfa:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8004dfe:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8004e02:	f1bb 0f00 	cmp.w	fp, #0
 8004e06:	f300 8088 	bgt.w	8004f1a <__kernel_rem_pio2f+0x1ba>
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 fa5b 	bl	80052c8 <scalbnf>
 8004e12:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8004e16:	4605      	mov	r5, r0
 8004e18:	f7fb f9aa 	bl	8000170 <__aeabi_fmul>
 8004e1c:	f000 faa0 	bl	8005360 <floorf>
 8004e20:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8004e24:	f7fb f9a4 	bl	8000170 <__aeabi_fmul>
 8004e28:	4601      	mov	r1, r0
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7fb fcec 	bl	8000808 <__aeabi_fsub>
 8004e30:	4605      	mov	r5, r0
 8004e32:	f7fb fe69 	bl	8000b08 <__aeabi_f2iz>
 8004e36:	4606      	mov	r6, r0
 8004e38:	f7fb fd9c 	bl	8000974 <__aeabi_i2f>
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f7fb fce2 	bl	8000808 <__aeabi_fsub>
 8004e44:	2f00      	cmp	r7, #0
 8004e46:	4681      	mov	r9, r0
 8004e48:	f340 8086 	ble.w	8004f58 <__kernel_rem_pio2f+0x1f8>
 8004e4c:	f108 32ff 	add.w	r2, r8, #4294967295
 8004e50:	ab0a      	add	r3, sp, #40	; 0x28
 8004e52:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8004e56:	f1c7 0108 	rsb	r1, r7, #8
 8004e5a:	fa45 f301 	asr.w	r3, r5, r1
 8004e5e:	441e      	add	r6, r3
 8004e60:	408b      	lsls	r3, r1
 8004e62:	1aed      	subs	r5, r5, r3
 8004e64:	ab0a      	add	r3, sp, #40	; 0x28
 8004e66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004e6a:	f1c7 0307 	rsb	r3, r7, #7
 8004e6e:	411d      	asrs	r5, r3
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	dd7f      	ble.n	8004f74 <__kernel_rem_pio2f+0x214>
 8004e74:	2200      	movs	r2, #0
 8004e76:	4692      	mov	sl, r2
 8004e78:	3601      	adds	r6, #1
 8004e7a:	4590      	cmp	r8, r2
 8004e7c:	f300 80b0 	bgt.w	8004fe0 <__kernel_rem_pio2f+0x280>
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	dd05      	ble.n	8004e90 <__kernel_rem_pio2f+0x130>
 8004e84:	2f01      	cmp	r7, #1
 8004e86:	f000 80bd 	beq.w	8005004 <__kernel_rem_pio2f+0x2a4>
 8004e8a:	2f02      	cmp	r7, #2
 8004e8c:	f000 80c5 	beq.w	800501a <__kernel_rem_pio2f+0x2ba>
 8004e90:	2d02      	cmp	r5, #2
 8004e92:	d16f      	bne.n	8004f74 <__kernel_rem_pio2f+0x214>
 8004e94:	4649      	mov	r1, r9
 8004e96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004e9a:	f7fb fcb5 	bl	8000808 <__aeabi_fsub>
 8004e9e:	4681      	mov	r9, r0
 8004ea0:	f1ba 0f00 	cmp.w	sl, #0
 8004ea4:	d066      	beq.n	8004f74 <__kernel_rem_pio2f+0x214>
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004eac:	f000 fa0c 	bl	80052c8 <scalbnf>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4648      	mov	r0, r9
 8004eb4:	f7fb fca8 	bl	8000808 <__aeabi_fsub>
 8004eb8:	4681      	mov	r9, r0
 8004eba:	e05b      	b.n	8004f74 <__kernel_rem_pio2f+0x214>
 8004ebc:	2400      	movs	r4, #0
 8004ebe:	e766      	b.n	8004d8e <__kernel_rem_pio2f+0x2e>
 8004ec0:	eb18 0f05 	cmn.w	r8, r5
 8004ec4:	d407      	bmi.n	8004ed6 <__kernel_rem_pio2f+0x176>
 8004ec6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8004eca:	f7fb fd53 	bl	8000974 <__aeabi_i2f>
 8004ece:	f846 0b04 	str.w	r0, [r6], #4
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	e76e      	b.n	8004db4 <__kernel_rem_pio2f+0x54>
 8004ed6:	4658      	mov	r0, fp
 8004ed8:	e7f9      	b.n	8004ece <__kernel_rem_pio2f+0x16e>
 8004eda:	9307      	str	r3, [sp, #28]
 8004edc:	9b05      	ldr	r3, [sp, #20]
 8004ede:	f8da 1000 	ldr.w	r1, [sl]
 8004ee2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004ee6:	f7fb f943 	bl	8000170 <__aeabi_fmul>
 8004eea:	4601      	mov	r1, r0
 8004eec:	4630      	mov	r0, r6
 8004eee:	f7fb fc8d 	bl	800080c <__addsf3>
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	9b07      	ldr	r3, [sp, #28]
 8004ef6:	f108 0801 	add.w	r8, r8, #1
 8004efa:	9a03      	ldr	r2, [sp, #12]
 8004efc:	f1aa 0a04 	sub.w	sl, sl, #4
 8004f00:	4590      	cmp	r8, r2
 8004f02:	ddea      	ble.n	8004eda <__kernel_rem_pio2f+0x17a>
 8004f04:	f84b 6b04 	str.w	r6, [fp], #4
 8004f08:	f109 0901 	add.w	r9, r9, #1
 8004f0c:	3504      	adds	r5, #4
 8004f0e:	e75d      	b.n	8004dcc <__kernel_rem_pio2f+0x6c>
 8004f10:	46aa      	mov	sl, r5
 8004f12:	461e      	mov	r6, r3
 8004f14:	f04f 0800 	mov.w	r8, #0
 8004f18:	e7ef      	b.n	8004efa <__kernel_rem_pio2f+0x19a>
 8004f1a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7fb f926 	bl	8000170 <__aeabi_fmul>
 8004f24:	f7fb fdf0 	bl	8000b08 <__aeabi_f2iz>
 8004f28:	f7fb fd24 	bl	8000974 <__aeabi_i2f>
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	9009      	str	r0, [sp, #36]	; 0x24
 8004f30:	f7fb f91e 	bl	8000170 <__aeabi_fmul>
 8004f34:	4601      	mov	r1, r0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7fb fc66 	bl	8000808 <__aeabi_fsub>
 8004f3c:	f7fb fde4 	bl	8000b08 <__aeabi_f2iz>
 8004f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f46:	f846 0b04 	str.w	r0, [r6], #4
 8004f4a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fb fc5c 	bl	800080c <__addsf3>
 8004f54:	4605      	mov	r5, r0
 8004f56:	e754      	b.n	8004e02 <__kernel_rem_pio2f+0xa2>
 8004f58:	d106      	bne.n	8004f68 <__kernel_rem_pio2f+0x208>
 8004f5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8004f5e:	aa0a      	add	r2, sp, #40	; 0x28
 8004f60:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8004f64:	11ed      	asrs	r5, r5, #7
 8004f66:	e783      	b.n	8004e70 <__kernel_rem_pio2f+0x110>
 8004f68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f6c:	f7fb fdb8 	bl	8000ae0 <__aeabi_fcmpge>
 8004f70:	4605      	mov	r5, r0
 8004f72:	bb98      	cbnz	r0, 8004fdc <__kernel_rem_pio2f+0x27c>
 8004f74:	2100      	movs	r1, #0
 8004f76:	4648      	mov	r0, r9
 8004f78:	f7fb fd94 	bl	8000aa4 <__aeabi_fcmpeq>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	f000 8098 	beq.w	80050b2 <__kernel_rem_pio2f+0x352>
 8004f82:	f108 34ff 	add.w	r4, r8, #4294967295
 8004f86:	4623      	mov	r3, r4
 8004f88:	2200      	movs	r2, #0
 8004f8a:	9901      	ldr	r1, [sp, #4]
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	da4c      	bge.n	800502a <__kernel_rem_pio2f+0x2ca>
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	d067      	beq.n	8005064 <__kernel_rem_pio2f+0x304>
 8004f94:	ab0a      	add	r3, sp, #40	; 0x28
 8004f96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004f9a:	3f08      	subs	r7, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8086 	beq.w	80050ae <__kernel_rem_pio2f+0x34e>
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004fa8:	f000 f98e 	bl	80052c8 <scalbnf>
 8004fac:	46a2      	mov	sl, r4
 8004fae:	4681      	mov	r9, r0
 8004fb0:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8004fb4:	af46      	add	r7, sp, #280	; 0x118
 8004fb6:	f1ba 0f00 	cmp.w	sl, #0
 8004fba:	f280 80af 	bge.w	800511c <__kernel_rem_pio2f+0x3bc>
 8004fbe:	4627      	mov	r7, r4
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2f00      	cmp	r7, #0
 8004fc4:	f2c0 80d9 	blt.w	800517a <__kernel_rem_pio2f+0x41a>
 8004fc8:	a946      	add	r1, sp, #280	; 0x118
 8004fca:	4690      	mov	r8, r2
 8004fcc:	f04f 0a00 	mov.w	sl, #0
 8004fd0:	4b23      	ldr	r3, [pc, #140]	; (8005060 <__kernel_rem_pio2f+0x300>)
 8004fd2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8004fd6:	eba4 0907 	sub.w	r9, r4, r7
 8004fda:	e0c2      	b.n	8005162 <__kernel_rem_pio2f+0x402>
 8004fdc:	2502      	movs	r5, #2
 8004fde:	e749      	b.n	8004e74 <__kernel_rem_pio2f+0x114>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f1ba 0f00 	cmp.w	sl, #0
 8004fe6:	d108      	bne.n	8004ffa <__kernel_rem_pio2f+0x29a>
 8004fe8:	b11b      	cbz	r3, 8004ff2 <__kernel_rem_pio2f+0x292>
 8004fea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	469a      	mov	sl, r3
 8004ff4:	3201      	adds	r2, #1
 8004ff6:	3404      	adds	r4, #4
 8004ff8:	e73f      	b.n	8004e7a <__kernel_rem_pio2f+0x11a>
 8004ffa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	4653      	mov	r3, sl
 8005002:	e7f6      	b.n	8004ff2 <__kernel_rem_pio2f+0x292>
 8005004:	f108 32ff 	add.w	r2, r8, #4294967295
 8005008:	ab0a      	add	r3, sp, #40	; 0x28
 800500a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	a90a      	add	r1, sp, #40	; 0x28
 8005014:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005018:	e73a      	b.n	8004e90 <__kernel_rem_pio2f+0x130>
 800501a:	f108 32ff 	add.w	r2, r8, #4294967295
 800501e:	ab0a      	add	r3, sp, #40	; 0x28
 8005020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005028:	e7f3      	b.n	8005012 <__kernel_rem_pio2f+0x2b2>
 800502a:	a90a      	add	r1, sp, #40	; 0x28
 800502c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005030:	3b01      	subs	r3, #1
 8005032:	430a      	orrs	r2, r1
 8005034:	e7a9      	b.n	8004f8a <__kernel_rem_pio2f+0x22a>
 8005036:	3401      	adds	r4, #1
 8005038:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800503c:	2a00      	cmp	r2, #0
 800503e:	d0fa      	beq.n	8005036 <__kernel_rem_pio2f+0x2d6>
 8005040:	9b04      	ldr	r3, [sp, #16]
 8005042:	aa1e      	add	r2, sp, #120	; 0x78
 8005044:	4443      	add	r3, r8
 8005046:	f108 0601 	add.w	r6, r8, #1
 800504a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800504e:	4444      	add	r4, r8
 8005050:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8005054:	42b4      	cmp	r4, r6
 8005056:	da08      	bge.n	800506a <__kernel_rem_pio2f+0x30a>
 8005058:	46a0      	mov	r8, r4
 800505a:	e6c6      	b.n	8004dea <__kernel_rem_pio2f+0x8a>
 800505c:	08005ed4 	.word	0x08005ed4
 8005060:	08005ea8 	.word	0x08005ea8
 8005064:	2401      	movs	r4, #1
 8005066:	9b08      	ldr	r3, [sp, #32]
 8005068:	e7e6      	b.n	8005038 <__kernel_rem_pio2f+0x2d8>
 800506a:	9b07      	ldr	r3, [sp, #28]
 800506c:	46ab      	mov	fp, r5
 800506e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005072:	f7fb fc7f 	bl	8000974 <__aeabi_i2f>
 8005076:	f04f 0a00 	mov.w	sl, #0
 800507a:	f04f 0800 	mov.w	r8, #0
 800507e:	6028      	str	r0, [r5, #0]
 8005080:	9b03      	ldr	r3, [sp, #12]
 8005082:	459a      	cmp	sl, r3
 8005084:	dd04      	ble.n	8005090 <__kernel_rem_pio2f+0x330>
 8005086:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800508a:	3504      	adds	r5, #4
 800508c:	3601      	adds	r6, #1
 800508e:	e7e1      	b.n	8005054 <__kernel_rem_pio2f+0x2f4>
 8005090:	9b05      	ldr	r3, [sp, #20]
 8005092:	f85b 0904 	ldr.w	r0, [fp], #-4
 8005096:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800509a:	f7fb f869 	bl	8000170 <__aeabi_fmul>
 800509e:	4601      	mov	r1, r0
 80050a0:	4640      	mov	r0, r8
 80050a2:	f7fb fbb3 	bl	800080c <__addsf3>
 80050a6:	f10a 0a01 	add.w	sl, sl, #1
 80050aa:	4680      	mov	r8, r0
 80050ac:	e7e8      	b.n	8005080 <__kernel_rem_pio2f+0x320>
 80050ae:	3c01      	subs	r4, #1
 80050b0:	e770      	b.n	8004f94 <__kernel_rem_pio2f+0x234>
 80050b2:	9b06      	ldr	r3, [sp, #24]
 80050b4:	9a02      	ldr	r2, [sp, #8]
 80050b6:	4648      	mov	r0, r9
 80050b8:	1a99      	subs	r1, r3, r2
 80050ba:	f000 f905 	bl	80052c8 <scalbnf>
 80050be:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80050c2:	4604      	mov	r4, r0
 80050c4:	f7fb fd0c 	bl	8000ae0 <__aeabi_fcmpge>
 80050c8:	b300      	cbz	r0, 800510c <__kernel_rem_pio2f+0x3ac>
 80050ca:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7fb f84e 	bl	8000170 <__aeabi_fmul>
 80050d4:	f7fb fd18 	bl	8000b08 <__aeabi_f2iz>
 80050d8:	f7fb fc4c 	bl	8000974 <__aeabi_i2f>
 80050dc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80050e0:	4681      	mov	r9, r0
 80050e2:	f7fb f845 	bl	8000170 <__aeabi_fmul>
 80050e6:	4601      	mov	r1, r0
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7fb fb8d 	bl	8000808 <__aeabi_fsub>
 80050ee:	f7fb fd0b 	bl	8000b08 <__aeabi_f2iz>
 80050f2:	ab0a      	add	r3, sp, #40	; 0x28
 80050f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80050f8:	4648      	mov	r0, r9
 80050fa:	f7fb fd05 	bl	8000b08 <__aeabi_f2iz>
 80050fe:	f108 0401 	add.w	r4, r8, #1
 8005102:	ab0a      	add	r3, sp, #40	; 0x28
 8005104:	3708      	adds	r7, #8
 8005106:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800510a:	e74a      	b.n	8004fa2 <__kernel_rem_pio2f+0x242>
 800510c:	4620      	mov	r0, r4
 800510e:	f7fb fcfb 	bl	8000b08 <__aeabi_f2iz>
 8005112:	ab0a      	add	r3, sp, #40	; 0x28
 8005114:	4644      	mov	r4, r8
 8005116:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800511a:	e742      	b.n	8004fa2 <__kernel_rem_pio2f+0x242>
 800511c:	ab0a      	add	r3, sp, #40	; 0x28
 800511e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005122:	f7fb fc27 	bl	8000974 <__aeabi_i2f>
 8005126:	4649      	mov	r1, r9
 8005128:	f7fb f822 	bl	8000170 <__aeabi_fmul>
 800512c:	4641      	mov	r1, r8
 800512e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8005132:	4648      	mov	r0, r9
 8005134:	f7fb f81c 	bl	8000170 <__aeabi_fmul>
 8005138:	f10a 3aff 	add.w	sl, sl, #4294967295
 800513c:	4681      	mov	r9, r0
 800513e:	e73a      	b.n	8004fb6 <__kernel_rem_pio2f+0x256>
 8005140:	f853 0b04 	ldr.w	r0, [r3], #4
 8005144:	f85b 1b04 	ldr.w	r1, [fp], #4
 8005148:	9203      	str	r2, [sp, #12]
 800514a:	9302      	str	r3, [sp, #8]
 800514c:	f7fb f810 	bl	8000170 <__aeabi_fmul>
 8005150:	4601      	mov	r1, r0
 8005152:	4640      	mov	r0, r8
 8005154:	f7fb fb5a 	bl	800080c <__addsf3>
 8005158:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800515c:	4680      	mov	r8, r0
 800515e:	f10a 0a01 	add.w	sl, sl, #1
 8005162:	9901      	ldr	r1, [sp, #4]
 8005164:	458a      	cmp	sl, r1
 8005166:	dc01      	bgt.n	800516c <__kernel_rem_pio2f+0x40c>
 8005168:	45ca      	cmp	sl, r9
 800516a:	dde9      	ble.n	8005140 <__kernel_rem_pio2f+0x3e0>
 800516c:	ab5a      	add	r3, sp, #360	; 0x168
 800516e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8005172:	f849 8ca0 	str.w	r8, [r9, #-160]
 8005176:	3f01      	subs	r7, #1
 8005178:	e723      	b.n	8004fc2 <__kernel_rem_pio2f+0x262>
 800517a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800517c:	2b02      	cmp	r3, #2
 800517e:	dc07      	bgt.n	8005190 <__kernel_rem_pio2f+0x430>
 8005180:	2b00      	cmp	r3, #0
 8005182:	dc4e      	bgt.n	8005222 <__kernel_rem_pio2f+0x4c2>
 8005184:	d02e      	beq.n	80051e4 <__kernel_rem_pio2f+0x484>
 8005186:	f006 0007 	and.w	r0, r6, #7
 800518a:	b05b      	add	sp, #364	; 0x16c
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8005192:	2b03      	cmp	r3, #3
 8005194:	d1f7      	bne.n	8005186 <__kernel_rem_pio2f+0x426>
 8005196:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800519a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800519e:	46b8      	mov	r8, r7
 80051a0:	46a2      	mov	sl, r4
 80051a2:	f1ba 0f00 	cmp.w	sl, #0
 80051a6:	dc49      	bgt.n	800523c <__kernel_rem_pio2f+0x4dc>
 80051a8:	46a1      	mov	r9, r4
 80051aa:	f1b9 0f01 	cmp.w	r9, #1
 80051ae:	dc60      	bgt.n	8005272 <__kernel_rem_pio2f+0x512>
 80051b0:	2000      	movs	r0, #0
 80051b2:	2c01      	cmp	r4, #1
 80051b4:	dc76      	bgt.n	80052a4 <__kernel_rem_pio2f+0x544>
 80051b6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80051b8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80051ba:	2d00      	cmp	r5, #0
 80051bc:	d178      	bne.n	80052b0 <__kernel_rem_pio2f+0x550>
 80051be:	9900      	ldr	r1, [sp, #0]
 80051c0:	600a      	str	r2, [r1, #0]
 80051c2:	460a      	mov	r2, r1
 80051c4:	604b      	str	r3, [r1, #4]
 80051c6:	6090      	str	r0, [r2, #8]
 80051c8:	e7dd      	b.n	8005186 <__kernel_rem_pio2f+0x426>
 80051ca:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80051ce:	f7fb fb1d 	bl	800080c <__addsf3>
 80051d2:	3c01      	subs	r4, #1
 80051d4:	2c00      	cmp	r4, #0
 80051d6:	daf8      	bge.n	80051ca <__kernel_rem_pio2f+0x46a>
 80051d8:	b10d      	cbz	r5, 80051de <__kernel_rem_pio2f+0x47e>
 80051da:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80051de:	9b00      	ldr	r3, [sp, #0]
 80051e0:	6018      	str	r0, [r3, #0]
 80051e2:	e7d0      	b.n	8005186 <__kernel_rem_pio2f+0x426>
 80051e4:	2000      	movs	r0, #0
 80051e6:	af32      	add	r7, sp, #200	; 0xc8
 80051e8:	e7f4      	b.n	80051d4 <__kernel_rem_pio2f+0x474>
 80051ea:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80051ee:	f7fb fb0d 	bl	800080c <__addsf3>
 80051f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80051f6:	f1b8 0f00 	cmp.w	r8, #0
 80051fa:	daf6      	bge.n	80051ea <__kernel_rem_pio2f+0x48a>
 80051fc:	b1ad      	cbz	r5, 800522a <__kernel_rem_pio2f+0x4ca>
 80051fe:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8005202:	9a00      	ldr	r2, [sp, #0]
 8005204:	4601      	mov	r1, r0
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800520a:	f7fb fafd 	bl	8000808 <__aeabi_fsub>
 800520e:	f04f 0801 	mov.w	r8, #1
 8005212:	4544      	cmp	r4, r8
 8005214:	da0b      	bge.n	800522e <__kernel_rem_pio2f+0x4ce>
 8005216:	b10d      	cbz	r5, 800521c <__kernel_rem_pio2f+0x4bc>
 8005218:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800521c:	9b00      	ldr	r3, [sp, #0]
 800521e:	6058      	str	r0, [r3, #4]
 8005220:	e7b1      	b.n	8005186 <__kernel_rem_pio2f+0x426>
 8005222:	46a0      	mov	r8, r4
 8005224:	2000      	movs	r0, #0
 8005226:	af32      	add	r7, sp, #200	; 0xc8
 8005228:	e7e5      	b.n	80051f6 <__kernel_rem_pio2f+0x496>
 800522a:	4603      	mov	r3, r0
 800522c:	e7e9      	b.n	8005202 <__kernel_rem_pio2f+0x4a2>
 800522e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005232:	f7fb faeb 	bl	800080c <__addsf3>
 8005236:	f108 0801 	add.w	r8, r8, #1
 800523a:	e7ea      	b.n	8005212 <__kernel_rem_pio2f+0x4b2>
 800523c:	f8d8 3000 	ldr.w	r3, [r8]
 8005240:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005244:	4619      	mov	r1, r3
 8005246:	4610      	mov	r0, r2
 8005248:	9302      	str	r3, [sp, #8]
 800524a:	9201      	str	r2, [sp, #4]
 800524c:	f7fb fade 	bl	800080c <__addsf3>
 8005250:	9a01      	ldr	r2, [sp, #4]
 8005252:	4601      	mov	r1, r0
 8005254:	4681      	mov	r9, r0
 8005256:	4610      	mov	r0, r2
 8005258:	f7fb fad6 	bl	8000808 <__aeabi_fsub>
 800525c:	9b02      	ldr	r3, [sp, #8]
 800525e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005262:	4619      	mov	r1, r3
 8005264:	f7fb fad2 	bl	800080c <__addsf3>
 8005268:	f848 0904 	str.w	r0, [r8], #-4
 800526c:	f8c8 9000 	str.w	r9, [r8]
 8005270:	e797      	b.n	80051a2 <__kernel_rem_pio2f+0x442>
 8005272:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005276:	f8d7 a000 	ldr.w	sl, [r7]
 800527a:	4618      	mov	r0, r3
 800527c:	4651      	mov	r1, sl
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	f7fb fac4 	bl	800080c <__addsf3>
 8005284:	9b01      	ldr	r3, [sp, #4]
 8005286:	4601      	mov	r1, r0
 8005288:	4680      	mov	r8, r0
 800528a:	4618      	mov	r0, r3
 800528c:	f7fb fabc 	bl	8000808 <__aeabi_fsub>
 8005290:	4651      	mov	r1, sl
 8005292:	f7fb fabb 	bl	800080c <__addsf3>
 8005296:	f847 0904 	str.w	r0, [r7], #-4
 800529a:	f109 39ff 	add.w	r9, r9, #4294967295
 800529e:	f8c7 8000 	str.w	r8, [r7]
 80052a2:	e782      	b.n	80051aa <__kernel_rem_pio2f+0x44a>
 80052a4:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80052a8:	f7fb fab0 	bl	800080c <__addsf3>
 80052ac:	3c01      	subs	r4, #1
 80052ae:	e780      	b.n	80051b2 <__kernel_rem_pio2f+0x452>
 80052b0:	9900      	ldr	r1, [sp, #0]
 80052b2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80052b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	600a      	str	r2, [r1, #0]
 80052bc:	604b      	str	r3, [r1, #4]
 80052be:	460a      	mov	r2, r1
 80052c0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80052c4:	e77f      	b.n	80051c6 <__kernel_rem_pio2f+0x466>
 80052c6:	bf00      	nop

080052c8 <scalbnf>:
 80052c8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4603      	mov	r3, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	4604      	mov	r4, r0
 80052d4:	d02e      	beq.n	8005334 <scalbnf+0x6c>
 80052d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80052da:	d304      	bcc.n	80052e6 <scalbnf+0x1e>
 80052dc:	4601      	mov	r1, r0
 80052de:	f7fb fa95 	bl	800080c <__addsf3>
 80052e2:	4603      	mov	r3, r0
 80052e4:	e026      	b.n	8005334 <scalbnf+0x6c>
 80052e6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80052ea:	d118      	bne.n	800531e <scalbnf+0x56>
 80052ec:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80052f0:	f7fa ff3e 	bl	8000170 <__aeabi_fmul>
 80052f4:	4a17      	ldr	r2, [pc, #92]	; (8005354 <scalbnf+0x8c>)
 80052f6:	4603      	mov	r3, r0
 80052f8:	4295      	cmp	r5, r2
 80052fa:	db0c      	blt.n	8005316 <scalbnf+0x4e>
 80052fc:	4604      	mov	r4, r0
 80052fe:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005302:	3a19      	subs	r2, #25
 8005304:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005308:	428d      	cmp	r5, r1
 800530a:	dd0a      	ble.n	8005322 <scalbnf+0x5a>
 800530c:	4912      	ldr	r1, [pc, #72]	; (8005358 <scalbnf+0x90>)
 800530e:	4618      	mov	r0, r3
 8005310:	f361 001e 	bfi	r0, r1, #0, #31
 8005314:	e000      	b.n	8005318 <scalbnf+0x50>
 8005316:	4911      	ldr	r1, [pc, #68]	; (800535c <scalbnf+0x94>)
 8005318:	f7fa ff2a 	bl	8000170 <__aeabi_fmul>
 800531c:	e7e1      	b.n	80052e2 <scalbnf+0x1a>
 800531e:	0dd2      	lsrs	r2, r2, #23
 8005320:	e7f0      	b.n	8005304 <scalbnf+0x3c>
 8005322:	1951      	adds	r1, r2, r5
 8005324:	29fe      	cmp	r1, #254	; 0xfe
 8005326:	dcf1      	bgt.n	800530c <scalbnf+0x44>
 8005328:	2900      	cmp	r1, #0
 800532a:	dd05      	ble.n	8005338 <scalbnf+0x70>
 800532c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8005330:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8005334:	4618      	mov	r0, r3
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	f111 0f16 	cmn.w	r1, #22
 800533c:	da01      	bge.n	8005342 <scalbnf+0x7a>
 800533e:	4907      	ldr	r1, [pc, #28]	; (800535c <scalbnf+0x94>)
 8005340:	e7e5      	b.n	800530e <scalbnf+0x46>
 8005342:	f101 0019 	add.w	r0, r1, #25
 8005346:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800534a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800534e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8005352:	e7e1      	b.n	8005318 <scalbnf+0x50>
 8005354:	ffff3cb0 	.word	0xffff3cb0
 8005358:	7149f2ca 	.word	0x7149f2ca
 800535c:	0da24260 	.word	0x0da24260

08005360 <floorf>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005366:	3d7f      	subs	r5, #127	; 0x7f
 8005368:	2d16      	cmp	r5, #22
 800536a:	4601      	mov	r1, r0
 800536c:	4604      	mov	r4, r0
 800536e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005372:	dc25      	bgt.n	80053c0 <floorf+0x60>
 8005374:	2d00      	cmp	r5, #0
 8005376:	da0e      	bge.n	8005396 <floorf+0x36>
 8005378:	4916      	ldr	r1, [pc, #88]	; (80053d4 <floorf+0x74>)
 800537a:	f7fb fa47 	bl	800080c <__addsf3>
 800537e:	2100      	movs	r1, #0
 8005380:	f7fb fbb8 	bl	8000af4 <__aeabi_fcmpgt>
 8005384:	b128      	cbz	r0, 8005392 <floorf+0x32>
 8005386:	2c00      	cmp	r4, #0
 8005388:	da22      	bge.n	80053d0 <floorf+0x70>
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <floorf+0x78>)
 800538c:	2e00      	cmp	r6, #0
 800538e:	bf18      	it	ne
 8005390:	461c      	movne	r4, r3
 8005392:	4621      	mov	r1, r4
 8005394:	e01a      	b.n	80053cc <floorf+0x6c>
 8005396:	4e11      	ldr	r6, [pc, #68]	; (80053dc <floorf+0x7c>)
 8005398:	412e      	asrs	r6, r5
 800539a:	4230      	tst	r0, r6
 800539c:	d016      	beq.n	80053cc <floorf+0x6c>
 800539e:	490d      	ldr	r1, [pc, #52]	; (80053d4 <floorf+0x74>)
 80053a0:	f7fb fa34 	bl	800080c <__addsf3>
 80053a4:	2100      	movs	r1, #0
 80053a6:	f7fb fba5 	bl	8000af4 <__aeabi_fcmpgt>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0f1      	beq.n	8005392 <floorf+0x32>
 80053ae:	2c00      	cmp	r4, #0
 80053b0:	bfbe      	ittt	lt
 80053b2:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80053b6:	412b      	asrlt	r3, r5
 80053b8:	18e4      	addlt	r4, r4, r3
 80053ba:	ea24 0406 	bic.w	r4, r4, r6
 80053be:	e7e8      	b.n	8005392 <floorf+0x32>
 80053c0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80053c4:	d302      	bcc.n	80053cc <floorf+0x6c>
 80053c6:	f7fb fa21 	bl	800080c <__addsf3>
 80053ca:	4601      	mov	r1, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	2400      	movs	r4, #0
 80053d2:	e7de      	b.n	8005392 <floorf+0x32>
 80053d4:	7149f2ca 	.word	0x7149f2ca
 80053d8:	bf800000 	.word	0xbf800000
 80053dc:	007fffff 	.word	0x007fffff

080053e0 <_init>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr

080053ec <_fini>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr
