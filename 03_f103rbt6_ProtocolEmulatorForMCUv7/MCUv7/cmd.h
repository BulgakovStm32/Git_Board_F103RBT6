
#ifndef MCU_CMD_H
#define MCU_CMD_H

//*******************************************************************************************
//*******************************************************************************************
/*!
* @brief список команд платы MCUv7.
*/
typedef enum{
	//-----------------------------------------------
	//Команды мотора.
	cmdSetMicrostep				= 0x00, //Задать микрошаг. По умолчанию задан STEP_32.
										 //STEP_ERR = 0,
										 //STEP_1   = 1,
										 //STEP_2   = 2,
										 //STEP_4   = 4,
										 //STEP_8   = 8,
										 //STEP_16  = 16,
										 //STEP_32  = 32,
	cmdSetReducerRate			= 0x01,	//Задать передаточное число редуктора, целое число.
	cmdSetAccelerationTime		= 0x02, //Задать время в течении которого будет происходить ускорение, в мС.
	cmdSetMaxVelocity 			= 0x03, //Задать максимальную скорость, в оборотах в минуту (RPM)

	cmdMotorTorqueCtrl, 				//Вкл./Откл. момента удержания мотора.
    cmdSetTargetPosition, 				//Задать целевое положение, в градсах. На сколько градусов нужно повернуть вал ШД. Учитывается передаточное число редуктора и микрошаг мотора.
										//Число со знаком: 0 - нет вращения; Положительное число - вращение против часовой стрелки; Отрицательное число - вращение по часовой стрелке.
	cmdEmergencyStopRotation, 			//Аварийная остановка вращения. Остановка происходит не резко, а за время, заданное командой cmdSetAccelerationTime.

	//Возможно эти команды не нужны.
    cmdGetCurrentPosition, 		//Получить текущее положение, в градсах. Число со знаком: 0 - нет вращения; Положительное число - вращение против часовой стрелки; Отрицательное число - вращение по часовой стрелке.
	cmdGetAccelerationTime, 	//Получить время в течении которого будет происходить ускорение, в мС.
	cmdGetMaxVelocity, 			//Получить максимальную скорость, в оборотах в минуту (RPM)
//	cmdGetMicrostep, 			//Получить микрошаг. 0 - 1 - 2 - 4 - 8 - 16 - 32.
//	cmdGetReducerRate,			//Получить передаточное число редуктора, целое число.
	//-----------------------------------------------
	//Команды энкодера.
	cmdSetEncoderConfig,				//Задать разрешение и тип кода (Грей или бинарный) энкодера.
	cmdGetEncoderConfig,				//Получить параметры энкодера(разрешение и тип кода).
	cmdGetEncoderCode, 					//Получить код энкодера, т.е. значение от 0 до 2^(разрешение_энкодера).
	cmdGetEncoderAngle,					//Получить угол энкодера в градусах от 0 до 360 градусов.
	//-----------------------------------------------
	//Команды датчиков температуры.
	cmdCheckTemperatureSensors, 		//Команда опрашивает шину на наличие тепературных датчиков. <---Возможно эта команда не нужна.
	cmdGetTemperature, 					//Получить значение от датчика температуры. <--- В каких единицах?
	//-----------------------------------------------
	//Остальные команды.
	cmdGetMillisCount, 					//Получить текущее значение миллисекундного таймера MCU

	cmdGetMotorAndEncoderPosition, 		//Прочитать положение мотора и положение энекодера. <---Непонятная команда. Для чего она?
	cmdPeripheralsPowerCtl, 			//Управление питанием переферии.
	cmdTurnOffPower, 					//Выключить питание.
	cmdGetSystemCtrlReg, 				//Чтение системного регистра управления. <--- Что в нем должно хранится?

	cmdFirmwareVersion,					//Версия ПО MCU. Си-строка, максимум из 17 символов (включая '\\0')
	cmdSignal, 							//Команда отправляет сигнал пользователю.
	//-----------------------------------------------



//    cmdGetCurrentPosition       		= 0x00, //получить текущий угол <---Текущий угол чего?? Мотора или Энкодера?
//    cmdGetCurrentAccelerationTime   	= 0x01, //получить время в течении которого будет происходить ускорение, в мС.
//    cmdGetCurrentVelocity       		= 0x02, //получить скорость, в оборотах в минуту (RPM)
//
//
//    cmdResetPosition					= 0x08, //сбросить позицию ????
//    cmdEmergencyStop					= 0x09, //аварийная остановка. - ???
//												//Актуальна при застреваниях */
//
//	  cmdArduinoMicroTS           		= 0x0A, //запросить текущее значение микросекунд таймера ардуино
//    cmdArduinoMeasurePulseCalibration 	= 0x0B, //запомнить текущее значение таймера ардуино для последующего извлечения с помощью #cmdArduinoGetPulseCalibration
//    cmdArduinoGetPulseCalibration 		= 0x0C, //получить измеренное значение таймера с помощью команды #cmdArduinoMeasurePulseCalibration

//    cmdEnableStealthChop          		= 0x0D, /**< активировать бесшумный режим */
//    cmdReadTMC4361Register        		= 0x0E, /**< прочитать значение регистра чипа tmc4361 */
//    cmdWriteTMC4361Register    	  		= 0x0F, /**< задать значение регистра чипа tmc4361 */
//    cmdReadTMC2130Register     	    	= 0x10, /**< прочитать значение регистра чипа tmc2130 */
//    cmdWriteTMC2130Register        		= 0x11, /**< задать значение регистра чипа tmc2130 */
//    cmdEnableChopper 						= 0x12, /**<  */

//    cmdSetEncoderConstant 				= 0x13, /**< Установить константу для энкодера. */
//    cmdGetEncoderConstant 				= 0x14, /**< получить константу энекодера. */
//	  cmdGetEncoderPosition 				= 0x15, /**< получить значение энкодера */
//    cmdResetEncoderPosTolCtrl 			= 0x16, /**< @brief Сбросить значение в ноль для системы контроля отклонения энекодера от текущей позиции мотора. */

	/**@brief Команда на включение системы контроля отклонения положения энекодера от текущей позиции мотора. Если
     * данная система включена, то при привышении отклонения положения энкодера выше заданной величены
     * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStartEncoderPosTolCtrl 		= 0x17,

	/**@brief Команда на выключение системы контроля отклонения положения энекодера от текущей позиции мотора. Если
    * данная система включена, то при привышении отклонения положения энкодера выше заданной величены
    * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStopEncoderPosTolCtrl 		= 0x18,

	/**@brief Установить зону нечувствительности отклоения положения энекодера от текущей позиции мотора. */
//    cmdSetEncoderPosTol 			= 0x19,

	/**@brief Получить величину зоны нечувствительности отклоения положения энекодера от текущей позиции мотора. */
//    cmdGetEncoderPosTol 			= 0x1A,

	/* @brief Команда на включение системы контроля времени между запросами от системы верхнего уровня.  Если
     * данная система включена, то  при отсутствии запросов от верхнего уровня в течение заданного времени
     * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStartCtrlRequestTime 		= 0x1B,

	/** @brief Команда на выключение системы контроля времени между запросами от системы верхнего уровня.  Если
     * данная система включена, то  при отсутствии запросов от верхнего уровня в течение заданного времени
     * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStopCtrlRequestTime 			= 0x1C,

//    cmdGetMotorAndEncoderPosition 	= 0x1D, /**< @brief Прочитать положение мотора и положение энекодера. */
//    cmdGetShadow 						= 0x20, /**< @brief Прочитать теневой регистр */
//    cmdGetStatusAndFlagReg 			= 0x21, /**< получить текщее состояние интерфейса API. */
//    cmdResetError 					= 0x22, /**< Сбросить ошибки интерфейса API. */
//    cmdPeripheralsPowerCtl 			= 0x27, /**< Управление питанием переферии. */
//    cmdTurnOffPower   				= 0x28, /**< @brief  Выключить питание . */

//    cmdGetSystemCtrlReg 				= 0x32, /**< @brief  Чтение системного регистра управления */
//    cmdModeSleep      				= 0x33, /**< @brief  Перевод  командой от Jetson контроллера в режим sleep(); */
//    cmdGetTemperature 				= 0x34, /**< @brief  Получение значения от датчика температуры */
//    cmdCheckSensors   				= 0x35, /**< @brief  Команда опрашивает шину на наличие тепературных датчиков */
//    cmdMeasureTemperature 			= 0x36, /**< @brief  Команда считывает прошлые измеренные значения температуры и начинает новое измерение */
//	  cmdConfigEncoder 					= 0x37,//

//    cmdFirmwareVersion 				= 0x38,
//    cmdSignal          				= 0x39, /**< @brief Команда отправляет сигнал пользователю. */

	//------------------------------
	//Отладочные команды
	cmdGetSupplyVoltage		= 0x40, //Получение напряжения питания платы MCU, в мВ.
	cmdGetSenseState 		= 0x41, //Получение состояния датчиков наличия крышки объектива и АКБ.
	cmdGetResetCount 		= 0x42,	//Получение значения счетчика переинициализаций I2C. Использовалась при отладке работы шины I2C.

	//------------------------------
    mcuCmdMapSize
}MCUv7_Cmd_t;
//*******************************************************************************************
//*******************************************************************************************
/*!
* @brief список команд, поддерживаемых методом
*/
//typedef enum{
//
//    cmdGetCurrentPosition       		= 0x00, /**< получить текущий угол */
//    cmdGetCurrentAcceleration   		= 0x01, /**< получить текущее ускорение */
//    cmdGetCurrentVelocity       		= 0x02, /**< получить текущую скорость */
//
//    cmdSetTargetPosition        		= 0x03, /**< задать целевое положение */
//    cmdSetMaxAcceleration       		= 0x04, /**< задать максимальное ускорение */
//    cmdSetMaxVelocity           		= 0x05, /**< задать максимальную скорость */
//    cmdSetMicrostep             		= 0x06, /**< задать микрошаг */
//
////    cmdResetTMC                 		= 0x07, /**< сбросить чип */
//    cmdResetPosition            		= 0x08, /**< сбросить позицию */
//    cmdEmergencyStop            		= 0x09, /**< аварийная остановка. Актуальна при застреваниях */
//
//    cmdArduinoMicroTS           		= 0x0A, /**< запросить текущее значение микросекунд таймера ардуино */
//    /**@brief запомнить текущее значение таймера ардуино для последующего извлечения с помощью #cmdArduinoGetPulseCalibration */
//    cmdArduinoMeasurePulseCalibration 	= 0x0B,
//    cmdArduinoGetPulseCalibration 		= 0x0C, /**< получить измеренное значение таймера с помощью команды #cmdArduinoMeasurePulseCalibration */
//    cmdEnableStealthChop          		= 0x0D, /**< активировать бесшумный режим */
////    cmdReadTMC4361Register        		= 0x0E, /**< прочитать значение регистра чипа tmc4361 */
////    cmdWriteTMC4361Register    	  		= 0x0F, /**< задать значение регистра чипа tmc4361 */
////    cmdReadTMC2130Register     	    	= 0x10, /**< прочитать значение регистра чипа tmc2130 */
////    cmdWriteTMC2130Register        		= 0x11, /**< задать значение регистра чипа tmc2130 */
//    cmdEnableChopper 					= 0x12, /**<  */
//
//    cmdSetEncoderConstant 				= 0x13, /**< Установить константу для энкодера. */
//    cmdGetEncoderConstant 				= 0x14, /**< получить константу энекодера. */
//    cmdGetEncoderPosition 				= 0x15, /**< получить значение энкодера */
//    cmdResetEncoderPosTolCtrl 			= 0x16, /**< @brief Сбросить значение в ноль для системы контроля отклонения энекодера от текущей позиции мотора. */
//
//	/**@brief Команда на включение системы контроля отклонения положения энекодера от текущей позиции мотора. Если
//     * данная система включена, то при привышении отклонения положения энкодера выше заданной величены
//     * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStartEncoderPosTolCtrl 	= 0x17,
//
//	/**@brief Команда на выключение системы контроля отклонения положения энекодера от текущей позиции мотора. Если
//    * данная система включена, то при привышении отклонения положения энкодера выше заданной величены
//    * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStopEncoderPosTolCtrl 	= 0x18,
//
//	/**@brief Установить зону нечувствительности отклоения положения энекодера от текущей позиции мотора. */
//    cmdSetEncoderPosTol 		= 0x19,
//
//	/**@brief Получить величину зоны нечувствительности отклоения положения энекодера от текущей позиции мотора. */
//    cmdGetEncoderPosTol 		= 0x1A,
//
//	/* @brief Команда на включение системы контроля времени между запросами от системы верхнего уровня.  Если
//     * данная система включена, то  при отсутствии запросов от верхнего уровня в течение заданного времени
//     * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStartCtrlRequestTime 	= 0x1B,
//
//	/** @brief Команда на выключение системы контроля времени между запросами от системы верхнего уровня.  Если
//     * данная система включена, то  при отсутствии запросов от верхнего уровня в течение заданного времени
//     * будет установлена соответствующая ошибка и аварийно остановлен включенный двигатель. */
//    cmdStopCtrlRequestTime 			= 0x1C,
//
//    cmdGetMotorAndEncoderPosition 	= 0x1D, /**< @brief Прочитать положение мотора и положение энекодера. */
//    cmdGetShadow 					= 0x20, /**< @brief Прочитать теневой регистр */
//    cmdGetStatusAndFlagReg 			= 0x21, /**< получить текщее состояние интерфейса API. */
//    cmdResetError 					= 0x22, /**< Сбросить ошибки интерфейса API. */
//    cmdPeripheralsPowerCtl 			= 0x27, /**< Управление питанием переферии. */
//    cmdTurnOffPower   				= 0x28, /**< @brief  Выключить питание . */
//
//    cmdGetSystemCtrlReg 			= 0x32, /**< @brief  Чтение системного регистра управления */
//    cmdModeSleep      				= 0x33, /**< @brief  Перевод  командой от Jetson контроллера в режим sleep(); */
//    cmdGetTemperature 				= 0x34, /**< @brief  Получение значения от датчика температуры */
//    cmdCheckSensors   				= 0x35, /**< @brief  Команда опрашивает шину на наличие тепературных датчиков */
//    cmdMeasureTemperature 			= 0x36, /**< @brief  Команда считывает прошлые измеренные значения температуры и начинает новое измерение */
//    cmdConfigEncoder 				= 0x37,
//    cmdFirmwareVersion 				= 0x38,
//    cmdSignal          				= 0x39, /**< @brief Команда отправляет сигнал пользователю. */
//
//	cmdGetSupplyVoltage				= 0x40, //Команда возвращает напряжение питания платы MCU, в мВ.
//
//	//Отладочные команды
//	cmdGetSenseState = 0x41,
//	cmdGetResetCount = 0x42,
//
//    mcuCmdMapSize
//}MCU_Cmd_t;
//*******************************************************************************************
//*******************************************************************************************
#endif /* MCU_CMD_H */


